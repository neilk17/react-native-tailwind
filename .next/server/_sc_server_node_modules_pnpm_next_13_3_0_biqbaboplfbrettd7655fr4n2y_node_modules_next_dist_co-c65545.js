"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_sc_server_node_modules_pnpm_next_13_3_0_biqbaboplfbrettd7655fr4n2y_node_modules_next_dist_co-c65545";
exports.ids = ["_sc_server_node_modules_pnpm_next_13_3_0_biqbaboplfbrettd7655fr4n2y_node_modules_next_dist_co-c65545"];
exports.modules = {

/***/ "(sc_server)/./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageResponse\": () => (/* binding */ ImageResponse),\n/* harmony export */   \"unstable_createNodejsStream\": () => (/* binding */ unstable_createNodejsStream)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to2, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to2, key) && key !== except) __defProp(to2, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to2;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n// node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\nvar require_tiny_inflate = __commonJS({\n    \"node_modules/.pnpm/tiny-inflate@1.0.3/node_modules/tiny-inflate/index.js\" (exports2, module) {\n        var TINF_OK = 0;\n        var TINF_DATA_ERROR = -3;\n        function Tree() {\n            this.table = new Uint16Array(16);\n            this.trans = new Uint16Array(288);\n        }\n        function Data(source, dest) {\n            this.source = source;\n            this.sourceIndex = 0;\n            this.tag = 0;\n            this.bitcount = 0;\n            this.dest = dest;\n            this.destLen = 0;\n            this.ltree = new Tree();\n            this.dtree = new Tree();\n        }\n        var sltree = new Tree();\n        var sdtree = new Tree();\n        var length_bits = new Uint8Array(30);\n        var length_base = new Uint16Array(30);\n        var dist_bits = new Uint8Array(30);\n        var dist_base = new Uint16Array(30);\n        var clcidx = new Uint8Array([\n            16,\n            17,\n            18,\n            0,\n            8,\n            7,\n            9,\n            6,\n            10,\n            5,\n            11,\n            4,\n            12,\n            3,\n            13,\n            2,\n            14,\n            1,\n            15\n        ]);\n        var code_tree = new Tree();\n        var lengths = new Uint8Array(288 + 32);\n        function tinf_build_bits_base(bits2, base, delta, first) {\n            var i, sum;\n            for(i = 0; i < delta; ++i)bits2[i] = 0;\n            for(i = 0; i < 30 - delta; ++i)bits2[i + delta] = i / delta | 0;\n            for(sum = first, i = 0; i < 30; ++i){\n                base[i] = sum;\n                sum += 1 << bits2[i];\n            }\n        }\n        function tinf_build_fixed_trees(lt, dt) {\n            var i;\n            for(i = 0; i < 7; ++i)lt.table[i] = 0;\n            lt.table[7] = 24;\n            lt.table[8] = 152;\n            lt.table[9] = 112;\n            for(i = 0; i < 24; ++i)lt.trans[i] = 256 + i;\n            for(i = 0; i < 144; ++i)lt.trans[24 + i] = i;\n            for(i = 0; i < 8; ++i)lt.trans[24 + 144 + i] = 280 + i;\n            for(i = 0; i < 112; ++i)lt.trans[24 + 144 + 8 + i] = 144 + i;\n            for(i = 0; i < 5; ++i)dt.table[i] = 0;\n            dt.table[5] = 32;\n            for(i = 0; i < 32; ++i)dt.trans[i] = i;\n        }\n        var offs = new Uint16Array(16);\n        function tinf_build_tree(t, lengths2, off, num) {\n            var i, sum;\n            for(i = 0; i < 16; ++i)t.table[i] = 0;\n            for(i = 0; i < num; ++i)t.table[lengths2[off + i]]++;\n            t.table[0] = 0;\n            for(sum = 0, i = 0; i < 16; ++i){\n                offs[i] = sum;\n                sum += t.table[i];\n            }\n            for(i = 0; i < num; ++i){\n                if (lengths2[off + i]) t.trans[offs[lengths2[off + i]]++] = i;\n            }\n        }\n        function tinf_getbit(d) {\n            if (!d.bitcount--) {\n                d.tag = d.source[d.sourceIndex++];\n                d.bitcount = 7;\n            }\n            var bit = d.tag & 1;\n            d.tag >>>= 1;\n            return bit;\n        }\n        function tinf_read_bits(d, num, base) {\n            if (!num) return base;\n            while(d.bitcount < 24){\n                d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                d.bitcount += 8;\n            }\n            var val = d.tag & 65535 >>> 16 - num;\n            d.tag >>>= num;\n            d.bitcount -= num;\n            return val + base;\n        }\n        function tinf_decode_symbol(d, t) {\n            while(d.bitcount < 24){\n                d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n                d.bitcount += 8;\n            }\n            var sum = 0, cur = 0, len = 0;\n            var tag = d.tag;\n            do {\n                cur = 2 * cur + (tag & 1);\n                tag >>>= 1;\n                ++len;\n                sum += t.table[len];\n                cur -= t.table[len];\n            }while (cur >= 0);\n            d.tag = tag;\n            d.bitcount -= len;\n            return t.trans[sum + cur];\n        }\n        function tinf_decode_trees(d, lt, dt) {\n            var hlit, hdist, hclen;\n            var i, num, length;\n            hlit = tinf_read_bits(d, 5, 257);\n            hdist = tinf_read_bits(d, 5, 1);\n            hclen = tinf_read_bits(d, 4, 4);\n            for(i = 0; i < 19; ++i)lengths[i] = 0;\n            for(i = 0; i < hclen; ++i){\n                var clen = tinf_read_bits(d, 3, 0);\n                lengths[clcidx[i]] = clen;\n            }\n            tinf_build_tree(code_tree, lengths, 0, 19);\n            for(num = 0; num < hlit + hdist;){\n                var sym = tinf_decode_symbol(d, code_tree);\n                switch(sym){\n                    case 16:\n                        var prev = lengths[num - 1];\n                        for(length = tinf_read_bits(d, 2, 3); length; --length){\n                            lengths[num++] = prev;\n                        }\n                        break;\n                    case 17:\n                        for(length = tinf_read_bits(d, 3, 3); length; --length){\n                            lengths[num++] = 0;\n                        }\n                        break;\n                    case 18:\n                        for(length = tinf_read_bits(d, 7, 11); length; --length){\n                            lengths[num++] = 0;\n                        }\n                        break;\n                    default:\n                        lengths[num++] = sym;\n                        break;\n                }\n            }\n            tinf_build_tree(lt, lengths, 0, hlit);\n            tinf_build_tree(dt, lengths, hlit, hdist);\n        }\n        function tinf_inflate_block_data(d, lt, dt) {\n            while(1){\n                var sym = tinf_decode_symbol(d, lt);\n                if (sym === 256) {\n                    return TINF_OK;\n                }\n                if (sym < 256) {\n                    d.dest[d.destLen++] = sym;\n                } else {\n                    var length, dist, offs2;\n                    var i;\n                    sym -= 257;\n                    length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n                    dist = tinf_decode_symbol(d, dt);\n                    offs2 = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n                    for(i = offs2; i < offs2 + length; ++i){\n                        d.dest[d.destLen++] = d.dest[i];\n                    }\n                }\n            }\n        }\n        function tinf_inflate_uncompressed_block(d) {\n            var length, invlength;\n            var i;\n            while(d.bitcount > 8){\n                d.sourceIndex--;\n                d.bitcount -= 8;\n            }\n            length = d.source[d.sourceIndex + 1];\n            length = 256 * length + d.source[d.sourceIndex];\n            invlength = d.source[d.sourceIndex + 3];\n            invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n            if (length !== (~invlength & 65535)) return TINF_DATA_ERROR;\n            d.sourceIndex += 4;\n            for(i = length; i; --i)d.dest[d.destLen++] = d.source[d.sourceIndex++];\n            d.bitcount = 0;\n            return TINF_OK;\n        }\n        function tinf_uncompress(source, dest) {\n            var d = new Data(source, dest);\n            var bfinal, btype, res;\n            do {\n                bfinal = tinf_getbit(d);\n                btype = tinf_read_bits(d, 2, 0);\n                switch(btype){\n                    case 0:\n                        res = tinf_inflate_uncompressed_block(d);\n                        break;\n                    case 1:\n                        res = tinf_inflate_block_data(d, sltree, sdtree);\n                        break;\n                    case 2:\n                        tinf_decode_trees(d, d.ltree, d.dtree);\n                        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n                        break;\n                    default:\n                        res = TINF_DATA_ERROR;\n                }\n                if (res !== TINF_OK) throw new Error(\"Data error\");\n            }while (!bfinal);\n            if (d.destLen < d.dest.length) {\n                if (typeof d.dest.slice === \"function\") return d.dest.slice(0, d.destLen);\n                else return d.dest.subarray(0, d.destLen);\n            }\n            return d.dest;\n        }\n        tinf_build_fixed_trees(sltree, sdtree);\n        tinf_build_bits_base(length_bits, length_base, 4, 3);\n        tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n        length_bits[28] = 0;\n        length_base[28] = 258;\n        module.exports = tinf_uncompress;\n    }\n});\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\nvar require_swap = __commonJS({\n    \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/swap.js\" (exports2, module) {\n        var isBigEndian = new Uint8Array(new Uint32Array([\n            305419896\n        ]).buffer)[0] === 18;\n        var swap = (b, n, m2)=>{\n            let i = b[n];\n            b[n] = b[m2];\n            b[m2] = i;\n        };\n        var swap32 = (array)=>{\n            const len = array.length;\n            for(let i = 0; i < len; i += 4){\n                swap(array, i, i + 3);\n                swap(array, i + 1, i + 2);\n            }\n        };\n        var swap32LE = (array)=>{\n            if (isBigEndian) {\n                swap32(array);\n            }\n        };\n        module.exports = {\n            swap32LE\n        };\n    }\n});\n// node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\nvar require_unicode_trie = __commonJS({\n    \"node_modules/.pnpm/unicode-trie@2.0.0/node_modules/unicode-trie/index.js\" (exports2, module) {\n        var inflate = require_tiny_inflate();\n        var { swap32LE  } = require_swap();\n        var SHIFT_1 = 6 + 5;\n        var SHIFT_2 = 5;\n        var SHIFT_1_2 = SHIFT_1 - SHIFT_2;\n        var OMITTED_BMP_INDEX_1_LENGTH = 65536 >> SHIFT_1;\n        var INDEX_2_BLOCK_LENGTH = 1 << SHIFT_1_2;\n        var INDEX_2_MASK = INDEX_2_BLOCK_LENGTH - 1;\n        var INDEX_SHIFT = 2;\n        var DATA_BLOCK_LENGTH = 1 << SHIFT_2;\n        var DATA_MASK = DATA_BLOCK_LENGTH - 1;\n        var LSCP_INDEX_2_OFFSET = 65536 >> SHIFT_2;\n        var LSCP_INDEX_2_LENGTH = 1024 >> SHIFT_2;\n        var INDEX_2_BMP_LENGTH = LSCP_INDEX_2_OFFSET + LSCP_INDEX_2_LENGTH;\n        var UTF8_2B_INDEX_2_OFFSET = INDEX_2_BMP_LENGTH;\n        var UTF8_2B_INDEX_2_LENGTH = 2048 >> 6;\n        var INDEX_1_OFFSET = UTF8_2B_INDEX_2_OFFSET + UTF8_2B_INDEX_2_LENGTH;\n        var DATA_GRANULARITY = 1 << INDEX_SHIFT;\n        var UnicodeTrie = class {\n            constructor(data){\n                const isBuffer = typeof data.readUInt32BE === \"function\" && typeof data.slice === \"function\";\n                if (isBuffer || data instanceof Uint8Array) {\n                    let uncompressedLength;\n                    if (isBuffer) {\n                        this.highStart = data.readUInt32LE(0);\n                        this.errorValue = data.readUInt32LE(4);\n                        uncompressedLength = data.readUInt32LE(8);\n                        data = data.slice(12);\n                    } else {\n                        const view = new DataView(data.buffer);\n                        this.highStart = view.getUint32(0, true);\n                        this.errorValue = view.getUint32(4, true);\n                        uncompressedLength = view.getUint32(8, true);\n                        data = data.subarray(12);\n                    }\n                    data = inflate(data, new Uint8Array(uncompressedLength));\n                    data = inflate(data, new Uint8Array(uncompressedLength));\n                    swap32LE(data);\n                    this.data = new Uint32Array(data.buffer);\n                } else {\n                    ({ data: this.data , highStart: this.highStart , errorValue: this.errorValue  } = data);\n                }\n            }\n            get(codePoint) {\n                let index;\n                if (codePoint < 0 || codePoint > 1114111) {\n                    return this.errorValue;\n                }\n                if (codePoint < 55296 || codePoint > 56319 && codePoint <= 65535) {\n                    index = (this.data[codePoint >> SHIFT_2] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                if (codePoint <= 65535) {\n                    index = (this.data[LSCP_INDEX_2_OFFSET + (codePoint - 55296 >> SHIFT_2)] << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                if (codePoint < this.highStart) {\n                    index = this.data[INDEX_1_OFFSET - OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> SHIFT_1)];\n                    index = this.data[index + (codePoint >> SHIFT_2 & INDEX_2_MASK)];\n                    index = (index << INDEX_SHIFT) + (codePoint & DATA_MASK);\n                    return this.data[index];\n                }\n                return this.data[this.data.length - DATA_GRANULARITY];\n            }\n        };\n        module.exports = UnicodeTrie;\n    }\n});\n// node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\nvar require_b64 = __commonJS({\n    \"node_modules/.pnpm/base64-js@0.0.8/node_modules/base64-js/lib/b64.js\" (exports2) {\n        var lookup = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        (function(exports3) {\n            \"use strict\";\n            var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n            var PLUS = \"+\".charCodeAt(0);\n            var SLASH = \"/\".charCodeAt(0);\n            var NUMBER = \"0\".charCodeAt(0);\n            var LOWER = \"a\".charCodeAt(0);\n            var UPPER = \"A\".charCodeAt(0);\n            var PLUS_URL_SAFE = \"-\".charCodeAt(0);\n            var SLASH_URL_SAFE = \"_\".charCodeAt(0);\n            function decode2(elt) {\n                var code = elt.charCodeAt(0);\n                if (code === PLUS || code === PLUS_URL_SAFE) return 62;\n                if (code === SLASH || code === SLASH_URL_SAFE) return 63;\n                if (code < NUMBER) return -1;\n                if (code < NUMBER + 10) return code - NUMBER + 26 + 26;\n                if (code < UPPER + 26) return code - UPPER;\n                if (code < LOWER + 26) return code - LOWER + 26;\n            }\n            function b64ToByteArray(b64) {\n                var i, j2, l, tmp, placeHolders, arr;\n                if (b64.length % 4 > 0) {\n                    throw new Error(\"Invalid string. Length must be a multiple of 4\");\n                }\n                var len = b64.length;\n                placeHolders = b64.charAt(len - 2) === \"=\" ? 2 : b64.charAt(len - 1) === \"=\" ? 1 : 0;\n                arr = new Arr(b64.length * 3 / 4 - placeHolders);\n                l = placeHolders > 0 ? b64.length - 4 : b64.length;\n                var L = 0;\n                function push(v) {\n                    arr[L++] = v;\n                }\n                for(i = 0, j2 = 0; i < l; i += 4, j2 += 3){\n                    tmp = decode2(b64.charAt(i)) << 18 | decode2(b64.charAt(i + 1)) << 12 | decode2(b64.charAt(i + 2)) << 6 | decode2(b64.charAt(i + 3));\n                    push((tmp & 16711680) >> 16);\n                    push((tmp & 65280) >> 8);\n                    push(tmp & 255);\n                }\n                if (placeHolders === 2) {\n                    tmp = decode2(b64.charAt(i)) << 2 | decode2(b64.charAt(i + 1)) >> 4;\n                    push(tmp & 255);\n                } else if (placeHolders === 1) {\n                    tmp = decode2(b64.charAt(i)) << 10 | decode2(b64.charAt(i + 1)) << 4 | decode2(b64.charAt(i + 2)) >> 2;\n                    push(tmp >> 8 & 255);\n                    push(tmp & 255);\n                }\n                return arr;\n            }\n            function uint8ToBase64(uint8) {\n                var i, extraBytes = uint8.length % 3, output = \"\", temp, length;\n                function encode(num) {\n                    return lookup.charAt(num);\n                }\n                function tripletToBase64(num) {\n                    return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);\n                }\n                for(i = 0, length = uint8.length - extraBytes; i < length; i += 3){\n                    temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];\n                    output += tripletToBase64(temp);\n                }\n                switch(extraBytes){\n                    case 1:\n                        temp = uint8[uint8.length - 1];\n                        output += encode(temp >> 2);\n                        output += encode(temp << 4 & 63);\n                        output += \"==\";\n                        break;\n                    case 2:\n                        temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];\n                        output += encode(temp >> 10);\n                        output += encode(temp >> 4 & 63);\n                        output += encode(temp << 2 & 63);\n                        output += \"=\";\n                        break;\n                }\n                return output;\n            }\n            exports3.toByteArray = b64ToByteArray;\n            exports3.fromByteArray = uint8ToBase64;\n        })(typeof exports2 === \"undefined\" ? exports2.base64js = {} : exports2);\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\nvar require_parse = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/parse.js\" (exports2, module) {\n        var openParentheses = \"(\".charCodeAt(0);\n        var closeParentheses = \")\".charCodeAt(0);\n        var singleQuote = \"'\".charCodeAt(0);\n        var doubleQuote = '\"'.charCodeAt(0);\n        var backslash = \"\\\\\".charCodeAt(0);\n        var slash = \"/\".charCodeAt(0);\n        var comma = \",\".charCodeAt(0);\n        var colon = \":\".charCodeAt(0);\n        var star = \"*\".charCodeAt(0);\n        var uLower = \"u\".charCodeAt(0);\n        var uUpper = \"U\".charCodeAt(0);\n        var plus = \"+\".charCodeAt(0);\n        var isUnicodeRange = /^[a-f0-9?-]+$/i;\n        module.exports = function(input) {\n            var tokens = [];\n            var value = input;\n            var next, quote, prev, token, escape, escapePos, whitespacePos, parenthesesOpenPos;\n            var pos = 0;\n            var code = value.charCodeAt(pos);\n            var max2 = value.length;\n            var stack = [\n                {\n                    nodes: tokens\n                }\n            ];\n            var balanced = 0;\n            var parent;\n            var name = \"\";\n            var before = \"\";\n            var after = \"\";\n            while(pos < max2){\n                if (code <= 32) {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (code <= 32);\n                    token = value.slice(pos, next);\n                    prev = tokens[tokens.length - 1];\n                    if (code === closeParentheses && balanced) {\n                        after = token;\n                    } else if (prev && prev.type === \"div\") {\n                        prev.after = token;\n                        prev.sourceEndIndex += token.length;\n                    } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star && (!parent || parent && parent.type === \"function\" && parent.value !== \"calc\")) {\n                        before = token;\n                    } else {\n                        tokens.push({\n                            type: \"space\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    }\n                    pos = next;\n                } else if (code === singleQuote || code === doubleQuote) {\n                    next = pos;\n                    quote = code === singleQuote ? \"'\" : '\"';\n                    token = {\n                        type: \"string\",\n                        sourceIndex: pos,\n                        quote\n                    };\n                    do {\n                        escape = false;\n                        next = value.indexOf(quote, next + 1);\n                        if (~next) {\n                            escapePos = next;\n                            while(value.charCodeAt(escapePos - 1) === backslash){\n                                escapePos -= 1;\n                                escape = !escape;\n                            }\n                        } else {\n                            value += quote;\n                            next = value.length - 1;\n                            token.unclosed = true;\n                        }\n                    }while (escape);\n                    token.value = value.slice(pos + 1, next);\n                    token.sourceEndIndex = token.unclosed ? next : next + 1;\n                    tokens.push(token);\n                    pos = next + 1;\n                    code = value.charCodeAt(pos);\n                } else if (code === slash && value.charCodeAt(pos + 1) === star) {\n                    next = value.indexOf(\"*/\", pos);\n                    token = {\n                        type: \"comment\",\n                        sourceIndex: pos,\n                        sourceEndIndex: next + 2\n                    };\n                    if (next === -1) {\n                        token.unclosed = true;\n                        next = value.length;\n                        token.sourceEndIndex = next;\n                    }\n                    token.value = value.slice(pos + 2, next);\n                    tokens.push(token);\n                    pos = next + 2;\n                    code = value.charCodeAt(pos);\n                } else if ((code === slash || code === star) && parent && parent.type === \"function\" && parent.value === \"calc\") {\n                    token = value[pos];\n                    tokens.push({\n                        type: \"word\",\n                        sourceIndex: pos - before.length,\n                        sourceEndIndex: pos + token.length,\n                        value: token\n                    });\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                } else if (code === slash || code === comma || code === colon) {\n                    token = value[pos];\n                    tokens.push({\n                        type: \"div\",\n                        sourceIndex: pos - before.length,\n                        sourceEndIndex: pos + token.length,\n                        value: token,\n                        before,\n                        after: \"\"\n                    });\n                    before = \"\";\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                } else if (openParentheses === code) {\n                    next = pos;\n                    do {\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (code <= 32);\n                    parenthesesOpenPos = pos;\n                    token = {\n                        type: \"function\",\n                        sourceIndex: pos - name.length,\n                        value: name,\n                        before: value.slice(parenthesesOpenPos + 1, next)\n                    };\n                    pos = next;\n                    if (name === \"url\" && code !== singleQuote && code !== doubleQuote) {\n                        next -= 1;\n                        do {\n                            escape = false;\n                            next = value.indexOf(\")\", next + 1);\n                            if (~next) {\n                                escapePos = next;\n                                while(value.charCodeAt(escapePos - 1) === backslash){\n                                    escapePos -= 1;\n                                    escape = !escape;\n                                }\n                            } else {\n                                value += \")\";\n                                next = value.length - 1;\n                                token.unclosed = true;\n                            }\n                        }while (escape);\n                        whitespacePos = next;\n                        do {\n                            whitespacePos -= 1;\n                            code = value.charCodeAt(whitespacePos);\n                        }while (code <= 32);\n                        if (parenthesesOpenPos < whitespacePos) {\n                            if (pos !== whitespacePos + 1) {\n                                token.nodes = [\n                                    {\n                                        type: \"word\",\n                                        sourceIndex: pos,\n                                        sourceEndIndex: whitespacePos + 1,\n                                        value: value.slice(pos, whitespacePos + 1)\n                                    }\n                                ];\n                            } else {\n                                token.nodes = [];\n                            }\n                            if (token.unclosed && whitespacePos + 1 !== next) {\n                                token.after = \"\";\n                                token.nodes.push({\n                                    type: \"space\",\n                                    sourceIndex: whitespacePos + 1,\n                                    sourceEndIndex: next,\n                                    value: value.slice(whitespacePos + 1, next)\n                                });\n                            } else {\n                                token.after = value.slice(whitespacePos + 1, next);\n                                token.sourceEndIndex = next;\n                            }\n                        } else {\n                            token.after = \"\";\n                            token.nodes = [];\n                        }\n                        pos = next + 1;\n                        token.sourceEndIndex = token.unclosed ? next : pos;\n                        code = value.charCodeAt(pos);\n                        tokens.push(token);\n                    } else {\n                        balanced += 1;\n                        token.after = \"\";\n                        token.sourceEndIndex = pos + 1;\n                        tokens.push(token);\n                        stack.push(token);\n                        tokens = token.nodes = [];\n                        parent = token;\n                    }\n                    name = \"\";\n                } else if (closeParentheses === code && balanced) {\n                    pos += 1;\n                    code = value.charCodeAt(pos);\n                    parent.after = after;\n                    parent.sourceEndIndex += after.length;\n                    after = \"\";\n                    balanced -= 1;\n                    stack[stack.length - 1].sourceEndIndex = pos;\n                    stack.pop();\n                    parent = stack[balanced];\n                    tokens = parent.nodes;\n                } else {\n                    next = pos;\n                    do {\n                        if (code === backslash) {\n                            next += 1;\n                        }\n                        next += 1;\n                        code = value.charCodeAt(next);\n                    }while (next < max2 && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === star && parent && parent.type === \"function\" && parent.value === \"calc\" || code === slash && parent.type === \"function\" && parent.value === \"calc\" || code === closeParentheses && balanced));\n                    token = value.slice(pos, next);\n                    if (openParentheses === code) {\n                        name = token;\n                    } else if ((uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) && plus === token.charCodeAt(1) && isUnicodeRange.test(token.slice(2))) {\n                        tokens.push({\n                            type: \"unicode-range\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    } else {\n                        tokens.push({\n                            type: \"word\",\n                            sourceIndex: pos,\n                            sourceEndIndex: next,\n                            value: token\n                        });\n                    }\n                    pos = next;\n                }\n            }\n            for(pos = stack.length - 1; pos; pos -= 1){\n                stack[pos].unclosed = true;\n                stack[pos].sourceEndIndex = value.length;\n            }\n            return stack[0].nodes;\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\nvar require_walk = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/walk.js\" (exports2, module) {\n        module.exports = function walk(nodes, cb, bubble) {\n            var i, max2, node, result;\n            for(i = 0, max2 = nodes.length; i < max2; i += 1){\n                node = nodes[i];\n                if (!bubble) {\n                    result = cb(node, i, nodes);\n                }\n                if (result !== false && node.type === \"function\" && Array.isArray(node.nodes)) {\n                    walk(node.nodes, cb, bubble);\n                }\n                if (bubble) {\n                    cb(node, i, nodes);\n                }\n            }\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\nvar require_stringify = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/stringify.js\" (exports2, module) {\n        function stringifyNode(node, custom) {\n            var type = node.type;\n            var value = node.value;\n            var buf;\n            var customResult;\n            if (custom && (customResult = custom(node)) !== void 0) {\n                return customResult;\n            } else if (type === \"word\" || type === \"space\") {\n                return value;\n            } else if (type === \"string\") {\n                buf = node.quote || \"\";\n                return buf + value + (node.unclosed ? \"\" : buf);\n            } else if (type === \"comment\") {\n                return \"/*\" + value + (node.unclosed ? \"\" : \"*/\");\n            } else if (type === \"div\") {\n                return (node.before || \"\") + value + (node.after || \"\");\n            } else if (Array.isArray(node.nodes)) {\n                buf = stringify(node.nodes, custom);\n                if (type !== \"function\") {\n                    return buf;\n                }\n                return value + \"(\" + (node.before || \"\") + buf + (node.after || \"\") + (node.unclosed ? \"\" : \")\");\n            }\n            return value;\n        }\n        function stringify(nodes, custom) {\n            var result, i;\n            if (Array.isArray(nodes)) {\n                result = \"\";\n                for(i = nodes.length - 1; ~i; i -= 1){\n                    result = stringifyNode(nodes[i], custom) + result;\n                }\n                return result;\n            }\n            return stringifyNode(nodes, custom);\n        }\n        module.exports = stringify;\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\nvar require_unit = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/unit.js\" (exports2, module) {\n        var minus = \"-\".charCodeAt(0);\n        var plus = \"+\".charCodeAt(0);\n        var dot = \".\".charCodeAt(0);\n        var exp = \"e\".charCodeAt(0);\n        var EXP = \"E\".charCodeAt(0);\n        function likeNumber(value) {\n            var code = value.charCodeAt(0);\n            var nextCode;\n            if (code === plus || code === minus) {\n                nextCode = value.charCodeAt(1);\n                if (nextCode >= 48 && nextCode <= 57) {\n                    return true;\n                }\n                var nextNextCode = value.charCodeAt(2);\n                if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {\n                    return true;\n                }\n                return false;\n            }\n            if (code === dot) {\n                nextCode = value.charCodeAt(1);\n                if (nextCode >= 48 && nextCode <= 57) {\n                    return true;\n                }\n                return false;\n            }\n            if (code >= 48 && code <= 57) {\n                return true;\n            }\n            return false;\n        }\n        module.exports = function(value) {\n            var pos = 0;\n            var length = value.length;\n            var code;\n            var nextCode;\n            var nextNextCode;\n            if (length === 0 || !likeNumber(value)) {\n                return false;\n            }\n            code = value.charCodeAt(pos);\n            if (code === plus || code === minus) {\n                pos++;\n            }\n            while(pos < length){\n                code = value.charCodeAt(pos);\n                if (code < 48 || code > 57) {\n                    break;\n                }\n                pos += 1;\n            }\n            code = value.charCodeAt(pos);\n            nextCode = value.charCodeAt(pos + 1);\n            if (code === dot && nextCode >= 48 && nextCode <= 57) {\n                pos += 2;\n                while(pos < length){\n                    code = value.charCodeAt(pos);\n                    if (code < 48 || code > 57) {\n                        break;\n                    }\n                    pos += 1;\n                }\n            }\n            code = value.charCodeAt(pos);\n            nextCode = value.charCodeAt(pos + 1);\n            nextNextCode = value.charCodeAt(pos + 2);\n            if ((code === exp || code === EXP) && (nextCode >= 48 && nextCode <= 57 || (nextCode === plus || nextCode === minus) && nextNextCode >= 48 && nextNextCode <= 57)) {\n                pos += nextCode === plus || nextCode === minus ? 3 : 2;\n                while(pos < length){\n                    code = value.charCodeAt(pos);\n                    if (code < 48 || code > 57) {\n                        break;\n                    }\n                    pos += 1;\n                }\n            }\n            return {\n                number: value.slice(0, pos),\n                unit: value.slice(pos)\n            };\n        };\n    }\n});\n// node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\nvar require_lib = __commonJS({\n    \"node_modules/.pnpm/postcss-value-parser@4.2.0/node_modules/postcss-value-parser/lib/index.js\" (exports2, module) {\n        var parse2 = require_parse();\n        var walk = require_walk();\n        var stringify = require_stringify();\n        function ValueParser(value) {\n            if (this instanceof ValueParser) {\n                this.nodes = parse2(value);\n                return this;\n            }\n            return new ValueParser(value);\n        }\n        ValueParser.prototype.toString = function() {\n            return Array.isArray(this.nodes) ? stringify(this.nodes) : \"\";\n        };\n        ValueParser.prototype.walk = function(cb, bubble) {\n            walk(this.nodes, cb, bubble);\n            return this;\n        };\n        ValueParser.unit = require_unit();\n        ValueParser.walk = walk;\n        ValueParser.stringify = stringify;\n        module.exports = ValueParser;\n    }\n});\n// node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\nvar require_camelize = __commonJS({\n    \"node_modules/.pnpm/camelize@1.0.0/node_modules/camelize/index.js\" (exports2, module) {\n        module.exports = function(obj) {\n            if (typeof obj === \"string\") return camelCase(obj);\n            return walk(obj);\n        };\n        function walk(obj) {\n            if (!obj || typeof obj !== \"object\") return obj;\n            if (isDate(obj) || isRegex(obj)) return obj;\n            if (isArray(obj)) return map(obj, walk);\n            return reduce(objectKeys(obj), function(acc, key) {\n                var camel = camelCase(key);\n                acc[camel] = walk(obj[key]);\n                return acc;\n            }, {});\n        }\n        function camelCase(str) {\n            return str.replace(/[_.-](\\w|$)/g, function(_, x) {\n                return x.toUpperCase();\n            });\n        }\n        var isArray = Array.isArray || function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Array]\";\n        };\n        var isDate = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object Date]\";\n        };\n        var isRegex = function(obj) {\n            return Object.prototype.toString.call(obj) === \"[object RegExp]\";\n        };\n        var has = Object.prototype.hasOwnProperty;\n        var objectKeys = Object.keys || function(obj) {\n            var keys = [];\n            for(var key in obj){\n                if (has.call(obj, key)) keys.push(key);\n            }\n            return keys;\n        };\n        function map(xs2, f) {\n            if (xs2.map) return xs2.map(f);\n            var res = [];\n            for(var i = 0; i < xs2.length; i++){\n                res.push(f(xs2[i], i));\n            }\n            return res;\n        }\n        function reduce(xs2, f, acc) {\n            if (xs2.reduce) return xs2.reduce(f, acc);\n            for(var i = 0; i < xs2.length; i++){\n                acc = f(acc, xs2[i], i);\n            }\n            return acc;\n        }\n    }\n});\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\nvar require_colors = __commonJS({\n    \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/colors.json\" (exports2, module) {\n        module.exports = {\n            black: \"#000000\",\n            silver: \"#c0c0c0\",\n            gray: \"#808080\",\n            white: \"#ffffff\",\n            maroon: \"#800000\",\n            red: \"#ff0000\",\n            purple: \"#800080\",\n            fuchsia: \"#ff00ff\",\n            green: \"#008000\",\n            lime: \"#00ff00\",\n            olive: \"#808000\",\n            yellow: \"#ffff00\",\n            navy: \"#000080\",\n            blue: \"#0000ff\",\n            teal: \"#008080\",\n            aqua: \"#00ffff\",\n            orange: \"#ffa500\",\n            aliceblue: \"#f0f8ff\",\n            antiquewhite: \"#faebd7\",\n            aquamarine: \"#7fffd4\",\n            azure: \"#f0ffff\",\n            beige: \"#f5f5dc\",\n            bisque: \"#ffe4c4\",\n            blanchedalmond: \"#ffebcd\",\n            blueviolet: \"#8a2be2\",\n            brown: \"#a52a2a\",\n            burlywood: \"#deb887\",\n            cadetblue: \"#5f9ea0\",\n            chartreuse: \"#7fff00\",\n            chocolate: \"#d2691e\",\n            coral: \"#ff7f50\",\n            cornflowerblue: \"#6495ed\",\n            cornsilk: \"#fff8dc\",\n            crimson: \"#dc143c\",\n            darkblue: \"#00008b\",\n            darkcyan: \"#008b8b\",\n            darkgoldenrod: \"#b8860b\",\n            darkgray: \"#a9a9a9\",\n            darkgreen: \"#006400\",\n            darkgrey: \"#a9a9a9\",\n            darkkhaki: \"#bdb76b\",\n            darkmagenta: \"#8b008b\",\n            darkolivegreen: \"#556b2f\",\n            darkorange: \"#ff8c00\",\n            darkorchid: \"#9932cc\",\n            darkred: \"#8b0000\",\n            darksalmon: \"#e9967a\",\n            darkseagreen: \"#8fbc8f\",\n            darkslateblue: \"#483d8b\",\n            darkslategray: \"#2f4f4f\",\n            darkslategrey: \"#2f4f4f\",\n            darkturquoise: \"#00ced1\",\n            darkviolet: \"#9400d3\",\n            deeppink: \"#ff1493\",\n            deepskyblue: \"#00bfff\",\n            dimgray: \"#696969\",\n            dimgrey: \"#696969\",\n            dodgerblue: \"#1e90ff\",\n            firebrick: \"#b22222\",\n            floralwhite: \"#fffaf0\",\n            forestgreen: \"#228b22\",\n            gainsboro: \"#dcdcdc\",\n            ghostwhite: \"#f8f8ff\",\n            gold: \"#ffd700\",\n            goldenrod: \"#daa520\",\n            greenyellow: \"#adff2f\",\n            grey: \"#808080\",\n            honeydew: \"#f0fff0\",\n            hotpink: \"#ff69b4\",\n            indianred: \"#cd5c5c\",\n            indigo: \"#4b0082\",\n            ivory: \"#fffff0\",\n            khaki: \"#f0e68c\",\n            lavender: \"#e6e6fa\",\n            lavenderblush: \"#fff0f5\",\n            lawngreen: \"#7cfc00\",\n            lemonchiffon: \"#fffacd\",\n            lightblue: \"#add8e6\",\n            lightcoral: \"#f08080\",\n            lightcyan: \"#e0ffff\",\n            lightgoldenrodyellow: \"#fafad2\",\n            lightgray: \"#d3d3d3\",\n            lightgreen: \"#90ee90\",\n            lightgrey: \"#d3d3d3\",\n            lightpink: \"#ffb6c1\",\n            lightsalmon: \"#ffa07a\",\n            lightseagreen: \"#20b2aa\",\n            lightskyblue: \"#87cefa\",\n            lightslategray: \"#778899\",\n            lightslategrey: \"#778899\",\n            lightsteelblue: \"#b0c4de\",\n            lightyellow: \"#ffffe0\",\n            limegreen: \"#32cd32\",\n            linen: \"#faf0e6\",\n            mediumaquamarine: \"#66cdaa\",\n            mediumblue: \"#0000cd\",\n            mediumorchid: \"#ba55d3\",\n            mediumpurple: \"#9370db\",\n            mediumseagreen: \"#3cb371\",\n            mediumslateblue: \"#7b68ee\",\n            mediumspringgreen: \"#00fa9a\",\n            mediumturquoise: \"#48d1cc\",\n            mediumvioletred: \"#c71585\",\n            midnightblue: \"#191970\",\n            mintcream: \"#f5fffa\",\n            mistyrose: \"#ffe4e1\",\n            moccasin: \"#ffe4b5\",\n            navajowhite: \"#ffdead\",\n            oldlace: \"#fdf5e6\",\n            olivedrab: \"#6b8e23\",\n            orangered: \"#ff4500\",\n            orchid: \"#da70d6\",\n            palegoldenrod: \"#eee8aa\",\n            palegreen: \"#98fb98\",\n            paleturquoise: \"#afeeee\",\n            palevioletred: \"#db7093\",\n            papayawhip: \"#ffefd5\",\n            peachpuff: \"#ffdab9\",\n            peru: \"#cd853f\",\n            pink: \"#ffc0cb\",\n            plum: \"#dda0dd\",\n            powderblue: \"#b0e0e6\",\n            rosybrown: \"#bc8f8f\",\n            royalblue: \"#4169e1\",\n            saddlebrown: \"#8b4513\",\n            salmon: \"#fa8072\",\n            sandybrown: \"#f4a460\",\n            seagreen: \"#2e8b57\",\n            seashell: \"#fff5ee\",\n            sienna: \"#a0522d\",\n            skyblue: \"#87ceeb\",\n            slateblue: \"#6a5acd\",\n            slategray: \"#708090\",\n            slategrey: \"#708090\",\n            snow: \"#fffafa\",\n            springgreen: \"#00ff7f\",\n            steelblue: \"#4682b4\",\n            tan: \"#d2b48c\",\n            thistle: \"#d8bfd8\",\n            tomato: \"#ff6347\",\n            turquoise: \"#40e0d0\",\n            violet: \"#ee82ee\",\n            wheat: \"#f5deb3\",\n            whitesmoke: \"#f5f5f5\",\n            yellowgreen: \"#9acd32\",\n            rebeccapurple: \"#663399\"\n        };\n    }\n});\n// node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\nvar require_css_color_keywords = __commonJS({\n    \"node_modules/.pnpm/css-color-keywords@1.0.0/node_modules/css-color-keywords/index.js\" (exports2, module) {\n        \"use strict\";\n        module.exports = require_colors();\n    }\n});\n// node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\nvar require_css_to_react_native = __commonJS({\n    \"node_modules/.pnpm/css-to-react-native@3.0.0/node_modules/css-to-react-native/index.js\" (exports2) {\n        \"use strict\";\n        Object.defineProperty(exports2, \"__esModule\", {\n            value: true\n        });\n        function _interopDefault(ex) {\n            return ex && typeof ex === \"object\" && \"default\" in ex ? ex[\"default\"] : ex;\n        }\n        var parse2 = require_lib();\n        var parse__default = _interopDefault(parse2);\n        var camelizeStyleName = _interopDefault(require_camelize());\n        var cssColorKeywords = _interopDefault(require_css_color_keywords());\n        var matchString = function matchString2(node) {\n            if (node.type !== \"string\") return null;\n            return node.value.replace(/\\\\([0-9a-f]{1,6})(?:\\s|$)/gi, function(match, charCode) {\n                return String.fromCharCode(parseInt(charCode, 16));\n            }).replace(/\\\\/g, \"\");\n        };\n        var hexColorRe = /^(#(?:[0-9a-f]{3,4}){1,2})$/i;\n        var cssFunctionNameRe = /^(rgba?|hsla?|hwb|lab|lch|gray|color)$/;\n        var matchColor = function matchColor2(node) {\n            if (node.type === \"word\" && (hexColorRe.test(node.value) || node.value in cssColorKeywords || node.value === \"transparent\")) {\n                return node.value;\n            } else if (node.type === \"function\" && cssFunctionNameRe.test(node.value)) {\n                return parse2.stringify(node);\n            }\n            return null;\n        };\n        var noneRe = /^(none)$/i;\n        var autoRe = /^(auto)$/i;\n        var identRe = /(^-?[_a-z][_a-z0-9-]*$)/i;\n        var numberRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)$/i;\n        var lengthRe = /^(0$|(?:[+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?=px$))/i;\n        var unsupportedUnitRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(ch|em|ex|rem|vh|vw|vmin|vmax|cm|mm|in|pc|pt))$/i;\n        var angleRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?(?:deg|rad))$/i;\n        var percentRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?%)$/i;\n        var noopToken = function noopToken2(predicate) {\n            return function(node) {\n                return predicate(node) ? \"<token>\" : null;\n            };\n        };\n        var valueForTypeToken = function valueForTypeToken2(type) {\n            return function(node) {\n                return node.type === type ? node.value : null;\n            };\n        };\n        var regExpToken = function regExpToken2(regExp, transform2) {\n            if (transform2 === void 0) {\n                transform2 = String;\n            }\n            return function(node) {\n                if (node.type !== \"word\") return null;\n                var match = node.value.match(regExp);\n                if (match === null) return null;\n                var value = transform2(match[1]);\n                return value;\n            };\n        };\n        var SPACE = noopToken(function(node) {\n            return node.type === \"space\";\n        });\n        var SLASH = noopToken(function(node) {\n            return node.type === \"div\" && node.value === \"/\";\n        });\n        var COMMA = noopToken(function(node) {\n            return node.type === \"div\" && node.value === \",\";\n        });\n        var WORD = valueForTypeToken(\"word\");\n        var NONE = regExpToken(noneRe);\n        var AUTO = regExpToken(autoRe);\n        var NUMBER = regExpToken(numberRe, Number);\n        var LENGTH = regExpToken(lengthRe, Number);\n        var UNSUPPORTED_LENGTH_UNIT = regExpToken(unsupportedUnitRe);\n        var ANGLE = regExpToken(angleRe, function(angle) {\n            return angle.toLowerCase();\n        });\n        var PERCENT = regExpToken(percentRe);\n        var IDENT = regExpToken(identRe);\n        var STRING = matchString;\n        var COLOR = matchColor;\n        var LINE = regExpToken(/^(none|underline|line-through)$/i);\n        var BORDER_STYLE = regExpToken(/^(solid|dashed|dotted)$/);\n        var defaultBorderWidth = 1;\n        var defaultBorderColor = \"black\";\n        var defaultBorderStyle = \"solid\";\n        var border = function border2(tokenStream) {\n            var borderWidth2;\n            var borderColor2;\n            var borderStyle;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    borderWidth: 0,\n                    borderColor: \"black\",\n                    borderStyle: \"solid\"\n                };\n            }\n            var partsParsed = 0;\n            while(partsParsed < 3 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (borderWidth2 === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                    borderWidth2 = tokenStream.lastValue;\n                } else if (borderColor2 === void 0 && tokenStream.matches(COLOR)) {\n                    borderColor2 = tokenStream.lastValue;\n                } else if (borderStyle === void 0 && tokenStream.matches(BORDER_STYLE)) {\n                    borderStyle = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (borderWidth2 === void 0) borderWidth2 = defaultBorderWidth;\n            if (borderColor2 === void 0) borderColor2 = defaultBorderColor;\n            if (borderStyle === void 0) borderStyle = defaultBorderStyle;\n            return {\n                borderWidth: borderWidth2,\n                borderColor: borderColor2,\n                borderStyle\n            };\n        };\n        var directionFactory = function directionFactory2(_ref) {\n            var _ref$types = _ref.types, types = _ref$types === void 0 ? [\n                LENGTH,\n                UNSUPPORTED_LENGTH_UNIT,\n                PERCENT\n            ] : _ref$types, _ref$directions = _ref.directions, directions = _ref$directions === void 0 ? [\n                \"Top\",\n                \"Right\",\n                \"Bottom\",\n                \"Left\"\n            ] : _ref$directions, _ref$prefix = _ref.prefix, prefix = _ref$prefix === void 0 ? \"\" : _ref$prefix, _ref$suffix = _ref.suffix, suffix = _ref$suffix === void 0 ? \"\" : _ref$suffix;\n            return function(tokenStream) {\n                var _ref2;\n                var values = [];\n                values.push(tokenStream.expect.apply(tokenStream, types));\n                while(values.length < 4 && tokenStream.hasTokens()){\n                    tokenStream.expect(SPACE);\n                    values.push(tokenStream.expect.apply(tokenStream, types));\n                }\n                tokenStream.expectEmpty();\n                var top = values[0], _values$ = values[1], right = _values$ === void 0 ? top : _values$, _values$2 = values[2], bottom = _values$2 === void 0 ? top : _values$2, _values$3 = values[3], left = _values$3 === void 0 ? right : _values$3;\n                var keyFor = function keyFor2(n) {\n                    return \"\" + prefix + directions[n] + suffix;\n                };\n                return _ref2 = {}, _ref2[keyFor(0)] = top, _ref2[keyFor(1)] = right, _ref2[keyFor(2)] = bottom, _ref2[keyFor(3)] = left, _ref2;\n            };\n        };\n        var parseShadowOffset = function parseShadowOffset2(tokenStream) {\n            var width = tokenStream.expect(LENGTH);\n            var height = tokenStream.matches(SPACE) ? tokenStream.expect(LENGTH) : width;\n            tokenStream.expectEmpty();\n            return {\n                width,\n                height\n            };\n        };\n        var parseShadow = function parseShadow2(tokenStream) {\n            var offsetX;\n            var offsetY;\n            var radius;\n            var color;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    offset: {\n                        width: 0,\n                        height: 0\n                    },\n                    radius: 0,\n                    color: \"black\"\n                };\n            }\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                if (offsetX === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                    offsetX = tokenStream.lastValue;\n                    tokenStream.expect(SPACE);\n                    offsetY = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n                    tokenStream.saveRewindPoint();\n                    if (tokenStream.matches(SPACE) && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT)) {\n                        radius = tokenStream.lastValue;\n                    } else {\n                        tokenStream.rewind();\n                    }\n                } else if (color === void 0 && tokenStream.matches(COLOR)) {\n                    color = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                didParseFirst = true;\n            }\n            if (offsetX === void 0) tokenStream[\"throw\"]();\n            return {\n                offset: {\n                    width: offsetX,\n                    height: offsetY\n                },\n                radius: radius !== void 0 ? radius : 0,\n                color: color !== void 0 ? color : \"black\"\n            };\n        };\n        var boxShadow = function boxShadow2(tokenStream) {\n            var _parseShadow = parseShadow(tokenStream), offset = _parseShadow.offset, radius = _parseShadow.radius, color = _parseShadow.color;\n            return {\n                shadowOffset: offset,\n                shadowRadius: radius,\n                shadowColor: color,\n                shadowOpacity: 1\n            };\n        };\n        var defaultFlexGrow = 1;\n        var defaultFlexShrink = 1;\n        var defaultFlexBasis = 0;\n        var flex = function flex2(tokenStream) {\n            var flexGrow;\n            var flexShrink;\n            var flexBasis;\n            if (tokenStream.matches(NONE)) {\n                tokenStream.expectEmpty();\n                return {\n                    flexGrow: 0,\n                    flexShrink: 0,\n                    flexBasis: \"auto\"\n                };\n            }\n            tokenStream.saveRewindPoint();\n            if (tokenStream.matches(AUTO) && !tokenStream.hasTokens()) {\n                return {\n                    flexGrow: 1,\n                    flexShrink: 1,\n                    flexBasis: \"auto\"\n                };\n            }\n            tokenStream.rewind();\n            var partsParsed = 0;\n            while(partsParsed < 2 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (flexGrow === void 0 && tokenStream.matches(NUMBER)) {\n                    flexGrow = tokenStream.lastValue;\n                    tokenStream.saveRewindPoint();\n                    if (tokenStream.matches(SPACE) && tokenStream.matches(NUMBER)) {\n                        flexShrink = tokenStream.lastValue;\n                    } else {\n                        tokenStream.rewind();\n                    }\n                } else if (flexBasis === void 0 && tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT)) {\n                    flexBasis = tokenStream.lastValue;\n                } else if (flexBasis === void 0 && tokenStream.matches(AUTO)) {\n                    flexBasis = \"auto\";\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (flexGrow === void 0) flexGrow = defaultFlexGrow;\n            if (flexShrink === void 0) flexShrink = defaultFlexShrink;\n            if (flexBasis === void 0) flexBasis = defaultFlexBasis;\n            return {\n                flexGrow,\n                flexShrink,\n                flexBasis\n            };\n        };\n        var FLEX_WRAP = regExpToken(/(nowrap|wrap|wrap-reverse)/);\n        var FLEX_DIRECTION = regExpToken(/(row|row-reverse|column|column-reverse)/);\n        var defaultFlexWrap = \"nowrap\";\n        var defaultFlexDirection = \"row\";\n        var flexFlow = function flexFlow2(tokenStream) {\n            var flexWrap;\n            var flexDirection;\n            var partsParsed = 0;\n            while(partsParsed < 2 && tokenStream.hasTokens()){\n                if (partsParsed !== 0) tokenStream.expect(SPACE);\n                if (flexWrap === void 0 && tokenStream.matches(FLEX_WRAP)) {\n                    flexWrap = tokenStream.lastValue;\n                } else if (flexDirection === void 0 && tokenStream.matches(FLEX_DIRECTION)) {\n                    flexDirection = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                partsParsed += 1;\n            }\n            tokenStream.expectEmpty();\n            if (flexWrap === void 0) flexWrap = defaultFlexWrap;\n            if (flexDirection === void 0) flexDirection = defaultFlexDirection;\n            return {\n                flexWrap,\n                flexDirection\n            };\n        };\n        var fontFamily = function fontFamily2(tokenStream) {\n            var fontFamily3;\n            if (tokenStream.matches(STRING)) {\n                fontFamily3 = tokenStream.lastValue;\n            } else {\n                fontFamily3 = tokenStream.expect(IDENT);\n                while(tokenStream.hasTokens()){\n                    tokenStream.expect(SPACE);\n                    var nextIdent = tokenStream.expect(IDENT);\n                    fontFamily3 += \" \" + nextIdent;\n                }\n            }\n            tokenStream.expectEmpty();\n            return {\n                fontFamily: fontFamily3\n            };\n        };\n        var NORMAL = regExpToken(/^(normal)$/);\n        var STYLE = regExpToken(/^(italic)$/);\n        var WEIGHT = regExpToken(/^([1-9]00|bold)$/);\n        var VARIANT = regExpToken(/^(small-caps)$/);\n        var defaultFontStyle = \"normal\";\n        var defaultFontWeight = \"normal\";\n        var defaultFontVariant = [];\n        var font = function font2(tokenStream) {\n            var fontStyle;\n            var fontWeight2;\n            var fontVariant2;\n            var lineHeight;\n            var numStyleWeightVariantMatched = 0;\n            while(numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()){\n                if (tokenStream.matches(NORMAL)) ;\n                else if (fontStyle === void 0 && tokenStream.matches(STYLE)) {\n                    fontStyle = tokenStream.lastValue;\n                } else if (fontWeight2 === void 0 && tokenStream.matches(WEIGHT)) {\n                    fontWeight2 = tokenStream.lastValue;\n                } else if (fontVariant2 === void 0 && tokenStream.matches(VARIANT)) {\n                    fontVariant2 = [\n                        tokenStream.lastValue\n                    ];\n                } else {\n                    break;\n                }\n                tokenStream.expect(SPACE);\n                numStyleWeightVariantMatched += 1;\n            }\n            var fontSize = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n            if (tokenStream.matches(SLASH)) {\n                lineHeight = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT);\n            }\n            tokenStream.expect(SPACE);\n            var _fontFamily = fontFamily(tokenStream), fontFamily$1 = _fontFamily.fontFamily;\n            if (fontStyle === void 0) fontStyle = defaultFontStyle;\n            if (fontWeight2 === void 0) fontWeight2 = defaultFontWeight;\n            if (fontVariant2 === void 0) fontVariant2 = defaultFontVariant;\n            var out = {\n                fontStyle,\n                fontWeight: fontWeight2,\n                fontVariant: fontVariant2,\n                fontSize,\n                fontFamily: fontFamily$1\n            };\n            if (lineHeight !== void 0) out.lineHeight = lineHeight;\n            return out;\n        };\n        var ALIGN_CONTENT = regExpToken(/(flex-(?:start|end)|center|stretch|space-(?:between|around))/);\n        var JUSTIFY_CONTENT = regExpToken(/(flex-(?:start|end)|center|space-(?:between|around|evenly))/);\n        var placeContent = function placeContent2(tokenStream) {\n            var alignContent = tokenStream.expect(ALIGN_CONTENT);\n            var justifyContent;\n            if (tokenStream.hasTokens()) {\n                tokenStream.expect(SPACE);\n                justifyContent = tokenStream.expect(JUSTIFY_CONTENT);\n            } else {\n                justifyContent = \"stretch\";\n            }\n            tokenStream.expectEmpty();\n            return {\n                alignContent,\n                justifyContent\n            };\n        };\n        var STYLE$1 = regExpToken(/^(solid|double|dotted|dashed)$/);\n        var defaultTextDecorationLine = \"none\";\n        var defaultTextDecorationStyle = \"solid\";\n        var defaultTextDecorationColor = \"black\";\n        var textDecoration = function textDecoration2(tokenStream) {\n            var line;\n            var style;\n            var color;\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                if (line === void 0 && tokenStream.matches(LINE)) {\n                    var lines = [\n                        tokenStream.lastValue.toLowerCase()\n                    ];\n                    tokenStream.saveRewindPoint();\n                    if (lines[0] !== \"none\" && tokenStream.matches(SPACE) && tokenStream.matches(LINE)) {\n                        lines.push(tokenStream.lastValue.toLowerCase());\n                        lines.sort().reverse();\n                    } else {\n                        tokenStream.rewind();\n                    }\n                    line = lines.join(\" \");\n                } else if (style === void 0 && tokenStream.matches(STYLE$1)) {\n                    style = tokenStream.lastValue;\n                } else if (color === void 0 && tokenStream.matches(COLOR)) {\n                    color = tokenStream.lastValue;\n                } else {\n                    tokenStream[\"throw\"]();\n                }\n                didParseFirst = true;\n            }\n            return {\n                textDecorationLine: line !== void 0 ? line : defaultTextDecorationLine,\n                textDecorationColor: color !== void 0 ? color : defaultTextDecorationColor,\n                textDecorationStyle: style !== void 0 ? style : defaultTextDecorationStyle\n            };\n        };\n        var textDecorationLine = function textDecorationLine2(tokenStream) {\n            var lines = [];\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                lines.push(tokenStream.expect(LINE).toLowerCase());\n                didParseFirst = true;\n            }\n            lines.sort().reverse();\n            return {\n                textDecorationLine: lines.join(\" \")\n            };\n        };\n        var textShadow = function textShadow2(tokenStream) {\n            var _parseShadow2 = parseShadow(tokenStream), offset = _parseShadow2.offset, radius = _parseShadow2.radius, color = _parseShadow2.color;\n            return {\n                textShadowOffset: offset,\n                textShadowRadius: radius,\n                textShadowColor: color\n            };\n        };\n        var oneOfType = function oneOfType2(tokenType) {\n            return function(functionStream) {\n                var value = functionStream.expect(tokenType);\n                functionStream.expectEmpty();\n                return value;\n            };\n        };\n        var singleNumber = oneOfType(NUMBER);\n        var singleLength = oneOfType(LENGTH);\n        var singleAngle = oneOfType(ANGLE);\n        var xyTransformFactory = function xyTransformFactory2(tokenType) {\n            return function(key, valueIfOmitted) {\n                return function(functionStream) {\n                    var _ref3, _ref4;\n                    var x = functionStream.expect(tokenType);\n                    var y;\n                    if (functionStream.hasTokens()) {\n                        functionStream.expect(COMMA);\n                        y = functionStream.expect(tokenType);\n                    } else if (valueIfOmitted !== void 0) {\n                        y = valueIfOmitted;\n                    } else {\n                        return x;\n                    }\n                    functionStream.expectEmpty();\n                    return [\n                        (_ref3 = {}, _ref3[key + \"Y\"] = y, _ref3),\n                        (_ref4 = {}, _ref4[key + \"X\"] = x, _ref4)\n                    ];\n                };\n            };\n        };\n        var xyNumber = xyTransformFactory(NUMBER);\n        var xyLength = xyTransformFactory(LENGTH);\n        var xyAngle = xyTransformFactory(ANGLE);\n        var partTransforms = {\n            perspective: singleNumber,\n            scale: xyNumber(\"scale\"),\n            scaleX: singleNumber,\n            scaleY: singleNumber,\n            translate: xyLength(\"translate\", 0),\n            translateX: singleLength,\n            translateY: singleLength,\n            rotate: singleAngle,\n            rotateX: singleAngle,\n            rotateY: singleAngle,\n            rotateZ: singleAngle,\n            skewX: singleAngle,\n            skewY: singleAngle,\n            skew: xyAngle(\"skew\", \"0deg\")\n        };\n        var transform = function transform2(tokenStream) {\n            var transforms2 = [];\n            var didParseFirst = false;\n            while(tokenStream.hasTokens()){\n                if (didParseFirst) tokenStream.expect(SPACE);\n                var functionStream = tokenStream.expectFunction();\n                var functionName = functionStream.functionName;\n                var transformedValues = partTransforms[functionName](functionStream);\n                if (!Array.isArray(transformedValues)) {\n                    var _ref5;\n                    transformedValues = [\n                        (_ref5 = {}, _ref5[functionName] = transformedValues, _ref5)\n                    ];\n                }\n                transforms2 = transformedValues.concat(transforms2);\n                didParseFirst = true;\n            }\n            return {\n                transform: transforms2\n            };\n        };\n        var background = function background2(tokenStream) {\n            return {\n                backgroundColor: tokenStream.expect(COLOR)\n            };\n        };\n        var borderColor = directionFactory({\n            types: [\n                COLOR\n            ],\n            prefix: \"border\",\n            suffix: \"Color\"\n        });\n        var borderRadius = directionFactory({\n            directions: [\n                \"TopLeft\",\n                \"TopRight\",\n                \"BottomRight\",\n                \"BottomLeft\"\n            ],\n            prefix: \"border\",\n            suffix: \"Radius\"\n        });\n        var borderWidth = directionFactory({\n            prefix: \"border\",\n            suffix: \"Width\"\n        });\n        var margin = directionFactory({\n            types: [\n                LENGTH,\n                UNSUPPORTED_LENGTH_UNIT,\n                PERCENT,\n                AUTO\n            ],\n            prefix: \"margin\"\n        });\n        var padding = directionFactory({\n            prefix: \"padding\"\n        });\n        var fontVariant = function fontVariant2(tokenStream) {\n            return {\n                fontVariant: [\n                    tokenStream.expect(IDENT)\n                ]\n            };\n        };\n        var fontWeight = function fontWeight2(tokenStream) {\n            return {\n                fontWeight: tokenStream.expect(WORD)\n            };\n        };\n        var shadowOffset = function shadowOffset2(tokenStream) {\n            return {\n                shadowOffset: parseShadowOffset(tokenStream)\n            };\n        };\n        var textShadowOffset = function textShadowOffset2(tokenStream) {\n            return {\n                textShadowOffset: parseShadowOffset(tokenStream)\n            };\n        };\n        var transforms = {\n            background,\n            border,\n            borderColor,\n            borderRadius,\n            borderWidth,\n            boxShadow,\n            flex,\n            flexFlow,\n            font,\n            fontFamily,\n            fontVariant,\n            fontWeight,\n            margin,\n            padding,\n            placeContent,\n            shadowOffset,\n            textShadow,\n            textShadowOffset,\n            textDecoration,\n            textDecorationLine,\n            transform\n        };\n        var propertiesWithoutUnits;\n        if (true) {\n            propertiesWithoutUnits = [\n                \"aspectRatio\",\n                \"elevation\",\n                \"flexGrow\",\n                \"flexShrink\",\n                \"opacity\",\n                \"shadowOpacity\",\n                \"zIndex\"\n            ];\n        }\n        var devPropertiesWithUnitsRegExp = propertiesWithoutUnits != null ? new RegExp(propertiesWithoutUnits.join(\"|\")) : null;\n        var SYMBOL_MATCH = \"SYMBOL_MATCH\";\n        var TokenStream = /* @__PURE__ */ function() {\n            function TokenStream2(nodes, parent) {\n                this.index = 0;\n                this.nodes = nodes;\n                this.functionName = parent != null ? parent.value : null;\n                this.lastValue = null;\n                this.rewindIndex = -1;\n            }\n            var _proto = TokenStream2.prototype;\n            _proto.hasTokens = function hasTokens() {\n                return this.index <= this.nodes.length - 1;\n            };\n            _proto[SYMBOL_MATCH] = function() {\n                if (!this.hasTokens()) return null;\n                var node = this.nodes[this.index];\n                for(var i = 0; i < arguments.length; i += 1){\n                    var tokenDescriptor = i < 0 || arguments.length <= i ? void 0 : arguments[i];\n                    var value = tokenDescriptor(node);\n                    if (value !== null) {\n                        this.index += 1;\n                        this.lastValue = value;\n                        return value;\n                    }\n                }\n                return null;\n            };\n            _proto.matches = function matches() {\n                return this[SYMBOL_MATCH].apply(this, arguments) !== null;\n            };\n            _proto.expect = function expect() {\n                var value = this[SYMBOL_MATCH].apply(this, arguments);\n                return value !== null ? value : this[\"throw\"]();\n            };\n            _proto.matchesFunction = function matchesFunction() {\n                var node = this.nodes[this.index];\n                if (node.type !== \"function\") return null;\n                var value = new TokenStream2(node.nodes, node);\n                this.index += 1;\n                this.lastValue = null;\n                return value;\n            };\n            _proto.expectFunction = function expectFunction() {\n                var value = this.matchesFunction();\n                return value !== null ? value : this[\"throw\"]();\n            };\n            _proto.expectEmpty = function expectEmpty() {\n                if (this.hasTokens()) this[\"throw\"]();\n            };\n            _proto[\"throw\"] = function _throw() {\n                throw new Error(\"Unexpected token type: \" + this.nodes[this.index].type);\n            };\n            _proto.saveRewindPoint = function saveRewindPoint() {\n                this.rewindIndex = this.index;\n            };\n            _proto.rewind = function rewind() {\n                if (this.rewindIndex === -1) throw new Error(\"Internal error\");\n                this.index = this.rewindIndex;\n                this.lastValue = null;\n            };\n            return TokenStream2;\n        }();\n        var numberOrLengthRe = /^([+-]?(?:\\d*\\.)?\\d+(?:e[+-]?\\d+)?)(?:px)?$/i;\n        var numberOnlyRe = /^[+-]?(?:\\d*\\.\\d*|[1-9]\\d*)(?:e[+-]?\\d+)?$/i;\n        var boolRe = /^true|false$/i;\n        var nullRe = /^null$/i;\n        var undefinedRe = /^undefined$/i;\n        var transformRawValue = function transformRawValue2(propName, value) {\n            if (true) {\n                var needsUnit = !devPropertiesWithUnitsRegExp.test(propName);\n                var isNumberWithoutUnit = numberOnlyRe.test(value);\n                if (needsUnit && isNumberWithoutUnit) {\n                    console.warn('Expected style \"' + propName + \": \" + value + '\" to contain units');\n                }\n                if (!needsUnit && value !== \"0\" && !isNumberWithoutUnit) {\n                    console.warn('Expected style \"' + propName + \": \" + value + '\" to be unitless');\n                }\n            }\n            var numberMatch = value.match(numberOrLengthRe);\n            if (numberMatch !== null) return Number(numberMatch[1]);\n            var boolMatch = value.match(boolRe);\n            if (boolMatch !== null) return boolMatch[0].toLowerCase() === \"true\";\n            var nullMatch = value.match(nullRe);\n            if (nullMatch !== null) return null;\n            var undefinedMatch = value.match(undefinedRe);\n            if (undefinedMatch !== null) return void 0;\n            return value;\n        };\n        var baseTransformShorthandValue = function baseTransformShorthandValue2(propName, value) {\n            var ast = parse__default(value);\n            var tokenStream = new TokenStream(ast.nodes);\n            return transforms[propName](tokenStream);\n        };\n        var transformShorthandValue =  false ? 0 : function(propName, value) {\n            try {\n                return baseTransformShorthandValue(propName, value);\n            } catch (e) {\n                throw new Error('Failed to parse declaration \"' + propName + \": \" + value + '\"');\n            }\n        };\n        var getStylesForProperty = function getStylesForProperty2(propName, inputValue, allowShorthand) {\n            var _ref6;\n            var isRawValue = allowShorthand === false || !(propName in transforms);\n            var value = inputValue.trim();\n            var propValues = isRawValue ? (_ref6 = {}, _ref6[propName] = transformRawValue(propName, value), _ref6) : transformShorthandValue(propName, value);\n            return propValues;\n        };\n        var getPropertyName = function getPropertyName2(propName) {\n            var isCustomProp = /^--\\w+/.test(propName);\n            if (isCustomProp) {\n                return propName;\n            }\n            return camelizeStyleName(propName);\n        };\n        var index = function index2(rules, shorthandBlacklist) {\n            if (shorthandBlacklist === void 0) {\n                shorthandBlacklist = [];\n            }\n            return rules.reduce(function(accum, rule) {\n                var propertyName = getPropertyName(rule[0]);\n                var value = rule[1];\n                var allowShorthand = shorthandBlacklist.indexOf(propertyName) === -1;\n                return Object.assign(accum, getStylesForProperty(propertyName, value, allowShorthand));\n            }, {});\n        };\n        exports2[\"default\"] = index;\n        exports2.getPropertyName = getPropertyName;\n        exports2.getStylesForProperty = getStylesForProperty;\n        exports2.transformRawValue = transformRawValue;\n    }\n});\n// node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\nvar require_css_background_parser = __commonJS({\n    \"node_modules/.pnpm/css-background-parser@0.1.0/node_modules/css-background-parser/index.js\" (exports2, module) {\n        (function(exports3) {\n            function BackgroundList(backgrounds) {\n                if (!(this instanceof BackgroundList)) {\n                    return new BackgroundList();\n                }\n                this.backgrounds = backgrounds || [];\n            }\n            BackgroundList.prototype.toString = function() {\n                return this.backgrounds.join(\", \");\n            };\n            function Background(props) {\n                if (!(this instanceof Background)) {\n                    return new Background(props);\n                }\n                props = props || {};\n                var bg = this;\n                function defprop(name, defaultValue) {\n                    bg[name] = name in props ? props[name] : defaultValue;\n                }\n                defprop(\"color\", \"\");\n                defprop(\"image\", \"none\");\n                defprop(\"attachment\", \"scroll\");\n                defprop(\"clip\", \"border-box\");\n                defprop(\"origin\", \"padding-box\");\n                defprop(\"position\", \"0% 0%\");\n                defprop(\"repeat\", \"repeat\");\n                defprop(\"size\", \"auto\");\n            }\n            Background.prototype.toString = function() {\n                var list = [\n                    this.image,\n                    this.repeat,\n                    this.attachment,\n                    this.position + \" / \" + this.size,\n                    this.origin,\n                    this.clip\n                ];\n                if (this.color) {\n                    list.unshift(this.color);\n                }\n                return list.join(\" \");\n            };\n            exports3.BackgroundList = BackgroundList;\n            exports3.Background = Background;\n            function parseImages(cssText) {\n                var images = [];\n                var tokens = /[,\\(\\)]/;\n                var parens = 0;\n                var buffer = \"\";\n                if (cssText == null) {\n                    return images;\n                }\n                while(cssText.length){\n                    var match = tokens.exec(cssText);\n                    if (!match) {\n                        break;\n                    }\n                    var char = match[0];\n                    var ignoreChar = false;\n                    switch(char){\n                        case \",\":\n                            if (!parens) {\n                                images.push(buffer.trim());\n                                buffer = \"\";\n                                ignoreChar = true;\n                            }\n                            break;\n                        case \"(\":\n                            parens++;\n                            break;\n                        case \")\":\n                            parens--;\n                            break;\n                    }\n                    var index = match.index + 1;\n                    buffer += cssText.slice(0, ignoreChar ? index - 1 : index);\n                    cssText = cssText.slice(index);\n                }\n                if (buffer.length || cssText.length) {\n                    images.push((buffer + cssText).trim());\n                }\n                return images;\n            }\n            function trim(str) {\n                return str.trim();\n            }\n            function parseSimpleList(cssText) {\n                return (cssText || \"\").split(\",\").map(trim);\n            }\n            exports3.parseElementStyle = function(styleObject) {\n                var list = new BackgroundList();\n                if (styleObject == null) {\n                    return list;\n                }\n                var bgImage = parseImages(styleObject.backgroundImage);\n                var bgColor = styleObject.backgroundColor;\n                var bgAttachment = parseSimpleList(styleObject.backgroundAttachment);\n                var bgClip = parseSimpleList(styleObject.backgroundClip);\n                var bgOrigin = parseSimpleList(styleObject.backgroundOrigin);\n                var bgPosition = parseSimpleList(styleObject.backgroundPosition);\n                var bgRepeat = parseSimpleList(styleObject.backgroundRepeat);\n                var bgSize = parseSimpleList(styleObject.backgroundSize);\n                var background;\n                for(var i = 0, ii2 = bgImage.length; i < ii2; i++){\n                    background = new Background({\n                        image: bgImage[i],\n                        attachment: bgAttachment[i % bgAttachment.length],\n                        clip: bgClip[i % bgClip.length],\n                        origin: bgOrigin[i % bgOrigin.length],\n                        position: bgPosition[i % bgPosition.length],\n                        repeat: bgRepeat[i % bgRepeat.length],\n                        size: bgSize[i % bgSize.length]\n                    });\n                    if (i === ii2 - 1) {\n                        background.color = bgColor;\n                    }\n                    list.backgrounds.push(background);\n                }\n                return list;\n            };\n        })(function(root) {\n            if (typeof module !== \"undefined\" && module.exports !== void 0) return module.exports;\n            return root.cssBgParser = {};\n        }(exports2));\n    }\n});\n// node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\nvar require_css_box_shadow = __commonJS({\n    \"node_modules/.pnpm/css-box-shadow@1.0.0-3/node_modules/css-box-shadow/index.js\" (exports2, module) {\n        var VALUES_REG = /,(?![^\\(]*\\))/;\n        var PARTS_REG = /\\s(?![^(]*\\))/;\n        var LENGTH_REG = /^[0-9]+[a-zA-Z%]+?$/;\n        var parseValue = (str)=>{\n            const parts = str.split(PARTS_REG);\n            const inset = parts.includes(\"inset\");\n            const last = parts.slice(-1)[0];\n            const color = !isLength(last) ? last : void 0;\n            const nums = parts.filter((n)=>n !== \"inset\").filter((n)=>n !== color).map(toNum);\n            const [offsetX, offsetY, blurRadius, spreadRadius] = nums;\n            return {\n                inset,\n                offsetX,\n                offsetY,\n                blurRadius,\n                spreadRadius,\n                color\n            };\n        };\n        var stringifyValue = (obj)=>{\n            const { inset , offsetX =0 , offsetY =0 , blurRadius =0 , spreadRadius , color  } = obj || {};\n            return [\n                inset ? \"inset\" : null,\n                offsetX,\n                offsetY,\n                blurRadius,\n                spreadRadius,\n                color\n            ].filter((v)=>v !== null && v !== void 0).map(toPx).map((s)=>(\"\" + s).trim()).join(\" \");\n        };\n        var isLength = (v)=>v === \"0\" || LENGTH_REG.test(v);\n        var toNum = (v)=>{\n            if (!/px$/.test(v) && v !== \"0\") return v;\n            const n = parseFloat(v);\n            return !isNaN(n) ? n : v;\n        };\n        var toPx = (n)=>typeof n === \"number\" && n !== 0 ? n + \"px\" : n;\n        var parse2 = (str)=>str.split(VALUES_REG).map((s)=>s.trim()).map(parseValue);\n        var stringify = (arr)=>arr.map(stringifyValue).join(\", \");\n        module.exports = {\n            parse: parse2,\n            stringify\n        };\n    }\n});\n// node_modules/.pnpm/linebreak@1.1.0/node_modules/linebreak/dist/module.mjs\nvar import_unicode_trie = __toESM(require_unicode_trie(), 1);\nvar import_base64_js = __toESM(require_b64(), 1);\nvar $557adaaeb0c7885f$exports = {};\nvar $1627905f8be2ef3f$export$fb4028874a74450 = 5;\nvar $1627905f8be2ef3f$export$1bb1140fe1358b00 = 12;\nvar $1627905f8be2ef3f$export$f3e416a182673355 = 13;\nvar $1627905f8be2ef3f$export$24aa617c849a894a = 16;\nvar $1627905f8be2ef3f$export$a73c4d14459b698d = 17;\nvar $1627905f8be2ef3f$export$9e5d732f3676a9ba = 22;\nvar $1627905f8be2ef3f$export$1dff41d5c0caca01 = 28;\nvar $1627905f8be2ef3f$export$30a74a373318dec6 = 31;\nvar $1627905f8be2ef3f$export$d710c5f50fc7496a = 33;\nvar $1627905f8be2ef3f$export$66498d28055820a9 = 34;\nvar $1627905f8be2ef3f$export$eb6c6d0b7c8826f2 = 35;\nvar $1627905f8be2ef3f$export$de92be486109a1df = 36;\nvar $1627905f8be2ef3f$export$606cfc2a8896c91f = 37;\nvar $1627905f8be2ef3f$export$e51d3c675bb0140d = 38;\nvar $1627905f8be2ef3f$export$da51c6332ad11d7b = 39;\nvar $1627905f8be2ef3f$export$bea437c40441867d = 40;\nvar $1627905f8be2ef3f$export$c4c7eecbfed13dc9 = 41;\nvar $1627905f8be2ef3f$export$98e1f8a379849661 = 42;\nvar $32627af916ac1b00$export$98f50d781a474745 = 0;\nvar $32627af916ac1b00$export$12ee1f8f5315ca7e = 1;\nvar $32627af916ac1b00$export$e4965ce242860454 = 2;\nvar $32627af916ac1b00$export$8f14048969dcd45e = 3;\nvar $32627af916ac1b00$export$133eb141bf58aff4 = 4;\nvar $32627af916ac1b00$export$5bdb8ccbf5c57afc = [\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$8f14048969dcd45e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ],\n    [\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$e4965ce242860454,\n        $32627af916ac1b00$export$133eb141bf58aff4,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$98f50d781a474745,\n        $32627af916ac1b00$export$12ee1f8f5315ca7e,\n        $32627af916ac1b00$export$98f50d781a474745\n    ]\n];\nvar $557adaaeb0c7885f$var$data = import_base64_js.default.toByteArray(\"AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/\");\nvar $557adaaeb0c7885f$var$classTrie = new import_unicode_trie.default($557adaaeb0c7885f$var$data);\nvar $557adaaeb0c7885f$var$mapClass = function(c2) {\n    switch(c2){\n        case $1627905f8be2ef3f$export$d710c5f50fc7496a:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$da51c6332ad11d7b:\n        case $1627905f8be2ef3f$export$bea437c40441867d:\n        case $1627905f8be2ef3f$export$98e1f8a379849661:\n            return $1627905f8be2ef3f$export$1bb1140fe1358b00;\n        case $1627905f8be2ef3f$export$eb6c6d0b7c8826f2:\n            return $1627905f8be2ef3f$export$fb4028874a74450;\n        default:\n            return c2;\n    }\n};\nvar $557adaaeb0c7885f$var$mapFirst = function(c2) {\n    switch(c2){\n        case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n        case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n            return $1627905f8be2ef3f$export$66498d28055820a9;\n        case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n            return $1627905f8be2ef3f$export$9e5d732f3676a9ba;\n        default:\n            return c2;\n    }\n};\nvar $557adaaeb0c7885f$var$Break = class {\n    constructor(position, required = false){\n        this.position = position;\n        this.required = required;\n    }\n};\nvar $557adaaeb0c7885f$var$LineBreaker = class {\n    nextCodePoint() {\n        const code = this.string.charCodeAt(this.pos++);\n        const next = this.string.charCodeAt(this.pos);\n        if (55296 <= code && code <= 56319 && 56320 <= next && next <= 57343) {\n            this.pos++;\n            return (code - 55296) * 1024 + (next - 56320) + 65536;\n        }\n        return code;\n    }\n    nextCharClass() {\n        return $557adaaeb0c7885f$var$mapClass($557adaaeb0c7885f$var$classTrie.get(this.nextCodePoint()));\n    }\n    getSimpleBreak() {\n        switch(this.nextClass){\n            case $1627905f8be2ef3f$export$c4c7eecbfed13dc9:\n                return false;\n            case $1627905f8be2ef3f$export$66498d28055820a9:\n            case $1627905f8be2ef3f$export$606cfc2a8896c91f:\n            case $1627905f8be2ef3f$export$e51d3c675bb0140d:\n                this.curClass = $1627905f8be2ef3f$export$66498d28055820a9;\n                return false;\n            case $1627905f8be2ef3f$export$de92be486109a1df:\n                this.curClass = $1627905f8be2ef3f$export$de92be486109a1df;\n                return false;\n        }\n        return null;\n    }\n    getPairTableBreak(lastClass) {\n        let shouldBreak = false;\n        switch($32627af916ac1b00$export$5bdb8ccbf5c57afc[this.curClass][this.nextClass]){\n            case $32627af916ac1b00$export$98f50d781a474745:\n                shouldBreak = true;\n                break;\n            case $32627af916ac1b00$export$12ee1f8f5315ca7e:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                break;\n            case $32627af916ac1b00$export$e4965ce242860454:\n                shouldBreak = lastClass === $1627905f8be2ef3f$export$c4c7eecbfed13dc9;\n                if (!shouldBreak) {\n                    shouldBreak = false;\n                    return shouldBreak;\n                }\n                break;\n            case $32627af916ac1b00$export$8f14048969dcd45e:\n                if (lastClass !== $1627905f8be2ef3f$export$c4c7eecbfed13dc9) return shouldBreak;\n                break;\n            case $32627af916ac1b00$export$133eb141bf58aff4:\n                break;\n        }\n        if (this.LB8a) shouldBreak = false;\n        if (this.LB21a && (this.curClass === $1627905f8be2ef3f$export$24aa617c849a894a || this.curClass === $1627905f8be2ef3f$export$a73c4d14459b698d)) {\n            shouldBreak = false;\n            this.LB21a = false;\n        } else this.LB21a = this.curClass === $1627905f8be2ef3f$export$f3e416a182673355;\n        if (this.curClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n            this.LB30a++;\n            if (this.LB30a == 2 && this.nextClass === $1627905f8be2ef3f$export$1dff41d5c0caca01) {\n                shouldBreak = true;\n                this.LB30a = 0;\n            }\n        } else this.LB30a = 0;\n        this.curClass = this.nextClass;\n        return shouldBreak;\n    }\n    nextBreak() {\n        if (this.curClass == null) {\n            let firstClass = this.nextCharClass();\n            this.curClass = $557adaaeb0c7885f$var$mapFirst(firstClass);\n            this.nextClass = firstClass;\n            this.LB8a = firstClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            this.LB30a = 0;\n        }\n        while(this.pos < this.string.length){\n            this.lastPos = this.pos;\n            const lastClass = this.nextClass;\n            this.nextClass = this.nextCharClass();\n            if (this.curClass === $1627905f8be2ef3f$export$66498d28055820a9 || this.curClass === $1627905f8be2ef3f$export$de92be486109a1df && this.nextClass !== $1627905f8be2ef3f$export$606cfc2a8896c91f) {\n                this.curClass = $557adaaeb0c7885f$var$mapFirst($557adaaeb0c7885f$var$mapClass(this.nextClass));\n                return new $557adaaeb0c7885f$var$Break(this.lastPos, true);\n            }\n            let shouldBreak = this.getSimpleBreak();\n            if (shouldBreak === null) shouldBreak = this.getPairTableBreak(lastClass);\n            this.LB8a = this.nextClass === $1627905f8be2ef3f$export$30a74a373318dec6;\n            if (shouldBreak) return new $557adaaeb0c7885f$var$Break(this.lastPos);\n        }\n        if (this.lastPos < this.string.length) {\n            this.lastPos = this.string.length;\n            return new $557adaaeb0c7885f$var$Break(this.string.length);\n        }\n        return null;\n    }\n    constructor(string){\n        this.string = string;\n        this.pos = 0;\n        this.lastPos = 0;\n        this.curClass = null;\n        this.nextClass = null;\n        this.LB8a = false;\n        this.LB21a = false;\n        this.LB30a = 0;\n    }\n};\n$557adaaeb0c7885f$exports = $557adaaeb0c7885f$var$LineBreaker;\n// node_modules/.pnpm/satori@0.4.4/node_modules/satori/dist/index.wasm.js\nvar import_css_to_react_native = __toESM(require_css_to_react_native(), 1);\nvar import_css_background_parser = __toESM(require_css_background_parser(), 1);\nvar import_css_box_shadow = __toESM(require_css_box_shadow(), 1);\nvar import_postcss_value_parser = __toESM(require_lib(), 1);\n// node_modules/.pnpm/emoji-regex@10.2.1/node_modules/emoji-regex/index.mjs\nvar emoji_regex_default = ()=>{\n    return /[#*0-9]\\uFE0F?\\u20E3|[\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23ED-\\u23EF\\u23F1\\u23F2\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB\\u25FC\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u265F\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267E\\u267F\\u2692\\u2694-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A7\\u26AA\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C8\\u26CF\\u26D1\\u26D3\\u26E9\\u26F0-\\u26F5\\u26F7\\u26F8\\u26FA\\u2702\\u2708\\u2709\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2733\\u2734\\u2744\\u2747\\u2757\\u2763\\u27A1\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B55\\u3030\\u303D\\u3297\\u3299]\\uFE0F?|[\\u261D\\u270C\\u270D](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\u270A\\u270B](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u2693\\u26A1\\u26AB\\u26C5\\u26CE\\u26D4\\u26EA\\u26FD\\u2705\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2795-\\u2797\\u27B0\\u27BF\\u2B50]|\\u26F9(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\u2764\\uFE0F?(?:\\u200D(?:\\uD83D\\uDD25|\\uD83E\\uDE79))?|\\uD83C(?:[\\uDC04\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDE02\\uDE37\\uDF21\\uDF24-\\uDF2C\\uDF36\\uDF7D\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E\\uDF9F\\uDFCD\\uDFCE\\uDFD4-\\uDFDF\\uDFF5\\uDFF7]\\uFE0F?|[\\uDF85\\uDFC2\\uDFC7](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDFC3\\uDFC4\\uDFCA](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDFCB\\uDFCC](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF84\\uDF86-\\uDF93\\uDFA0-\\uDFC1\\uDFC5\\uDFC6\\uDFC8\\uDFC9\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF8-\\uDFFF]|\\uDDE6\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF]|\\uDDE7\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF]|\\uDDE8\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF]|\\uDDE9\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF]|\\uDDEA\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA]|\\uDDEB\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7]|\\uDDEC\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE]|\\uDDED\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA]|\\uDDEE\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9]|\\uDDEF\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5]|\\uDDF0\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF]|\\uDDF1\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE]|\\uDDF2\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF]|\\uDDF3\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF]|\\uDDF4\\uD83C\\uDDF2|\\uDDF5\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE]|\\uDDF6\\uD83C\\uDDE6|\\uDDF7\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC]|\\uDDF8\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF]|\\uDDF9\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF]|\\uDDFA\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF]|\\uDDFB\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA]|\\uDDFC\\uD83C[\\uDDEB\\uDDF8]|\\uDDFD\\uD83C\\uDDF0|\\uDDFE\\uD83C[\\uDDEA\\uDDF9]|\\uDDFF\\uD83C[\\uDDE6\\uDDF2\\uDDFC]|\\uDFF3\\uFE0F?(?:\\u200D(?:\\u26A7\\uFE0F?|\\uD83C\\uDF08))?|\\uDFF4(?:\\u200D\\u2620\\uFE0F?|\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40(?:\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67|\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73)\\uDB40\\uDC7F)?)|\\uD83D(?:[\\uDC08\\uDC26](?:\\u200D\\u2B1B)?|[\\uDC3F\\uDCFD\\uDD49\\uDD4A\\uDD6F\\uDD70\\uDD73\\uDD76-\\uDD79\\uDD87\\uDD8A-\\uDD8D\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA\\uDECB\\uDECD-\\uDECF\\uDEE0-\\uDEE5\\uDEE9\\uDEF0\\uDEF3]\\uFE0F?|[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC6B-\\uDC6D\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDC8F\\uDC91\\uDCAA\\uDD7A\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC6E\\uDC70\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD74\\uDD90](?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDC00-\\uDC07\\uDC09-\\uDC14\\uDC16-\\uDC25\\uDC27-\\uDC3A\\uDC3C-\\uDC3E\\uDC40\\uDC44\\uDC45\\uDC51-\\uDC65\\uDC6A\\uDC79-\\uDC7B\\uDC7D-\\uDC80\\uDC84\\uDC88-\\uDC8E\\uDC90\\uDC92-\\uDCA9\\uDCAB-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDDA4\\uDDFB-\\uDE2D\\uDE2F-\\uDE34\\uDE37-\\uDE44\\uDE48-\\uDE4A\\uDE80-\\uDEA2\\uDEA4-\\uDEB3\\uDEB7-\\uDEBF\\uDEC1-\\uDEC5\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEDC-\\uDEDF\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB\\uDFF0]|\\uDC15(?:\\u200D\\uD83E\\uDDBA)?|\\uDC3B(?:\\u200D\\u2744\\uFE0F?)?|\\uDC41\\uFE0F?(?:\\u200D\\uD83D\\uDDE8\\uFE0F?)?|\\uDC68(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDC68\\uDC69]\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?)|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?\\uDC68\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D\\uDC68\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC69(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:\\uDC8B\\u200D\\uD83D)?[\\uDC68\\uDC69]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D(?:[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?|\\uDC69\\u200D\\uD83D(?:\\uDC66(?:\\u200D\\uD83D\\uDC66)?|\\uDC67(?:\\u200D\\uD83D[\\uDC66\\uDC67])?))|\\uD83E[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD])|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFC-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D\\uD83D(?:[\\uDC68\\uDC69]|\\uDC8B\\u200D\\uD83D[\\uDC68\\uDC69])\\uD83C[\\uDFFB-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83D[\\uDC68\\uDC69]\\uD83C[\\uDFFB-\\uDFFE])))?))?|\\uDC6F(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDD75(?:\\uFE0F|\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|\\uDE2E(?:\\u200D\\uD83D\\uDCA8)?|\\uDE35(?:\\u200D\\uD83D\\uDCAB)?|\\uDE36(?:\\u200D\\uD83C\\uDF2B\\uFE0F?)?)|\\uD83E(?:[\\uDD0C\\uDD0F\\uDD18-\\uDD1F\\uDD30-\\uDD34\\uDD36\\uDD77\\uDDB5\\uDDB6\\uDDBB\\uDDD2\\uDDD3\\uDDD5\\uDEC3-\\uDEC5\\uDEF0\\uDEF2-\\uDEF8](?:\\uD83C[\\uDFFB-\\uDFFF])?|[\\uDD26\\uDD35\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDB8\\uDDB9\\uDDCD-\\uDDCF\\uDDD4\\uDDD6-\\uDDDD](?:\\uD83C[\\uDFFB-\\uDFFF])?(?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDDDE\\uDDDF](?:\\u200D[\\u2640\\u2642]\\uFE0F?)?|[\\uDD0D\\uDD0E\\uDD10-\\uDD17\\uDD20-\\uDD25\\uDD27-\\uDD2F\\uDD3A\\uDD3F-\\uDD45\\uDD47-\\uDD76\\uDD78-\\uDDB4\\uDDB7\\uDDBA\\uDDBC-\\uDDCC\\uDDD0\\uDDE0-\\uDDFF\\uDE70-\\uDE7C\\uDE80-\\uDE88\\uDE90-\\uDEBD\\uDEBF-\\uDEC2\\uDECE-\\uDEDB\\uDEE0-\\uDEE8]|\\uDD3C(?:\\u200D[\\u2640\\u2642]\\uFE0F?|\\uD83C[\\uDFFB-\\uDFFF])?|\\uDDD1(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1))|\\uD83C(?:\\uDFFB(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFC-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFC(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFD-\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFD(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFE(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFD\\uDFFF]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?|\\uDFFF(?:\\u200D(?:[\\u2695\\u2696\\u2708]\\uFE0F?|\\u2764\\uFE0F?\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFE]|\\uD83C[\\uDF3E\\uDF73\\uDF7C\\uDF84\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\uD83E(?:[\\uDDAF-\\uDDB3\\uDDBC\\uDDBD]|\\uDD1D\\u200D\\uD83E\\uDDD1\\uD83C[\\uDFFB-\\uDFFF])))?))?|\\uDEF1(?:\\uD83C(?:\\uDFFB(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFC-\\uDFFF])?|\\uDFFC(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFD-\\uDFFF])?|\\uDFFD(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB\\uDFFC\\uDFFE\\uDFFF])?|\\uDFFE(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFD\\uDFFF])?|\\uDFFF(?:\\u200D\\uD83E\\uDEF2\\uD83C[\\uDFFB-\\uDFFE])?))?)/g;\n};\n// node_modules/.pnpm/@shuding+opentype.js@1.4.0-beta.0/node_modules/@shuding/opentype.js/dist/opentype.module.js\nvar u8 = Uint8Array;\nvar u16 = Uint16Array;\nvar u32 = Uint32Array;\nvar fleb = new u8([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    0,\n    0,\n    0\n]);\nvar fdeb = new u8([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    0,\n    0\n]);\nvar clim = new u8([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\nvar freb = function(eb, start) {\n    var b = new u16(31);\n    for(var i = 0; i < 31; ++i){\n        b[i] = start += 1 << eb[i - 1];\n    }\n    var r = new u32(b[30]);\n    for(var i = 1; i < 30; ++i){\n        for(var j2 = b[i]; j2 < b[i + 1]; ++j2){\n            r[j2] = j2 - b[i] << 5 | i;\n        }\n    }\n    return [\n        b,\n        r\n    ];\n};\nvar _a = freb(fleb, 2);\nvar fl = _a[0];\nvar revfl = _a[1];\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0);\nvar fd = _b[0];\nvar rev = new u16(32768);\nfor(i = 0; i < 32768; ++i){\n    x = (i & 43690) >>> 1 | (i & 21845) << 1;\n    x = (x & 52428) >>> 2 | (x & 13107) << 2;\n    x = (x & 61680) >>> 4 | (x & 3855) << 4;\n    rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;\n}\nvar x;\nvar i;\nvar hMap = function(cd, mb, r) {\n    var s = cd.length;\n    var i = 0;\n    var l = new u16(mb);\n    for(; i < s; ++i){\n        if (cd[i]) {\n            ++l[cd[i] - 1];\n        }\n    }\n    var le = new u16(mb);\n    for(i = 0; i < mb; ++i){\n        le[i] = le[i - 1] + l[i - 1] << 1;\n    }\n    var co2;\n    if (r) {\n        co2 = new u16(1 << mb);\n        var rvb = 15 - mb;\n        for(i = 0; i < s; ++i){\n            if (cd[i]) {\n                var sv = i << 4 | cd[i];\n                var r_1 = mb - cd[i];\n                var v = le[cd[i] - 1]++ << r_1;\n                for(var m2 = v | (1 << r_1) - 1; v <= m2; ++v){\n                    co2[rev[v] >>> rvb] = sv;\n                }\n            }\n        }\n    } else {\n        co2 = new u16(s);\n        for(i = 0; i < s; ++i){\n            if (cd[i]) {\n                co2[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n            }\n        }\n    }\n    return co2;\n};\nvar flt = new u8(288);\nfor(i = 0; i < 144; ++i){\n    flt[i] = 8;\n}\nvar i;\nfor(i = 144; i < 256; ++i){\n    flt[i] = 9;\n}\nvar i;\nfor(i = 256; i < 280; ++i){\n    flt[i] = 7;\n}\nvar i;\nfor(i = 280; i < 288; ++i){\n    flt[i] = 8;\n}\nvar i;\nvar fdt = new u8(32);\nfor(i = 0; i < 32; ++i){\n    fdt[i] = 5;\n}\nvar i;\nvar flrm = /* @__PURE__ */ hMap(flt, 9, 1);\nvar fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);\nvar max = function(a) {\n    var m2 = a[0];\n    for(var i = 1; i < a.length; ++i){\n        if (a[i] > m2) {\n            m2 = a[i];\n        }\n    }\n    return m2;\n};\nvar bits = function(d, p, m2) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8) >> (p & 7) & m2;\n};\nvar bits16 = function(d, p) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\nvar shft = function(p) {\n    return (p + 7) / 8 | 0;\n};\nvar slc = function(v, s, e) {\n    if (s == null || s < 0) {\n        s = 0;\n    }\n    if (e == null || e > v.length) {\n        e = v.length;\n    }\n    var n = new (v.BYTES_PER_ELEMENT == 2 ? u16 : v.BYTES_PER_ELEMENT == 4 ? u32 : u8)(e - s);\n    n.set(v.subarray(s, e));\n    return n;\n};\nvar ec = [\n    \"unexpected EOF\",\n    \"invalid block type\",\n    \"invalid length/literal\",\n    \"invalid distance\",\n    \"stream finished\",\n    \"no stream handler\",\n    ,\n    \"no callback\",\n    \"invalid UTF-8 data\",\n    \"extra field too long\",\n    \"date not in range 1980-2099\",\n    \"filename too long\",\n    \"stream finishing\",\n    \"invalid zip data\"\n];\nvar err = function(ind, msg, nt2) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(e, err);\n    }\n    if (!nt2) {\n        throw e;\n    }\n    return e;\n};\nvar inflt = function(dat, buf, st) {\n    var sl2 = dat.length;\n    if (!sl2 || st && st.f && !st.l) {\n        return buf || new u8(0);\n    }\n    var noBuf = !buf || st;\n    var noSt = !st || st.i;\n    if (!st) {\n        st = {};\n    }\n    if (!buf) {\n        buf = new u8(sl2 * 3);\n    }\n    var cbuf = function(l2) {\n        var bl2 = buf.length;\n        if (l2 > bl2) {\n            var nbuf = new u8(Math.max(bl2 * 2, l2));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    var final = st.f || 0, pos = st.p || 0, bt2 = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    var tbts = sl2 * 8;\n    do {\n        if (!lm) {\n            final = bits(dat, pos, 1);\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n                if (t > sl2) {\n                    if (noSt) {\n                        err(0);\n                    }\n                    break;\n                }\n                if (noBuf) {\n                    cbuf(bt2 + l);\n                }\n                buf.set(dat.subarray(s, t), bt2);\n                st.b = bt2 += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            } else if (type == 1) {\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            } else if (type == 2) {\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl2 = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                var ldt = new u8(tl2);\n                var clt = new u8(19);\n                for(var i = 0; i < hcLen; ++i){\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                var clm = hMap(clt, clb, 1);\n                for(var i = 0; i < tl2;){\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    pos += r & 15;\n                    var s = r >>> 4;\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    } else {\n                        var c2 = 0, n = 0;\n                        if (s == 16) {\n                            n = 3 + bits(dat, pos, 3), pos += 2, c2 = ldt[i - 1];\n                        } else if (s == 17) {\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        } else if (s == 18) {\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        }\n                        while(n--){\n                            ldt[i++] = c2;\n                        }\n                    }\n                }\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                lbt = max(lt);\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            } else {\n                err(1);\n            }\n            if (pos > tbts) {\n                if (noSt) {\n                    err(0);\n                }\n                break;\n            }\n        }\n        if (noBuf) {\n            cbuf(bt2 + 131072);\n        }\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for(;; lpos = pos){\n            var c2 = lm[bits16(dat, pos) & lms], sym = c2 >>> 4;\n            pos += c2 & 15;\n            if (pos > tbts) {\n                if (noSt) {\n                    err(0);\n                }\n                break;\n            }\n            if (!c2) {\n                err(2);\n            }\n            if (sym < 256) {\n                buf[bt2++] = sym;\n            } else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            } else {\n                var add = sym - 254;\n                if (sym > 264) {\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n                if (!d) {\n                    err(3);\n                }\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt) {\n                        err(0);\n                    }\n                    break;\n                }\n                if (noBuf) {\n                    cbuf(bt2 + 131072);\n                }\n                var end = bt2 + add;\n                for(; bt2 < end; bt2 += 4){\n                    buf[bt2] = buf[bt2 - dt];\n                    buf[bt2 + 1] = buf[bt2 + 1 - dt];\n                    buf[bt2 + 2] = buf[bt2 + 2 - dt];\n                    buf[bt2 + 3] = buf[bt2 + 3 - dt];\n                }\n                bt2 = end;\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt2, st.f = final;\n        if (lm) {\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n        }\n    }while (!final);\n    return bt2 == buf.length ? buf : slc(buf, 0, bt2);\n};\nvar et = /* @__PURE__ */ new u8(0);\nfunction inflateSync(data, out) {\n    return inflt(data, out);\n}\nvar td = typeof TextDecoder != \"undefined\" && /* @__PURE__ */ new TextDecoder();\nvar tds = 0;\ntry {\n    td.decode(et, {\n        stream: true\n    });\n    tds = 1;\n} catch (e) {}\nfunction Path() {\n    this.commands = [];\n    this.fill = \"black\";\n    this.stroke = null;\n    this.strokeWidth = 1;\n}\nPath.prototype.moveTo = function(x, y) {\n    this.commands.push({\n        type: \"M\",\n        x,\n        y\n    });\n};\nPath.prototype.lineTo = function(x, y) {\n    this.commands.push({\n        type: \"L\",\n        x,\n        y\n    });\n};\nPath.prototype.curveTo = Path.prototype.bezierCurveTo = function(x1, y1, x2, y2, x, y) {\n    this.commands.push({\n        type: \"C\",\n        x1,\n        y1,\n        x2,\n        y2,\n        x,\n        y\n    });\n};\nPath.prototype.quadTo = Path.prototype.quadraticCurveTo = function(x1, y1, x, y) {\n    this.commands.push({\n        type: \"Q\",\n        x1,\n        y1,\n        x,\n        y\n    });\n};\nPath.prototype.close = Path.prototype.closePath = function() {\n    this.commands.push({\n        type: \"Z\"\n    });\n};\nPath.prototype.extend = function(pathOrCommands) {\n    if (pathOrCommands.commands) {\n        pathOrCommands = pathOrCommands.commands;\n    }\n    Array.prototype.push.apply(this.commands, pathOrCommands);\n};\nPath.prototype.toPathData = function(decimalPlaces) {\n    decimalPlaces = decimalPlaces !== void 0 ? decimalPlaces : 2;\n    function floatToString(v) {\n        if (Math.round(v) === v) {\n            return \"\" + Math.round(v);\n        } else {\n            return v.toFixed(decimalPlaces);\n        }\n    }\n    function packValues() {\n        var arguments$1 = arguments;\n        var s = \"\";\n        for(var i2 = 0; i2 < arguments.length; i2 += 1){\n            var v = arguments$1[i2];\n            if (v >= 0 && i2 > 0) {\n                s += \" \";\n            }\n            s += floatToString(v);\n        }\n        return s;\n    }\n    var d = \"\";\n    for(var i = 0; i < this.commands.length; i += 1){\n        var cmd = this.commands[i];\n        if (cmd.type === \"M\") {\n            d += \"M\" + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === \"L\") {\n            d += \"L\" + packValues(cmd.x, cmd.y);\n        } else if (cmd.type === \"C\") {\n            d += \"C\" + packValues(cmd.x1, cmd.y1, cmd.x2, cmd.y2, cmd.x, cmd.y);\n        } else if (cmd.type === \"Q\") {\n            d += \"Q\" + packValues(cmd.x1, cmd.y1, cmd.x, cmd.y);\n        } else if (cmd.type === \"Z\") {\n            d += \"Z\";\n        }\n    }\n    return d;\n};\nvar cffStandardStrings = [\n    \".notdef\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"questiondown\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"ring\",\n    \"cedilla\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"AE\",\n    \"ordfeminine\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"ae\",\n    \"dotlessi\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\",\n    \"onesuperior\",\n    \"logicalnot\",\n    \"mu\",\n    \"trademark\",\n    \"Eth\",\n    \"onehalf\",\n    \"plusminus\",\n    \"Thorn\",\n    \"onequarter\",\n    \"divide\",\n    \"brokenbar\",\n    \"degree\",\n    \"thorn\",\n    \"threequarters\",\n    \"twosuperior\",\n    \"registered\",\n    \"minus\",\n    \"eth\",\n    \"multiply\",\n    \"threesuperior\",\n    \"copyright\",\n    \"Aacute\",\n    \"Acircumflex\",\n    \"Adieresis\",\n    \"Agrave\",\n    \"Aring\",\n    \"Atilde\",\n    \"Ccedilla\",\n    \"Eacute\",\n    \"Ecircumflex\",\n    \"Edieresis\",\n    \"Egrave\",\n    \"Iacute\",\n    \"Icircumflex\",\n    \"Idieresis\",\n    \"Igrave\",\n    \"Ntilde\",\n    \"Oacute\",\n    \"Ocircumflex\",\n    \"Odieresis\",\n    \"Ograve\",\n    \"Otilde\",\n    \"Scaron\",\n    \"Uacute\",\n    \"Ucircumflex\",\n    \"Udieresis\",\n    \"Ugrave\",\n    \"Yacute\",\n    \"Ydieresis\",\n    \"Zcaron\",\n    \"aacute\",\n    \"acircumflex\",\n    \"adieresis\",\n    \"agrave\",\n    \"aring\",\n    \"atilde\",\n    \"ccedilla\",\n    \"eacute\",\n    \"ecircumflex\",\n    \"edieresis\",\n    \"egrave\",\n    \"iacute\",\n    \"icircumflex\",\n    \"idieresis\",\n    \"igrave\",\n    \"ntilde\",\n    \"oacute\",\n    \"ocircumflex\",\n    \"odieresis\",\n    \"ograve\",\n    \"otilde\",\n    \"scaron\",\n    \"uacute\",\n    \"ucircumflex\",\n    \"udieresis\",\n    \"ugrave\",\n    \"yacute\",\n    \"ydieresis\",\n    \"zcaron\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"266 ff\",\n    \"onedotenleader\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"isuperior\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"ff\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"Dotaccentsmall\",\n    \"Macronsmall\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"zerosuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\",\n    \"001.000\",\n    \"001.001\",\n    \"001.002\",\n    \"001.003\",\n    \"Black\",\n    \"Bold\",\n    \"Book\",\n    \"Light\",\n    \"Medium\",\n    \"Regular\",\n    \"Roman\",\n    \"Semibold\"\n];\nvar cffStandardEncoding = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclam\",\n    \"quotedbl\",\n    \"numbersign\",\n    \"dollar\",\n    \"percent\",\n    \"ampersand\",\n    \"quoteright\",\n    \"parenleft\",\n    \"parenright\",\n    \"asterisk\",\n    \"plus\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"slash\",\n    \"zero\",\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n    \"colon\",\n    \"semicolon\",\n    \"less\",\n    \"equal\",\n    \"greater\",\n    \"question\",\n    \"at\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n    \"bracketleft\",\n    \"backslash\",\n    \"bracketright\",\n    \"asciicircum\",\n    \"underscore\",\n    \"quoteleft\",\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",\n    \"j\",\n    \"k\",\n    \"l\",\n    \"m\",\n    \"n\",\n    \"o\",\n    \"p\",\n    \"q\",\n    \"r\",\n    \"s\",\n    \"t\",\n    \"u\",\n    \"v\",\n    \"w\",\n    \"x\",\n    \"y\",\n    \"z\",\n    \"braceleft\",\n    \"bar\",\n    \"braceright\",\n    \"asciitilde\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdown\",\n    \"cent\",\n    \"sterling\",\n    \"fraction\",\n    \"yen\",\n    \"florin\",\n    \"section\",\n    \"currency\",\n    \"quotesingle\",\n    \"quotedblleft\",\n    \"guillemotleft\",\n    \"guilsinglleft\",\n    \"guilsinglright\",\n    \"fi\",\n    \"fl\",\n    \"\",\n    \"endash\",\n    \"dagger\",\n    \"daggerdbl\",\n    \"periodcentered\",\n    \"\",\n    \"paragraph\",\n    \"bullet\",\n    \"quotesinglbase\",\n    \"quotedblbase\",\n    \"quotedblright\",\n    \"guillemotright\",\n    \"ellipsis\",\n    \"perthousand\",\n    \"\",\n    \"questiondown\",\n    \"\",\n    \"grave\",\n    \"acute\",\n    \"circumflex\",\n    \"tilde\",\n    \"macron\",\n    \"breve\",\n    \"dotaccent\",\n    \"dieresis\",\n    \"\",\n    \"ring\",\n    \"cedilla\",\n    \"\",\n    \"hungarumlaut\",\n    \"ogonek\",\n    \"caron\",\n    \"emdash\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"AE\",\n    \"\",\n    \"ordfeminine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"Lslash\",\n    \"Oslash\",\n    \"OE\",\n    \"ordmasculine\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"ae\",\n    \"\",\n    \"\",\n    \"\",\n    \"dotlessi\",\n    \"\",\n    \"\",\n    \"lslash\",\n    \"oslash\",\n    \"oe\",\n    \"germandbls\"\n];\nvar cffExpertEncoding = [\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"space\",\n    \"exclamsmall\",\n    \"Hungarumlautsmall\",\n    \"\",\n    \"dollaroldstyle\",\n    \"dollarsuperior\",\n    \"ampersandsmall\",\n    \"Acutesmall\",\n    \"parenleftsuperior\",\n    \"parenrightsuperior\",\n    \"twodotenleader\",\n    \"onedotenleader\",\n    \"comma\",\n    \"hyphen\",\n    \"period\",\n    \"fraction\",\n    \"zerooldstyle\",\n    \"oneoldstyle\",\n    \"twooldstyle\",\n    \"threeoldstyle\",\n    \"fouroldstyle\",\n    \"fiveoldstyle\",\n    \"sixoldstyle\",\n    \"sevenoldstyle\",\n    \"eightoldstyle\",\n    \"nineoldstyle\",\n    \"colon\",\n    \"semicolon\",\n    \"commasuperior\",\n    \"threequartersemdash\",\n    \"periodsuperior\",\n    \"questionsmall\",\n    \"\",\n    \"asuperior\",\n    \"bsuperior\",\n    \"centsuperior\",\n    \"dsuperior\",\n    \"esuperior\",\n    \"\",\n    \"\",\n    \"isuperior\",\n    \"\",\n    \"\",\n    \"lsuperior\",\n    \"msuperior\",\n    \"nsuperior\",\n    \"osuperior\",\n    \"\",\n    \"\",\n    \"rsuperior\",\n    \"ssuperior\",\n    \"tsuperior\",\n    \"\",\n    \"ff\",\n    \"fi\",\n    \"fl\",\n    \"ffi\",\n    \"ffl\",\n    \"parenleftinferior\",\n    \"\",\n    \"parenrightinferior\",\n    \"Circumflexsmall\",\n    \"hyphensuperior\",\n    \"Gravesmall\",\n    \"Asmall\",\n    \"Bsmall\",\n    \"Csmall\",\n    \"Dsmall\",\n    \"Esmall\",\n    \"Fsmall\",\n    \"Gsmall\",\n    \"Hsmall\",\n    \"Ismall\",\n    \"Jsmall\",\n    \"Ksmall\",\n    \"Lsmall\",\n    \"Msmall\",\n    \"Nsmall\",\n    \"Osmall\",\n    \"Psmall\",\n    \"Qsmall\",\n    \"Rsmall\",\n    \"Ssmall\",\n    \"Tsmall\",\n    \"Usmall\",\n    \"Vsmall\",\n    \"Wsmall\",\n    \"Xsmall\",\n    \"Ysmall\",\n    \"Zsmall\",\n    \"colonmonetary\",\n    \"onefitted\",\n    \"rupiah\",\n    \"Tildesmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"\",\n    \"exclamdownsmall\",\n    \"centoldstyle\",\n    \"Lslashsmall\",\n    \"\",\n    \"\",\n    \"Scaronsmall\",\n    \"Zcaronsmall\",\n    \"Dieresissmall\",\n    \"Brevesmall\",\n    \"Caronsmall\",\n    \"\",\n    \"Dotaccentsmall\",\n    \"\",\n    \"\",\n    \"Macronsmall\",\n    \"\",\n    \"\",\n    \"figuredash\",\n    \"hypheninferior\",\n    \"\",\n    \"\",\n    \"Ogoneksmall\",\n    \"Ringsmall\",\n    \"Cedillasmall\",\n    \"\",\n    \"\",\n    \"\",\n    \"onequarter\",\n    \"onehalf\",\n    \"threequarters\",\n    \"questiondownsmall\",\n    \"oneeighth\",\n    \"threeeighths\",\n    \"fiveeighths\",\n    \"seveneighths\",\n    \"onethird\",\n    \"twothirds\",\n    \"\",\n    \"\",\n    \"zerosuperior\",\n    \"onesuperior\",\n    \"twosuperior\",\n    \"threesuperior\",\n    \"foursuperior\",\n    \"fivesuperior\",\n    \"sixsuperior\",\n    \"sevensuperior\",\n    \"eightsuperior\",\n    \"ninesuperior\",\n    \"zeroinferior\",\n    \"oneinferior\",\n    \"twoinferior\",\n    \"threeinferior\",\n    \"fourinferior\",\n    \"fiveinferior\",\n    \"sixinferior\",\n    \"seveninferior\",\n    \"eightinferior\",\n    \"nineinferior\",\n    \"centinferior\",\n    \"dollarinferior\",\n    \"periodinferior\",\n    \"commainferior\",\n    \"Agravesmall\",\n    \"Aacutesmall\",\n    \"Acircumflexsmall\",\n    \"Atildesmall\",\n    \"Adieresissmall\",\n    \"Aringsmall\",\n    \"AEsmall\",\n    \"Ccedillasmall\",\n    \"Egravesmall\",\n    \"Eacutesmall\",\n    \"Ecircumflexsmall\",\n    \"Edieresissmall\",\n    \"Igravesmall\",\n    \"Iacutesmall\",\n    \"Icircumflexsmall\",\n    \"Idieresissmall\",\n    \"Ethsmall\",\n    \"Ntildesmall\",\n    \"Ogravesmall\",\n    \"Oacutesmall\",\n    \"Ocircumflexsmall\",\n    \"Otildesmall\",\n    \"Odieresissmall\",\n    \"OEsmall\",\n    \"Oslashsmall\",\n    \"Ugravesmall\",\n    \"Uacutesmall\",\n    \"Ucircumflexsmall\",\n    \"Udieresissmall\",\n    \"Yacutesmall\",\n    \"Thornsmall\",\n    \"Ydieresissmall\"\n];\nfunction DefaultEncoding(font) {\n    this.font = font;\n}\nDefaultEncoding.prototype.charToGlyphIndex = function(c2) {\n    var code = c2.codePointAt(0);\n    var glyphs = this.font.glyphs;\n    if (glyphs) {\n        for(var i = 0; i < glyphs.length; i += 1){\n            var glyph = glyphs.get(i);\n            for(var j2 = 0; j2 < glyph.unicodes.length; j2 += 1){\n                if (glyph.unicodes[j2] === code) {\n                    return i;\n                }\n            }\n        }\n    }\n    return null;\n};\nfunction CmapEncoding(cmap2) {\n    this.cmap = cmap2;\n}\nCmapEncoding.prototype.charToGlyphIndex = function(c2) {\n    return this.cmap.glyphIndexMap[c2.codePointAt(0)] || 0;\n};\nfunction CffEncoding(encoding, charset) {\n    this.encoding = encoding;\n    this.charset = charset;\n}\nCffEncoding.prototype.charToGlyphIndex = function(s) {\n    var code = s.codePointAt(0);\n    var charName = this.encoding[code];\n    return this.charset.indexOf(charName);\n};\nfunction addGlyphNamesAll(font) {\n    var glyph;\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n    for(var i = 0; i < charCodes.length; i += 1){\n        var c2 = charCodes[i];\n        var glyphIndex = glyphIndexMap[c2];\n        glyph = font.glyphs.get(glyphIndex);\n        glyph.addUnicode(parseInt(c2));\n    }\n}\nfunction addGlyphNamesToUnicodeMap(font) {\n    font._IndexToUnicodeMap = {};\n    var glyphIndexMap = font.tables.cmap.glyphIndexMap;\n    var charCodes = Object.keys(glyphIndexMap);\n    for(var i = 0; i < charCodes.length; i += 1){\n        var c2 = charCodes[i];\n        var glyphIndex = glyphIndexMap[c2];\n        if (font._IndexToUnicodeMap[glyphIndex] === void 0) {\n            font._IndexToUnicodeMap[glyphIndex] = {\n                unicodes: [\n                    parseInt(c2)\n                ]\n            };\n        } else {\n            font._IndexToUnicodeMap[glyphIndex].unicodes.push(parseInt(c2));\n        }\n    }\n}\nfunction addGlyphNames(font, opt) {\n    if (opt.lowMemory) {\n        addGlyphNamesToUnicodeMap(font);\n    } else {\n        addGlyphNamesAll(font);\n    }\n}\nfunction fail(message) {\n    throw new Error(message);\n}\nfunction argument(predicate, message) {\n    if (!predicate) {\n        fail(message);\n    }\n}\nvar check = {\n    fail,\n    argument,\n    assert: argument\n};\nfunction getPathDefinition(glyph, path) {\n    var _path = path || new Path();\n    return {\n        configurable: true,\n        get: function() {\n            if (typeof _path === \"function\") {\n                _path = _path();\n            }\n            return _path;\n        },\n        set: function(p) {\n            _path = p;\n        }\n    };\n}\nfunction Glyph(options) {\n    this.bindConstructorValues(options);\n}\nGlyph.prototype.bindConstructorValues = function(options) {\n    this.index = options.index || 0;\n    this.name = options.name || null;\n    this.unicode = options.unicode || void 0;\n    this.unicodes = options.unicodes || options.unicode !== void 0 ? [\n        options.unicode\n    ] : [];\n    if (\"xMin\" in options) {\n        this.xMin = options.xMin;\n    }\n    if (\"yMin\" in options) {\n        this.yMin = options.yMin;\n    }\n    if (\"xMax\" in options) {\n        this.xMax = options.xMax;\n    }\n    if (\"yMax\" in options) {\n        this.yMax = options.yMax;\n    }\n    if (\"advanceWidth\" in options) {\n        this.advanceWidth = options.advanceWidth;\n    }\n    Object.defineProperty(this, \"path\", getPathDefinition(this, options.path));\n};\nGlyph.prototype.addUnicode = function(unicode) {\n    if (this.unicodes.length === 0) {\n        this.unicode = unicode;\n    }\n    this.unicodes.push(unicode);\n};\nGlyph.prototype.getPath = function(x, y, fontSize, options, font) {\n    x = x !== void 0 ? x : 0;\n    y = y !== void 0 ? y : 0;\n    fontSize = fontSize !== void 0 ? fontSize : 72;\n    var commands;\n    var hPoints;\n    if (!options) {\n        options = {};\n    }\n    var xScale = options.xScale;\n    var yScale = options.yScale;\n    if (options.hinting && font && font.hinting) {\n        hPoints = this.path && font.hinting.exec(this, fontSize);\n    }\n    if (hPoints) {\n        commands = font.hinting.getCommands(hPoints);\n        x = Math.round(x);\n        y = Math.round(y);\n        xScale = yScale = 1;\n    } else {\n        commands = this.path.commands;\n        var scale = 1 / (this.path.unitsPerEm || 1e3) * fontSize;\n        if (xScale === void 0) {\n            xScale = scale;\n        }\n        if (yScale === void 0) {\n            yScale = scale;\n        }\n    }\n    var p = new Path();\n    for(var i = 0; i < commands.length; i += 1){\n        var cmd = commands[i];\n        if (cmd.type === \"M\") {\n            p.moveTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"L\") {\n            p.lineTo(x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"Q\") {\n            p.quadraticCurveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"C\") {\n            p.curveTo(x + cmd.x1 * xScale, y + -cmd.y1 * yScale, x + cmd.x2 * xScale, y + -cmd.y2 * yScale, x + cmd.x * xScale, y + -cmd.y * yScale);\n        } else if (cmd.type === \"Z\") {\n            p.closePath();\n        }\n    }\n    return p;\n};\nGlyph.prototype.getContours = function() {\n    if (this.points === void 0) {\n        return [];\n    }\n    var contours = [];\n    var currentContour = [];\n    for(var i = 0; i < this.points.length; i += 1){\n        var pt2 = this.points[i];\n        currentContour.push(pt2);\n        if (pt2.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n    check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n    return contours;\n};\nGlyph.prototype.getMetrics = function() {\n    var commands = this.path.commands;\n    var xCoords = [];\n    var yCoords = [];\n    for(var i = 0; i < commands.length; i += 1){\n        var cmd = commands[i];\n        if (cmd.type !== \"Z\") {\n            xCoords.push(cmd.x);\n            yCoords.push(cmd.y);\n        }\n        if (cmd.type === \"Q\" || cmd.type === \"C\") {\n            xCoords.push(cmd.x1);\n            yCoords.push(cmd.y1);\n        }\n        if (cmd.type === \"C\") {\n            xCoords.push(cmd.x2);\n            yCoords.push(cmd.y2);\n        }\n    }\n    var metrics = {\n        xMin: Math.min.apply(null, xCoords),\n        yMin: Math.min.apply(null, yCoords),\n        xMax: Math.max.apply(null, xCoords),\n        yMax: Math.max.apply(null, yCoords),\n        leftSideBearing: this.leftSideBearing\n    };\n    if (!isFinite(metrics.xMin)) {\n        metrics.xMin = 0;\n    }\n    if (!isFinite(metrics.xMax)) {\n        metrics.xMax = this.advanceWidth;\n    }\n    if (!isFinite(metrics.yMin)) {\n        metrics.yMin = 0;\n    }\n    if (!isFinite(metrics.yMax)) {\n        metrics.yMax = 0;\n    }\n    metrics.rightSideBearing = this.advanceWidth - metrics.leftSideBearing - (metrics.xMax - metrics.xMin);\n    return metrics;\n};\nfunction defineDependentProperty(glyph, externalName, internalName) {\n    Object.defineProperty(glyph, externalName, {\n        get: function() {\n            glyph.path;\n            return glyph[internalName];\n        },\n        set: function(newValue) {\n            glyph[internalName] = newValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction GlyphSet(font, glyphs) {\n    this.font = font;\n    this.glyphs = {};\n    if (Array.isArray(glyphs)) {\n        for(var i = 0; i < glyphs.length; i++){\n            var glyph = glyphs[i];\n            glyph.path.unitsPerEm = font.unitsPerEm;\n            this.glyphs[i] = glyph;\n        }\n    }\n    this.length = glyphs && glyphs.length || 0;\n}\nGlyphSet.prototype.get = function(index) {\n    if (this.glyphs[index] === void 0) {\n        this.font._push(index);\n        if (typeof this.glyphs[index] === \"function\") {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n        var glyph = this.glyphs[index];\n        var unicodeObj = this.font._IndexToUnicodeMap[index];\n        if (unicodeObj) {\n            for(var j2 = 0; j2 < unicodeObj.unicodes.length; j2++){\n                glyph.addUnicode(unicodeObj.unicodes[j2]);\n            }\n        }\n        this.glyphs[index].advanceWidth = this.font._hmtxTableData[index].advanceWidth;\n        this.glyphs[index].leftSideBearing = this.font._hmtxTableData[index].leftSideBearing;\n    } else {\n        if (typeof this.glyphs[index] === \"function\") {\n            this.glyphs[index] = this.glyphs[index]();\n        }\n    }\n    return this.glyphs[index];\n};\nGlyphSet.prototype.push = function(index, loader) {\n    this.glyphs[index] = loader;\n    this.length++;\n};\nfunction glyphLoader(font, index) {\n    return new Glyph({\n        index,\n        font\n    });\n}\nfunction ttfGlyphLoader(font, index, parseGlyph2, data, position, buildPath2) {\n    return function() {\n        var glyph = new Glyph({\n            index,\n            font\n        });\n        glyph.path = function() {\n            parseGlyph2(glyph, data, position);\n            var path = buildPath2(font.glyphs, glyph);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n        defineDependentProperty(glyph, \"xMin\", \"_xMin\");\n        defineDependentProperty(glyph, \"xMax\", \"_xMax\");\n        defineDependentProperty(glyph, \"yMin\", \"_yMin\");\n        defineDependentProperty(glyph, \"yMax\", \"_yMax\");\n        return glyph;\n    };\n}\nfunction cffGlyphLoader(font, index, parseCFFCharstring2, charstring) {\n    return function() {\n        var glyph = new Glyph({\n            index,\n            font\n        });\n        glyph.path = function() {\n            var path = parseCFFCharstring2(font, glyph, charstring);\n            path.unitsPerEm = font.unitsPerEm;\n            return path;\n        };\n        return glyph;\n    };\n}\nvar glyphset = {\n    GlyphSet,\n    glyphLoader,\n    ttfGlyphLoader,\n    cffGlyphLoader\n};\nfunction searchTag(arr, tag) {\n    var imin = 0;\n    var imax = arr.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        var val = arr[imid].tag;\n        if (val === tag) {\n            return imid;\n        } else if (val < tag) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    return -imin - 1;\n}\nfunction binSearch(arr, value) {\n    var imin = 0;\n    var imax = arr.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        var val = arr[imid];\n        if (val === value) {\n            return imid;\n        } else if (val < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    return -imin - 1;\n}\nfunction searchRange(ranges, value) {\n    var range;\n    var imin = 0;\n    var imax = ranges.length - 1;\n    while(imin <= imax){\n        var imid = imin + imax >>> 1;\n        range = ranges[imid];\n        var start = range.start;\n        if (start === value) {\n            return range;\n        } else if (start < value) {\n            imin = imid + 1;\n        } else {\n            imax = imid - 1;\n        }\n    }\n    if (imin > 0) {\n        range = ranges[imin - 1];\n        if (value > range.end) {\n            return 0;\n        }\n        return range;\n    }\n}\nfunction Layout(font, tableName) {\n    this.font = font;\n    this.tableName = tableName;\n}\nLayout.prototype = {\n    searchTag,\n    binSearch,\n    getTable: function(create) {\n        var layout = this.font.tables[this.tableName];\n        if (!layout && create) {\n            layout = this.font.tables[this.tableName] = this.createDefaultTable();\n        }\n        return layout;\n    },\n    getDefaultScriptName: function() {\n        var layout = this.getTable();\n        if (!layout) {\n            return;\n        }\n        var hasLatn = false;\n        for(var i = 0; i < layout.scripts.length; i++){\n            var name = layout.scripts[i].tag;\n            if (name === \"DFLT\") {\n                return name;\n            }\n            if (name === \"latn\") {\n                hasLatn = true;\n            }\n        }\n        if (hasLatn) {\n            return \"latn\";\n        }\n    },\n    getScriptTable: function(script, create) {\n        var layout = this.getTable(create);\n        if (layout) {\n            script = script || \"DFLT\";\n            var scripts = layout.scripts;\n            var pos = searchTag(layout.scripts, script);\n            if (pos >= 0) {\n                return scripts[pos].script;\n            } else if (create) {\n                var scr = {\n                    tag: script,\n                    script: {\n                        defaultLangSys: {\n                            reserved: 0,\n                            reqFeatureIndex: 65535,\n                            featureIndexes: []\n                        },\n                        langSysRecords: []\n                    }\n                };\n                scripts.splice(-1 - pos, 0, scr);\n                return scr.script;\n            }\n        }\n    },\n    getLangSysTable: function(script, language, create) {\n        var scriptTable = this.getScriptTable(script, create);\n        if (scriptTable) {\n            if (!language || language === \"dflt\" || language === \"DFLT\") {\n                return scriptTable.defaultLangSys;\n            }\n            var pos = searchTag(scriptTable.langSysRecords, language);\n            if (pos >= 0) {\n                return scriptTable.langSysRecords[pos].langSys;\n            } else if (create) {\n                var langSysRecord = {\n                    tag: language,\n                    langSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    }\n                };\n                scriptTable.langSysRecords.splice(-1 - pos, 0, langSysRecord);\n                return langSysRecord.langSys;\n            }\n        }\n    },\n    getFeatureTable: function(script, language, feature, create) {\n        var langSysTable2 = this.getLangSysTable(script, language, create);\n        if (langSysTable2) {\n            var featureRecord;\n            var featIndexes = langSysTable2.featureIndexes;\n            var allFeatures = this.font.tables[this.tableName].features;\n            for(var i = 0; i < featIndexes.length; i++){\n                featureRecord = allFeatures[featIndexes[i]];\n                if (featureRecord.tag === feature) {\n                    return featureRecord.feature;\n                }\n            }\n            if (create) {\n                var index = allFeatures.length;\n                check.assert(index === 0 || feature >= allFeatures[index - 1].tag, \"Features must be added in alphabetical order.\");\n                featureRecord = {\n                    tag: feature,\n                    feature: {\n                        params: 0,\n                        lookupListIndexes: []\n                    }\n                };\n                allFeatures.push(featureRecord);\n                featIndexes.push(index);\n                return featureRecord.feature;\n            }\n        }\n    },\n    getLookupTables: function(script, language, feature, lookupType, create) {\n        var featureTable = this.getFeatureTable(script, language, feature, create);\n        var tables = [];\n        if (featureTable) {\n            var lookupTable;\n            var lookupListIndexes = featureTable.lookupListIndexes;\n            var allLookups = this.font.tables[this.tableName].lookups;\n            for(var i = 0; i < lookupListIndexes.length; i++){\n                lookupTable = allLookups[lookupListIndexes[i]];\n                if (lookupTable.lookupType === lookupType) {\n                    tables.push(lookupTable);\n                }\n            }\n            if (tables.length === 0 && create) {\n                lookupTable = {\n                    lookupType,\n                    lookupFlag: 0,\n                    subtables: [],\n                    markFilteringSet: void 0\n                };\n                var index = allLookups.length;\n                allLookups.push(lookupTable);\n                lookupListIndexes.push(index);\n                return [\n                    lookupTable\n                ];\n            }\n        }\n        return tables;\n    },\n    getGlyphClass: function(classDefTable, glyphIndex) {\n        switch(classDefTable.format){\n            case 1:\n                if (classDefTable.startGlyph <= glyphIndex && glyphIndex < classDefTable.startGlyph + classDefTable.classes.length) {\n                    return classDefTable.classes[glyphIndex - classDefTable.startGlyph];\n                }\n                return 0;\n            case 2:\n                var range = searchRange(classDefTable.ranges, glyphIndex);\n                return range ? range.classId : 0;\n        }\n    },\n    getCoverageIndex: function(coverageTable, glyphIndex) {\n        switch(coverageTable.format){\n            case 1:\n                var index = binSearch(coverageTable.glyphs, glyphIndex);\n                return index >= 0 ? index : -1;\n            case 2:\n                var range = searchRange(coverageTable.ranges, glyphIndex);\n                return range ? range.index + glyphIndex - range.start : -1;\n        }\n    },\n    expandCoverage: function(coverageTable) {\n        if (coverageTable.format === 1) {\n            return coverageTable.glyphs;\n        } else {\n            var glyphs = [];\n            var ranges = coverageTable.ranges;\n            for(var i = 0; i < ranges.length; i++){\n                var range = ranges[i];\n                var start = range.start;\n                var end = range.end;\n                for(var j2 = start; j2 <= end; j2++){\n                    glyphs.push(j2);\n                }\n            }\n            return glyphs;\n        }\n    }\n};\nfunction Position(font) {\n    Layout.call(this, font, \"gpos\");\n}\nPosition.prototype = Layout.prototype;\nPosition.prototype.init = function() {\n    var script = this.getDefaultScriptName();\n    this.defaultKerningTables = this.getKerningTables(script);\n};\nPosition.prototype.getKerningValue = function(kerningLookups, leftIndex, rightIndex) {\n    for(var i = 0; i < kerningLookups.length; i++){\n        var subtables = kerningLookups[i].subtables;\n        for(var j2 = 0; j2 < subtables.length; j2++){\n            var subtable = subtables[j2];\n            var covIndex = this.getCoverageIndex(subtable.coverage, leftIndex);\n            if (covIndex < 0) {\n                continue;\n            }\n            switch(subtable.posFormat){\n                case 1:\n                    var pairSet = subtable.pairSets[covIndex];\n                    for(var k = 0; k < pairSet.length; k++){\n                        var pair = pairSet[k];\n                        if (pair.secondGlyph === rightIndex) {\n                            return pair.value1 && pair.value1.xAdvance || 0;\n                        }\n                    }\n                    break;\n                case 2:\n                    var class1 = this.getGlyphClass(subtable.classDef1, leftIndex);\n                    var class2 = this.getGlyphClass(subtable.classDef2, rightIndex);\n                    var pair$1 = subtable.classRecords[class1][class2];\n                    return pair$1.value1 && pair$1.value1.xAdvance || 0;\n            }\n        }\n    }\n    return 0;\n};\nPosition.prototype.getKerningTables = function(script, language) {\n    if (this.font.tables.gpos) {\n        return this.getLookupTables(script, language, \"kern\", 2);\n    }\n};\nfunction Substitution(font) {\n    Layout.call(this, font, \"gsub\");\n}\nfunction arraysEqual(ar1, ar2) {\n    var n = ar1.length;\n    if (n !== ar2.length) {\n        return false;\n    }\n    for(var i = 0; i < n; i++){\n        if (ar1[i] !== ar2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction getSubstFormat(lookupTable, format, defaultSubtable) {\n    var subtables = lookupTable.subtables;\n    for(var i = 0; i < subtables.length; i++){\n        var subtable = subtables[i];\n        if (subtable.substFormat === format) {\n            return subtable;\n        }\n    }\n    if (defaultSubtable) {\n        subtables.push(defaultSubtable);\n        return defaultSubtable;\n    }\n    return void 0;\n}\nSubstitution.prototype = Layout.prototype;\nSubstitution.prototype.createDefaultTable = function() {\n    return {\n        version: 1,\n        scripts: [\n            {\n                tag: \"DFLT\",\n                script: {\n                    defaultLangSys: {\n                        reserved: 0,\n                        reqFeatureIndex: 65535,\n                        featureIndexes: []\n                    },\n                    langSysRecords: []\n                }\n            }\n        ],\n        features: [],\n        lookups: []\n    };\n};\nSubstitution.prototype.getSingle = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 1);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j2 = void 0;\n            if (subtable.substFormat === 1) {\n                var delta = subtable.deltaGlyphId;\n                for(j2 = 0; j2 < glyphs.length; j2++){\n                    var glyph = glyphs[j2];\n                    substitutions.push({\n                        sub: glyph,\n                        by: glyph + delta\n                    });\n                }\n            } else {\n                var substitute = subtable.substitute;\n                for(j2 = 0; j2 < glyphs.length; j2++){\n                    substitutions.push({\n                        sub: glyphs[j2],\n                        by: substitute[j2]\n                    });\n                }\n            }\n        }\n    }\n    return substitutions;\n};\nSubstitution.prototype.getMultiple = function(feature, script, language) {\n    var substitutions = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 2);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var j2 = void 0;\n            for(j2 = 0; j2 < glyphs.length; j2++){\n                var glyph = glyphs[j2];\n                var replacements = subtable.sequences[j2];\n                substitutions.push({\n                    sub: glyph,\n                    by: replacements\n                });\n            }\n        }\n    }\n    return substitutions;\n};\nSubstitution.prototype.getAlternates = function(feature, script, language) {\n    var alternates = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 3);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var alternateSets = subtable.alternateSets;\n            for(var j2 = 0; j2 < glyphs.length; j2++){\n                alternates.push({\n                    sub: glyphs[j2],\n                    by: alternateSets[j2]\n                });\n            }\n        }\n    }\n    return alternates;\n};\nSubstitution.prototype.getLigatures = function(feature, script, language) {\n    var ligatures = [];\n    var lookupTables = this.getLookupTables(script, language, feature, 4);\n    for(var idx = 0; idx < lookupTables.length; idx++){\n        var subtables = lookupTables[idx].subtables;\n        for(var i = 0; i < subtables.length; i++){\n            var subtable = subtables[i];\n            var glyphs = this.expandCoverage(subtable.coverage);\n            var ligatureSets = subtable.ligatureSets;\n            for(var j2 = 0; j2 < glyphs.length; j2++){\n                var startGlyph = glyphs[j2];\n                var ligSet = ligatureSets[j2];\n                for(var k = 0; k < ligSet.length; k++){\n                    var lig = ligSet[k];\n                    ligatures.push({\n                        sub: [\n                            startGlyph\n                        ].concat(lig.components),\n                        by: lig.ligGlyph\n                    });\n                }\n            }\n        }\n    }\n    return ligatures;\n};\nSubstitution.prototype.addSingle = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 1, true)[0];\n    var subtable = getSubstFormat(lookupTable, 2, {\n        substFormat: 2,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        substitute: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Single: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.substitute.splice(pos, 0, 0);\n    }\n    subtable.substitute[pos] = substitution.by;\n};\nSubstitution.prototype.addMultiple = function(feature, substitution, script, language) {\n    check.assert(substitution.by instanceof Array && substitution.by.length > 1, 'Multiple: \"by\" must be an array of two or more ids');\n    var lookupTable = this.getLookupTables(script, language, feature, 2, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        sequences: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Multiple: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.sequences.splice(pos, 0, 0);\n    }\n    subtable.sequences[pos] = substitution.by;\n};\nSubstitution.prototype.addAlternate = function(feature, substitution, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 3, true)[0];\n    var subtable = getSubstFormat(lookupTable, 1, {\n        substFormat: 1,\n        coverage: {\n            format: 1,\n            glyphs: []\n        },\n        alternateSets: []\n    });\n    check.assert(subtable.coverage.format === 1, \"Alternate: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = substitution.sub;\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos < 0) {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.alternateSets.splice(pos, 0, 0);\n    }\n    subtable.alternateSets[pos] = substitution.by;\n};\nSubstitution.prototype.addLigature = function(feature, ligature, script, language) {\n    var lookupTable = this.getLookupTables(script, language, feature, 4, true)[0];\n    var subtable = lookupTable.subtables[0];\n    if (!subtable) {\n        subtable = {\n            substFormat: 1,\n            coverage: {\n                format: 1,\n                glyphs: []\n            },\n            ligatureSets: []\n        };\n        lookupTable.subtables[0] = subtable;\n    }\n    check.assert(subtable.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + subtable.coverage.format);\n    var coverageGlyph = ligature.sub[0];\n    var ligComponents = ligature.sub.slice(1);\n    var ligatureTable = {\n        ligGlyph: ligature.by,\n        components: ligComponents\n    };\n    var pos = this.binSearch(subtable.coverage.glyphs, coverageGlyph);\n    if (pos >= 0) {\n        var ligatureSet = subtable.ligatureSets[pos];\n        for(var i = 0; i < ligatureSet.length; i++){\n            if (arraysEqual(ligatureSet[i].components, ligComponents)) {\n                return;\n            }\n        }\n        ligatureSet.push(ligatureTable);\n    } else {\n        pos = -1 - pos;\n        subtable.coverage.glyphs.splice(pos, 0, coverageGlyph);\n        subtable.ligatureSets.splice(pos, 0, [\n            ligatureTable\n        ]);\n    }\n};\nSubstitution.prototype.getFeature = function(feature, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        return this.getSingle(feature, script, language);\n    }\n    switch(feature){\n        case \"aalt\":\n        case \"salt\":\n            return this.getSingle(feature, script, language).concat(this.getAlternates(feature, script, language));\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.getLigatures(feature, script, language);\n        case \"ccmp\":\n            return this.getMultiple(feature, script, language).concat(this.getLigatures(feature, script, language));\n        case \"stch\":\n            return this.getMultiple(feature, script, language);\n    }\n    return void 0;\n};\nSubstitution.prototype.add = function(feature, sub, script, language) {\n    if (/ss\\d\\d/.test(feature)) {\n        return this.addSingle(feature, sub, script, language);\n    }\n    switch(feature){\n        case \"aalt\":\n        case \"salt\":\n            if (typeof sub.by === \"number\") {\n                return this.addSingle(feature, sub, script, language);\n            }\n            return this.addAlternate(feature, sub, script, language);\n        case \"dlig\":\n        case \"liga\":\n        case \"rlig\":\n            return this.addLigature(feature, sub, script, language);\n        case \"ccmp\":\n            if (sub.by instanceof Array) {\n                return this.addMultiple(feature, sub, script, language);\n            }\n            return this.addLigature(feature, sub, script, language);\n    }\n    return void 0;\n};\nfunction checkArgument(expression, message) {\n    if (!expression) {\n        throw message;\n    }\n}\nfunction getByte(dataView, offset) {\n    return dataView.getUint8(offset);\n}\nfunction getUShort(dataView, offset) {\n    return dataView.getUint16(offset, false);\n}\nfunction getShort(dataView, offset) {\n    return dataView.getInt16(offset, false);\n}\nfunction getULong(dataView, offset) {\n    return dataView.getUint32(offset, false);\n}\nfunction getFixed(dataView, offset) {\n    var decimal = dataView.getInt16(offset, false);\n    var fraction = dataView.getUint16(offset + 2, false);\n    return decimal + fraction / 65535;\n}\nfunction getTag(dataView, offset) {\n    var tag = \"\";\n    for(var i = offset; i < offset + 4; i += 1){\n        tag += String.fromCharCode(dataView.getInt8(i));\n    }\n    return tag;\n}\nfunction getOffset(dataView, offset, offSize) {\n    var v = 0;\n    for(var i = 0; i < offSize; i += 1){\n        v <<= 8;\n        v += dataView.getUint8(offset + i);\n    }\n    return v;\n}\nfunction getBytes(dataView, startOffset, endOffset) {\n    var bytes = [];\n    for(var i = startOffset; i < endOffset; i += 1){\n        bytes.push(dataView.getUint8(i));\n    }\n    return bytes;\n}\nfunction bytesToString(bytes) {\n    var s = \"\";\n    for(var i = 0; i < bytes.length; i += 1){\n        s += String.fromCharCode(bytes[i]);\n    }\n    return s;\n}\nvar typeOffsets = {\n    byte: 1,\n    uShort: 2,\n    short: 2,\n    uLong: 4,\n    fixed: 4,\n    longDateTime: 8,\n    tag: 4\n};\nfunction Parser(data, offset) {\n    this.data = data;\n    this.offset = offset;\n    this.relativeOffset = 0;\n}\nParser.prototype.parseByte = function() {\n    var v = this.data.getUint8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\nParser.prototype.parseChar = function() {\n    var v = this.data.getInt8(this.offset + this.relativeOffset);\n    this.relativeOffset += 1;\n    return v;\n};\nParser.prototype.parseCard8 = Parser.prototype.parseByte;\nParser.prototype.parseUShort = function() {\n    var v = this.data.getUint16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseCard16 = Parser.prototype.parseUShort;\nParser.prototype.parseSID = Parser.prototype.parseUShort;\nParser.prototype.parseOffset16 = Parser.prototype.parseUShort;\nParser.prototype.parseShort = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset);\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseF2Dot14 = function() {\n    var v = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n    this.relativeOffset += 2;\n    return v;\n};\nParser.prototype.parseULong = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\nParser.prototype.parseOffset32 = Parser.prototype.parseULong;\nParser.prototype.parseFixed = function() {\n    var v = getFixed(this.data, this.offset + this.relativeOffset);\n    this.relativeOffset += 4;\n    return v;\n};\nParser.prototype.parseString = function(length) {\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    var string = \"\";\n    this.relativeOffset += length;\n    for(var i = 0; i < length; i++){\n        string += String.fromCharCode(dataView.getUint8(offset + i));\n    }\n    return string;\n};\nParser.prototype.parseTag = function() {\n    return this.parseString(4);\n};\nParser.prototype.parseLongDateTime = function() {\n    var v = getULong(this.data, this.offset + this.relativeOffset + 4);\n    v -= 2082844800;\n    this.relativeOffset += 8;\n    return v;\n};\nParser.prototype.parseVersion = function(minorBase) {\n    var major = getUShort(this.data, this.offset + this.relativeOffset);\n    var minor = getUShort(this.data, this.offset + this.relativeOffset + 2);\n    this.relativeOffset += 4;\n    if (minorBase === void 0) {\n        minorBase = 4096;\n    }\n    return major + minor / minorBase / 10;\n};\nParser.prototype.skip = function(type, amount) {\n    if (amount === void 0) {\n        amount = 1;\n    }\n    this.relativeOffset += typeOffsets[type] * amount;\n};\nParser.prototype.parseULongList = function(count) {\n    if (count === void 0) {\n        count = this.parseULong();\n    }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        offsets[i] = dataView.getUint32(offset);\n        offset += 4;\n    }\n    this.relativeOffset += count * 4;\n    return offsets;\n};\nParser.prototype.parseOffset16List = Parser.prototype.parseUShortList = function(count) {\n    if (count === void 0) {\n        count = this.parseUShort();\n    }\n    var offsets = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        offsets[i] = dataView.getUint16(offset);\n        offset += 2;\n    }\n    this.relativeOffset += count * 2;\n    return offsets;\n};\nParser.prototype.parseShortList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        list[i] = dataView.getInt16(offset);\n        offset += 2;\n    }\n    this.relativeOffset += count * 2;\n    return list;\n};\nParser.prototype.parseByteList = function(count) {\n    var list = new Array(count);\n    var dataView = this.data;\n    var offset = this.offset + this.relativeOffset;\n    for(var i = 0; i < count; i++){\n        list[i] = dataView.getUint8(offset++);\n    }\n    this.relativeOffset += count;\n    return list;\n};\nParser.prototype.parseList = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseUShort();\n    }\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\nParser.prototype.parseList32 = function(count, itemCallback) {\n    if (!itemCallback) {\n        itemCallback = count;\n        count = this.parseULong();\n    }\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        list[i] = itemCallback.call(this);\n    }\n    return list;\n};\nParser.prototype.parseRecordList = function(count, recordDescription) {\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseUShort();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for(var i = 0; i < count; i++){\n        var rec = {};\n        for(var j2 = 0; j2 < fields.length; j2++){\n            var fieldName = fields[j2];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\nParser.prototype.parseRecordList32 = function(count, recordDescription) {\n    if (!recordDescription) {\n        recordDescription = count;\n        count = this.parseULong();\n    }\n    var records = new Array(count);\n    var fields = Object.keys(recordDescription);\n    for(var i = 0; i < count; i++){\n        var rec = {};\n        for(var j2 = 0; j2 < fields.length; j2++){\n            var fieldName = fields[j2];\n            var fieldType = recordDescription[fieldName];\n            rec[fieldName] = fieldType.call(this);\n        }\n        records[i] = rec;\n    }\n    return records;\n};\nParser.prototype.parseStruct = function(description) {\n    if (typeof description === \"function\") {\n        return description.call(this);\n    } else {\n        var fields = Object.keys(description);\n        var struct = {};\n        for(var j2 = 0; j2 < fields.length; j2++){\n            var fieldName = fields[j2];\n            var fieldType = description[fieldName];\n            struct[fieldName] = fieldType.call(this);\n        }\n        return struct;\n    }\n};\nParser.prototype.parseValueRecord = function(valueFormat) {\n    if (valueFormat === void 0) {\n        valueFormat = this.parseUShort();\n    }\n    if (valueFormat === 0) {\n        return;\n    }\n    var valueRecord = {};\n    if (valueFormat & 1) {\n        valueRecord.xPlacement = this.parseShort();\n    }\n    if (valueFormat & 2) {\n        valueRecord.yPlacement = this.parseShort();\n    }\n    if (valueFormat & 4) {\n        valueRecord.xAdvance = this.parseShort();\n    }\n    if (valueFormat & 8) {\n        valueRecord.yAdvance = this.parseShort();\n    }\n    if (valueFormat & 16) {\n        valueRecord.xPlaDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 32) {\n        valueRecord.yPlaDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 64) {\n        valueRecord.xAdvDevice = void 0;\n        this.parseShort();\n    }\n    if (valueFormat & 128) {\n        valueRecord.yAdvDevice = void 0;\n        this.parseShort();\n    }\n    return valueRecord;\n};\nParser.prototype.parseValueRecordList = function() {\n    var valueFormat = this.parseUShort();\n    var valueCount = this.parseUShort();\n    var values = new Array(valueCount);\n    for(var i = 0; i < valueCount; i++){\n        values[i] = this.parseValueRecord(valueFormat);\n    }\n    return values;\n};\nParser.prototype.parsePointer = function(description) {\n    var structOffset = this.parseOffset16();\n    if (structOffset > 0) {\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return void 0;\n};\nParser.prototype.parsePointer32 = function(description) {\n    var structOffset = this.parseOffset32();\n    if (structOffset > 0) {\n        return new Parser(this.data, this.offset + structOffset).parseStruct(description);\n    }\n    return void 0;\n};\nParser.prototype.parseListOfLists = function(itemCallback) {\n    var offsets = this.parseOffset16List();\n    var count = offsets.length;\n    var relativeOffset = this.relativeOffset;\n    var list = new Array(count);\n    for(var i = 0; i < count; i++){\n        var start = offsets[i];\n        if (start === 0) {\n            list[i] = void 0;\n            continue;\n        }\n        this.relativeOffset = start;\n        if (itemCallback) {\n            var subOffsets = this.parseOffset16List();\n            var subList = new Array(subOffsets.length);\n            for(var j2 = 0; j2 < subOffsets.length; j2++){\n                this.relativeOffset = start + subOffsets[j2];\n                subList[j2] = itemCallback.call(this);\n            }\n            list[i] = subList;\n        } else {\n            list[i] = this.parseUShortList();\n        }\n    }\n    this.relativeOffset = relativeOffset;\n    return list;\n};\nParser.prototype.parseCoverage = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    var count = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            glyphs: this.parseUShortList(count)\n        };\n    } else if (format === 2) {\n        var ranges = new Array(count);\n        for(var i = 0; i < count; i++){\n            ranges[i] = {\n                start: this.parseUShort(),\n                end: this.parseUShort(),\n                index: this.parseUShort()\n            };\n        }\n        return {\n            format: 2,\n            ranges\n        };\n    }\n    throw new Error(\"0x\" + startOffset.toString(16) + \": Coverage format must be 1 or 2.\");\n};\nParser.prototype.parseClassDef = function() {\n    var startOffset = this.offset + this.relativeOffset;\n    var format = this.parseUShort();\n    if (format === 1) {\n        return {\n            format: 1,\n            startGlyph: this.parseUShort(),\n            classes: this.parseUShortList()\n        };\n    } else if (format === 2) {\n        return {\n            format: 2,\n            ranges: this.parseRecordList({\n                start: Parser.uShort,\n                end: Parser.uShort,\n                classId: Parser.uShort\n            })\n        };\n    }\n    throw new Error(\"0x\" + startOffset.toString(16) + \": ClassDef format must be 1 or 2.\");\n};\nParser.list = function(count, itemCallback) {\n    return function() {\n        return this.parseList(count, itemCallback);\n    };\n};\nParser.list32 = function(count, itemCallback) {\n    return function() {\n        return this.parseList32(count, itemCallback);\n    };\n};\nParser.recordList = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList(count, recordDescription);\n    };\n};\nParser.recordList32 = function(count, recordDescription) {\n    return function() {\n        return this.parseRecordList32(count, recordDescription);\n    };\n};\nParser.pointer = function(description) {\n    return function() {\n        return this.parsePointer(description);\n    };\n};\nParser.pointer32 = function(description) {\n    return function() {\n        return this.parsePointer32(description);\n    };\n};\nParser.tag = Parser.prototype.parseTag;\nParser.byte = Parser.prototype.parseByte;\nParser.uShort = Parser.offset16 = Parser.prototype.parseUShort;\nParser.uShortList = Parser.prototype.parseUShortList;\nParser.uLong = Parser.offset32 = Parser.prototype.parseULong;\nParser.uLongList = Parser.prototype.parseULongList;\nParser.struct = Parser.prototype.parseStruct;\nParser.coverage = Parser.prototype.parseCoverage;\nParser.classDef = Parser.prototype.parseClassDef;\nvar langSysTable = {\n    reserved: Parser.uShort,\n    reqFeatureIndex: Parser.uShort,\n    featureIndexes: Parser.uShortList\n};\nParser.prototype.parseScriptList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        script: Parser.pointer({\n            defaultLangSys: Parser.pointer(langSysTable),\n            langSysRecords: Parser.recordList({\n                tag: Parser.tag,\n                langSys: Parser.pointer(langSysTable)\n            })\n        })\n    })) || [];\n};\nParser.prototype.parseFeatureList = function() {\n    return this.parsePointer(Parser.recordList({\n        tag: Parser.tag,\n        feature: Parser.pointer({\n            featureParams: Parser.offset16,\n            lookupListIndexes: Parser.uShortList\n        })\n    })) || [];\n};\nParser.prototype.parseLookupList = function(lookupTableParsers) {\n    return this.parsePointer(Parser.list(Parser.pointer(function() {\n        var lookupType = this.parseUShort();\n        check.argument(1 <= lookupType && lookupType <= 9, \"GPOS/GSUB lookup type \" + lookupType + \" unknown.\");\n        var lookupFlag = this.parseUShort();\n        var useMarkFilteringSet = lookupFlag & 16;\n        return {\n            lookupType,\n            lookupFlag,\n            subtables: this.parseList(Parser.pointer(lookupTableParsers[lookupType])),\n            markFilteringSet: useMarkFilteringSet ? this.parseUShort() : void 0\n        };\n    }))) || [];\n};\nParser.prototype.parseFeatureVariationsList = function() {\n    return this.parsePointer32(function() {\n        var majorVersion = this.parseUShort();\n        var minorVersion = this.parseUShort();\n        check.argument(majorVersion === 1 && minorVersion < 1, \"GPOS/GSUB feature variations table unknown.\");\n        var featureVariations = this.parseRecordList32({\n            conditionSetOffset: Parser.offset32,\n            featureTableSubstitutionOffset: Parser.offset32\n        });\n        return featureVariations;\n    }) || [];\n};\nvar parse = {\n    getByte,\n    getCard8: getByte,\n    getUShort,\n    getCard16: getUShort,\n    getShort,\n    getULong,\n    getFixed,\n    getTag,\n    getOffset,\n    getBytes,\n    bytesToString,\n    Parser\n};\nfunction parseGlyphCoordinate(p, flag, previousValue, shortVectorBitMask, sameBitMask) {\n    var v;\n    if ((flag & shortVectorBitMask) > 0) {\n        v = p.parseByte();\n        if ((flag & sameBitMask) === 0) {\n            v = -v;\n        }\n        v = previousValue + v;\n    } else {\n        if ((flag & sameBitMask) > 0) {\n            v = previousValue;\n        } else {\n            v = previousValue + p.parseShort();\n        }\n    }\n    return v;\n}\nfunction parseGlyph(glyph, data, start) {\n    var p = new parse.Parser(data, start);\n    glyph.numberOfContours = p.parseShort();\n    glyph._xMin = p.parseShort();\n    glyph._yMin = p.parseShort();\n    glyph._xMax = p.parseShort();\n    glyph._yMax = p.parseShort();\n    var flags;\n    var flag;\n    if (glyph.numberOfContours > 0) {\n        var endPointIndices = glyph.endPointIndices = [];\n        for(var i = 0; i < glyph.numberOfContours; i += 1){\n            endPointIndices.push(p.parseUShort());\n        }\n        glyph.instructionLength = p.parseUShort();\n        glyph.instructions = [];\n        for(var i$1 = 0; i$1 < glyph.instructionLength; i$1 += 1){\n            glyph.instructions.push(p.parseByte());\n        }\n        var numberOfCoordinates = endPointIndices[endPointIndices.length - 1] + 1;\n        flags = [];\n        for(var i$2 = 0; i$2 < numberOfCoordinates; i$2 += 1){\n            flag = p.parseByte();\n            flags.push(flag);\n            if ((flag & 8) > 0) {\n                var repeatCount = p.parseByte();\n                for(var j2 = 0; j2 < repeatCount; j2 += 1){\n                    flags.push(flag);\n                    i$2 += 1;\n                }\n            }\n        }\n        check.argument(flags.length === numberOfCoordinates, \"Bad flags.\");\n        if (endPointIndices.length > 0) {\n            var points = [];\n            var point;\n            if (numberOfCoordinates > 0) {\n                for(var i$3 = 0; i$3 < numberOfCoordinates; i$3 += 1){\n                    flag = flags[i$3];\n                    point = {};\n                    point.onCurve = !!(flag & 1);\n                    point.lastPointOfContour = endPointIndices.indexOf(i$3) >= 0;\n                    points.push(point);\n                }\n                var px = 0;\n                for(var i$4 = 0; i$4 < numberOfCoordinates; i$4 += 1){\n                    flag = flags[i$4];\n                    point = points[i$4];\n                    point.x = parseGlyphCoordinate(p, flag, px, 2, 16);\n                    px = point.x;\n                }\n                var py = 0;\n                for(var i$5 = 0; i$5 < numberOfCoordinates; i$5 += 1){\n                    flag = flags[i$5];\n                    point = points[i$5];\n                    point.y = parseGlyphCoordinate(p, flag, py, 4, 32);\n                    py = point.y;\n                }\n            }\n            glyph.points = points;\n        } else {\n            glyph.points = [];\n        }\n    } else if (glyph.numberOfContours === 0) {\n        glyph.points = [];\n    } else {\n        glyph.isComposite = true;\n        glyph.points = [];\n        glyph.components = [];\n        var moreComponents = true;\n        while(moreComponents){\n            flags = p.parseUShort();\n            var component = {\n                glyphIndex: p.parseUShort(),\n                xScale: 1,\n                scale01: 0,\n                scale10: 0,\n                yScale: 1,\n                dx: 0,\n                dy: 0\n            };\n            if ((flags & 1) > 0) {\n                if ((flags & 2) > 0) {\n                    component.dx = p.parseShort();\n                    component.dy = p.parseShort();\n                } else {\n                    component.matchedPoints = [\n                        p.parseUShort(),\n                        p.parseUShort()\n                    ];\n                }\n            } else {\n                if ((flags & 2) > 0) {\n                    component.dx = p.parseChar();\n                    component.dy = p.parseChar();\n                } else {\n                    component.matchedPoints = [\n                        p.parseByte(),\n                        p.parseByte()\n                    ];\n                }\n            }\n            if ((flags & 8) > 0) {\n                component.xScale = component.yScale = p.parseF2Dot14();\n            } else if ((flags & 64) > 0) {\n                component.xScale = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            } else if ((flags & 128) > 0) {\n                component.xScale = p.parseF2Dot14();\n                component.scale01 = p.parseF2Dot14();\n                component.scale10 = p.parseF2Dot14();\n                component.yScale = p.parseF2Dot14();\n            }\n            glyph.components.push(component);\n            moreComponents = !!(flags & 32);\n        }\n        if (flags & 256) {\n            glyph.instructionLength = p.parseUShort();\n            glyph.instructions = [];\n            for(var i$6 = 0; i$6 < glyph.instructionLength; i$6 += 1){\n                glyph.instructions.push(p.parseByte());\n            }\n        }\n    }\n}\nfunction transformPoints(points, transform) {\n    var newPoints = [];\n    for(var i = 0; i < points.length; i += 1){\n        var pt2 = points[i];\n        var newPt = {\n            x: transform.xScale * pt2.x + transform.scale01 * pt2.y + transform.dx,\n            y: transform.scale10 * pt2.x + transform.yScale * pt2.y + transform.dy,\n            onCurve: pt2.onCurve,\n            lastPointOfContour: pt2.lastPointOfContour\n        };\n        newPoints.push(newPt);\n    }\n    return newPoints;\n}\nfunction getContours(points) {\n    var contours = [];\n    var currentContour = [];\n    for(var i = 0; i < points.length; i += 1){\n        var pt2 = points[i];\n        currentContour.push(pt2);\n        if (pt2.lastPointOfContour) {\n            contours.push(currentContour);\n            currentContour = [];\n        }\n    }\n    check.argument(currentContour.length === 0, \"There are still points left in the current contour.\");\n    return contours;\n}\nfunction getPath(points) {\n    var p = new Path();\n    if (!points) {\n        return p;\n    }\n    var contours = getContours(points);\n    for(var contourIndex = 0; contourIndex < contours.length; ++contourIndex){\n        var contour = contours[contourIndex];\n        var prev = null;\n        var curr = contour[contour.length - 1];\n        var next = contour[0];\n        if (curr.onCurve) {\n            p.moveTo(curr.x, curr.y);\n        } else {\n            if (next.onCurve) {\n                p.moveTo(next.x, next.y);\n            } else {\n                var start = {\n                    x: (curr.x + next.x) * 0.5,\n                    y: (curr.y + next.y) * 0.5\n                };\n                p.moveTo(start.x, start.y);\n            }\n        }\n        for(var i = 0; i < contour.length; ++i){\n            prev = curr;\n            curr = next;\n            next = contour[(i + 1) % contour.length];\n            if (curr.onCurve) {\n                p.lineTo(curr.x, curr.y);\n            } else {\n                var prev2 = prev;\n                var next2 = next;\n                if (!prev.onCurve) {\n                    prev2 = {\n                        x: (curr.x + prev.x) * 0.5,\n                        y: (curr.y + prev.y) * 0.5\n                    };\n                }\n                if (!next.onCurve) {\n                    next2 = {\n                        x: (curr.x + next.x) * 0.5,\n                        y: (curr.y + next.y) * 0.5\n                    };\n                }\n                p.quadraticCurveTo(curr.x, curr.y, next2.x, next2.y);\n            }\n        }\n        p.closePath();\n    }\n    return p;\n}\nfunction buildPath(glyphs, glyph) {\n    if (glyph.isComposite) {\n        for(var j2 = 0; j2 < glyph.components.length; j2 += 1){\n            var component = glyph.components[j2];\n            var componentGlyph = glyphs.get(component.glyphIndex);\n            componentGlyph.getPath();\n            if (componentGlyph.points) {\n                var transformedPoints = void 0;\n                if (component.matchedPoints === void 0) {\n                    transformedPoints = transformPoints(componentGlyph.points, component);\n                } else {\n                    if (component.matchedPoints[0] > glyph.points.length - 1 || component.matchedPoints[1] > componentGlyph.points.length - 1) {\n                        throw Error(\"Matched points out of range in \" + glyph.name);\n                    }\n                    var firstPt = glyph.points[component.matchedPoints[0]];\n                    var secondPt = componentGlyph.points[component.matchedPoints[1]];\n                    var transform = {\n                        xScale: component.xScale,\n                        scale01: component.scale01,\n                        scale10: component.scale10,\n                        yScale: component.yScale,\n                        dx: 0,\n                        dy: 0\n                    };\n                    secondPt = transformPoints([\n                        secondPt\n                    ], transform)[0];\n                    transform.dx = firstPt.x - secondPt.x;\n                    transform.dy = firstPt.y - secondPt.y;\n                    transformedPoints = transformPoints(componentGlyph.points, transform);\n                }\n                glyph.points = glyph.points.concat(transformedPoints);\n            }\n        }\n    }\n    return getPath(glyph.points);\n}\nfunction parseGlyfTableAll(data, start, loca2, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    for(var i = 0; i < loca2.length - 1; i += 1){\n        var offset = loca2[i];\n        var nextOffset = loca2[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    }\n    return glyphs;\n}\nfunction parseGlyfTableOnLowMemory(data, start, loca2, font) {\n    var glyphs = new glyphset.GlyphSet(font);\n    font._push = function(i) {\n        var offset = loca2[i];\n        var nextOffset = loca2[i + 1];\n        if (offset !== nextOffset) {\n            glyphs.push(i, glyphset.ttfGlyphLoader(font, i, parseGlyph, data, start + offset, buildPath));\n        } else {\n            glyphs.push(i, glyphset.glyphLoader(font, i));\n        }\n    };\n    return glyphs;\n}\nfunction parseGlyfTable(data, start, loca2, font, opt) {\n    if (opt.lowMemory) {\n        return parseGlyfTableOnLowMemory(data, start, loca2, font);\n    } else {\n        return parseGlyfTableAll(data, start, loca2, font);\n    }\n}\nvar glyf = {\n    getPath,\n    parse: parseGlyfTable\n};\nvar instructionTable;\nvar exec;\nvar execGlyph;\nvar execComponent;\nfunction Hinting(font) {\n    this.font = font;\n    this.getCommands = function(hPoints) {\n        return glyf.getPath(hPoints).commands;\n    };\n    this._fpgmState = this._prepState = void 0;\n    this._errorState = 0;\n}\nfunction roundOff(v) {\n    return v;\n}\nfunction roundToGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v));\n}\nfunction roundToDoubleGrid(v) {\n    return Math.sign(v) * Math.round(Math.abs(v * 2)) / 2;\n}\nfunction roundToHalfGrid(v) {\n    return Math.sign(v) * (Math.round(Math.abs(v) + 0.5) - 0.5);\n}\nfunction roundUpToGrid(v) {\n    return Math.sign(v) * Math.ceil(Math.abs(v));\n}\nfunction roundDownToGrid(v) {\n    return Math.sign(v) * Math.floor(Math.abs(v));\n}\nvar roundSuper = function(v) {\n    var period = this.srPeriod;\n    var phase = this.srPhase;\n    var threshold = this.srThreshold;\n    var sign = 1;\n    if (v < 0) {\n        v = -v;\n        sign = -1;\n    }\n    v += threshold - phase;\n    v = Math.trunc(v / period) * period;\n    v += phase;\n    if (v < 0) {\n        return phase * sign;\n    }\n    return v * sign;\n};\nvar xUnitVector = {\n    x: 1,\n    y: 0,\n    axis: \"x\",\n    distance: function(p1, p2, o1, o2) {\n        return (o1 ? p1.xo : p1.x) - (o2 ? p2.xo : p2.x);\n    },\n    interpolate: function(p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n        if (!pv || pv === this) {\n            do1 = p.xo - rp1.xo;\n            do2 = p.xo - rp2.xo;\n            dm1 = rp1.x - rp1.xo;\n            dm2 = rp2.x - rp2.xo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n            if (dt === 0) {\n                p.x = p.xo + (dm1 + dm2) / 2;\n                return;\n            }\n            p.x = p.xo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n        if (dt === 0) {\n            xUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n        xUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n    normalSlope: Number.NEGATIVE_INFINITY,\n    setRelative: function(p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.x = (org ? rp.xo : rp.x) + d;\n            return;\n        }\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n        p.x = rpdx + (p.y - rpdy) / pv.normalSlope;\n    },\n    slope: 0,\n    touch: function(p) {\n        p.xTouched = true;\n    },\n    touched: function(p) {\n        return p.xTouched;\n    },\n    untouch: function(p) {\n        p.xTouched = false;\n    }\n};\nvar yUnitVector = {\n    x: 0,\n    y: 1,\n    axis: \"y\",\n    distance: function(p1, p2, o1, o2) {\n        return (o1 ? p1.yo : p1.y) - (o2 ? p2.yo : p2.y);\n    },\n    interpolate: function(p, rp1, rp2, pv) {\n        var do1;\n        var do2;\n        var doa1;\n        var doa2;\n        var dm1;\n        var dm2;\n        var dt;\n        if (!pv || pv === this) {\n            do1 = p.yo - rp1.yo;\n            do2 = p.yo - rp2.yo;\n            dm1 = rp1.y - rp1.yo;\n            dm2 = rp2.y - rp2.yo;\n            doa1 = Math.abs(do1);\n            doa2 = Math.abs(do2);\n            dt = doa1 + doa2;\n            if (dt === 0) {\n                p.y = p.yo + (dm1 + dm2) / 2;\n                return;\n            }\n            p.y = p.yo + (dm1 * doa2 + dm2 * doa1) / dt;\n            return;\n        }\n        do1 = pv.distance(p, rp1, true, true);\n        do2 = pv.distance(p, rp2, true, true);\n        dm1 = pv.distance(rp1, rp1, false, true);\n        dm2 = pv.distance(rp2, rp2, false, true);\n        doa1 = Math.abs(do1);\n        doa2 = Math.abs(do2);\n        dt = doa1 + doa2;\n        if (dt === 0) {\n            yUnitVector.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n            return;\n        }\n        yUnitVector.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n    },\n    normalSlope: 0,\n    setRelative: function(p, rp, d, pv, org) {\n        if (!pv || pv === this) {\n            p.y = (org ? rp.yo : rp.y) + d;\n            return;\n        }\n        var rpx = org ? rp.xo : rp.x;\n        var rpy = org ? rp.yo : rp.y;\n        var rpdx = rpx + d * pv.x;\n        var rpdy = rpy + d * pv.y;\n        p.y = rpdy + pv.normalSlope * (p.x - rpdx);\n    },\n    slope: Number.POSITIVE_INFINITY,\n    touch: function(p) {\n        p.yTouched = true;\n    },\n    touched: function(p) {\n        return p.yTouched;\n    },\n    untouch: function(p) {\n        p.yTouched = false;\n    }\n};\nObject.freeze(xUnitVector);\nObject.freeze(yUnitVector);\nfunction UnitVector(x, y) {\n    this.x = x;\n    this.y = y;\n    this.axis = void 0;\n    this.slope = y / x;\n    this.normalSlope = -x / y;\n    Object.freeze(this);\n}\nUnitVector.prototype.distance = function(p1, p2, o1, o2) {\n    return this.x * xUnitVector.distance(p1, p2, o1, o2) + this.y * yUnitVector.distance(p1, p2, o1, o2);\n};\nUnitVector.prototype.interpolate = function(p, rp1, rp2, pv) {\n    var dm1;\n    var dm2;\n    var do1;\n    var do2;\n    var doa1;\n    var doa2;\n    var dt;\n    do1 = pv.distance(p, rp1, true, true);\n    do2 = pv.distance(p, rp2, true, true);\n    dm1 = pv.distance(rp1, rp1, false, true);\n    dm2 = pv.distance(rp2, rp2, false, true);\n    doa1 = Math.abs(do1);\n    doa2 = Math.abs(do2);\n    dt = doa1 + doa2;\n    if (dt === 0) {\n        this.setRelative(p, p, (dm1 + dm2) / 2, pv, true);\n        return;\n    }\n    this.setRelative(p, p, (dm1 * doa2 + dm2 * doa1) / dt, pv, true);\n};\nUnitVector.prototype.setRelative = function(p, rp, d, pv, org) {\n    pv = pv || this;\n    var rpx = org ? rp.xo : rp.x;\n    var rpy = org ? rp.yo : rp.y;\n    var rpdx = rpx + d * pv.x;\n    var rpdy = rpy + d * pv.y;\n    var pvns = pv.normalSlope;\n    var fvs = this.slope;\n    var px = p.x;\n    var py = p.y;\n    p.x = (fvs * px - pvns * rpdx + rpdy - py) / (fvs - pvns);\n    p.y = fvs * (p.x - px) + py;\n};\nUnitVector.prototype.touch = function(p) {\n    p.xTouched = true;\n    p.yTouched = true;\n};\nfunction getUnitVector(x, y) {\n    var d = Math.sqrt(x * x + y * y);\n    x /= d;\n    y /= d;\n    if (x === 1 && y === 0) {\n        return xUnitVector;\n    } else if (x === 0 && y === 1) {\n        return yUnitVector;\n    } else {\n        return new UnitVector(x, y);\n    }\n}\nfunction HPoint(x, y, lastPointOfContour, onCurve) {\n    this.x = this.xo = Math.round(x * 64) / 64;\n    this.y = this.yo = Math.round(y * 64) / 64;\n    this.lastPointOfContour = lastPointOfContour;\n    this.onCurve = onCurve;\n    this.prevPointOnContour = void 0;\n    this.nextPointOnContour = void 0;\n    this.xTouched = false;\n    this.yTouched = false;\n    Object.preventExtensions(this);\n}\nHPoint.prototype.nextTouched = function(v) {\n    var p = this.nextPointOnContour;\n    while(!v.touched(p) && p !== this){\n        p = p.nextPointOnContour;\n    }\n    return p;\n};\nHPoint.prototype.prevTouched = function(v) {\n    var p = this.prevPointOnContour;\n    while(!v.touched(p) && p !== this){\n        p = p.prevPointOnContour;\n    }\n    return p;\n};\nvar HPZero = Object.freeze(new HPoint(0, 0));\nvar defaultState = {\n    cvCutIn: 17 / 16,\n    deltaBase: 9,\n    deltaShift: 0.125,\n    loop: 1,\n    minDis: 1,\n    autoFlip: true\n};\nfunction State(env, prog) {\n    this.env = env;\n    this.stack = [];\n    this.prog = prog;\n    switch(env){\n        case \"glyf\":\n            this.zp0 = this.zp1 = this.zp2 = 1;\n            this.rp0 = this.rp1 = this.rp2 = 0;\n        case \"prep\":\n            this.fv = this.pv = this.dpv = xUnitVector;\n            this.round = roundToGrid;\n    }\n}\nHinting.prototype.exec = function(glyph, ppem) {\n    if (typeof ppem !== \"number\") {\n        throw new Error(\"Point size is not a number!\");\n    }\n    if (this._errorState > 2) {\n        return;\n    }\n    var font = this.font;\n    var prepState = this._prepState;\n    if (!prepState || prepState.ppem !== ppem) {\n        var fpgmState = this._fpgmState;\n        if (!fpgmState) {\n            State.prototype = defaultState;\n            fpgmState = this._fpgmState = new State(\"fpgm\", font.tables.fpgm);\n            fpgmState.funcs = [];\n            fpgmState.font = font;\n            if (exports.DEBUG) {\n                console.log(\"---EXEC FPGM---\");\n                fpgmState.step = -1;\n            }\n            try {\n                exec(fpgmState);\n            } catch (e) {\n                console.log(\"Hinting error in FPGM:\" + e);\n                this._errorState = 3;\n                return;\n            }\n        }\n        State.prototype = fpgmState;\n        prepState = this._prepState = new State(\"prep\", font.tables.prep);\n        prepState.ppem = ppem;\n        var oCvt = font.tables.cvt;\n        if (oCvt) {\n            var cvt = prepState.cvt = new Array(oCvt.length);\n            var scale = ppem / font.unitsPerEm;\n            for(var c2 = 0; c2 < oCvt.length; c2++){\n                cvt[c2] = oCvt[c2] * scale;\n            }\n        } else {\n            prepState.cvt = [];\n        }\n        if (exports.DEBUG) {\n            console.log(\"---EXEC PREP---\");\n            prepState.step = -1;\n        }\n        try {\n            exec(prepState);\n        } catch (e) {\n            if (this._errorState < 2) {\n                console.log(\"Hinting error in PREP:\" + e);\n            }\n            this._errorState = 2;\n        }\n    }\n    if (this._errorState > 1) {\n        return;\n    }\n    try {\n        return execGlyph(glyph, prepState);\n    } catch (e) {\n        if (this._errorState < 1) {\n            console.log(\"Hinting error:\" + e);\n            console.log(\"Note: further hinting errors are silenced\");\n        }\n        this._errorState = 1;\n        return void 0;\n    }\n};\nexecGlyph = function(glyph, prepState) {\n    var xScale = prepState.ppem / prepState.font.unitsPerEm;\n    var yScale = xScale;\n    var components = glyph.components;\n    var contours;\n    var gZone;\n    var state;\n    State.prototype = prepState;\n    if (!components) {\n        state = new State(\"glyf\", glyph.instructions);\n        if (exports.DEBUG) {\n            console.log(\"---EXEC GLYPH---\");\n            state.step = -1;\n        }\n        execComponent(glyph, state, xScale, yScale);\n        gZone = state.gZone;\n    } else {\n        var font = prepState.font;\n        gZone = [];\n        contours = [];\n        for(var i = 0; i < components.length; i++){\n            var c2 = components[i];\n            var cg = font.glyphs.get(c2.glyphIndex);\n            state = new State(\"glyf\", cg.instructions);\n            if (exports.DEBUG) {\n                console.log(\"---EXEC COMP \" + i + \"---\");\n                state.step = -1;\n            }\n            execComponent(cg, state, xScale, yScale);\n            var dx = Math.round(c2.dx * xScale);\n            var dy = Math.round(c2.dy * yScale);\n            var gz = state.gZone;\n            var cc = state.contours;\n            for(var pi = 0; pi < gz.length; pi++){\n                var p = gz[pi];\n                p.xTouched = p.yTouched = false;\n                p.xo = p.x = p.x + dx;\n                p.yo = p.y = p.y + dy;\n            }\n            var gLen = gZone.length;\n            gZone.push.apply(gZone, gz);\n            for(var j2 = 0; j2 < cc.length; j2++){\n                contours.push(cc[j2] + gLen);\n            }\n        }\n        if (glyph.instructions && !state.inhibitGridFit) {\n            state = new State(\"glyf\", glyph.instructions);\n            state.gZone = state.z0 = state.z1 = state.z2 = gZone;\n            state.contours = contours;\n            gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n            if (exports.DEBUG) {\n                console.log(\"---EXEC COMPOSITE---\");\n                state.step = -1;\n            }\n            exec(state);\n            gZone.length -= 2;\n        }\n    }\n    return gZone;\n};\nexecComponent = function(glyph, state, xScale, yScale) {\n    var points = glyph.points || [];\n    var pLen = points.length;\n    var gZone = state.gZone = state.z0 = state.z1 = state.z2 = [];\n    var contours = state.contours = [];\n    var cp;\n    for(var i = 0; i < pLen; i++){\n        cp = points[i];\n        gZone[i] = new HPoint(cp.x * xScale, cp.y * yScale, cp.lastPointOfContour, cp.onCurve);\n    }\n    var sp;\n    var np;\n    for(var i$1 = 0; i$1 < pLen; i$1++){\n        cp = gZone[i$1];\n        if (!sp) {\n            sp = cp;\n            contours.push(i$1);\n        }\n        if (cp.lastPointOfContour) {\n            cp.nextPointOnContour = sp;\n            sp.prevPointOnContour = cp;\n            sp = void 0;\n        } else {\n            np = gZone[i$1 + 1];\n            cp.nextPointOnContour = np;\n            np.prevPointOnContour = cp;\n        }\n    }\n    if (state.inhibitGridFit) {\n        return;\n    }\n    if (exports.DEBUG) {\n        console.log(\"PROCESSING GLYPH\", state.stack);\n        for(var i$2 = 0; i$2 < pLen; i$2++){\n            console.log(i$2, gZone[i$2].x, gZone[i$2].y);\n        }\n    }\n    gZone.push(new HPoint(0, 0), new HPoint(Math.round(glyph.advanceWidth * xScale), 0));\n    exec(state);\n    gZone.length -= 2;\n    if (exports.DEBUG) {\n        console.log(\"FINISHED GLYPH\", state.stack);\n        for(var i$3 = 0; i$3 < pLen; i$3++){\n            console.log(i$3, gZone[i$3].x, gZone[i$3].y);\n        }\n    }\n};\nexec = function(state) {\n    var prog = state.prog;\n    if (!prog) {\n        return;\n    }\n    var pLen = prog.length;\n    var ins;\n    for(state.ip = 0; state.ip < pLen; state.ip++){\n        if (exports.DEBUG) {\n            state.step++;\n        }\n        ins = instructionTable[prog[state.ip]];\n        if (!ins) {\n            throw new Error(\"unknown instruction: 0x\" + Number(prog[state.ip]).toString(16));\n        }\n        ins(state);\n    }\n};\nfunction initTZone(state) {\n    var tZone = state.tZone = new Array(state.gZone.length);\n    for(var i = 0; i < tZone.length; i++){\n        tZone[i] = new HPoint(0, 0);\n    }\n}\nfunction skip(state, handleElse) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var nesting = 1;\n    var ins;\n    do {\n        ins = prog[++ip];\n        if (ins === 88) {\n            nesting++;\n        } else if (ins === 89) {\n            nesting--;\n        } else if (ins === 64) {\n            ip += prog[ip + 1] + 1;\n        } else if (ins === 65) {\n            ip += 2 * prog[ip + 1] + 1;\n        } else if (ins >= 176 && ins <= 183) {\n            ip += ins - 176 + 1;\n        } else if (ins >= 184 && ins <= 191) {\n            ip += (ins - 184 + 1) * 2;\n        } else if (handleElse && nesting === 1 && ins === 27) {\n            break;\n        }\n    }while (nesting > 0);\n    state.ip = ip;\n}\nfunction SVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SVTCA[\" + v.axis + \"]\");\n    }\n    state.fv = state.pv = state.dpv = v;\n}\nfunction SPVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVTCA[\" + v.axis + \"]\");\n    }\n    state.pv = state.dpv = v;\n}\nfunction SFVTCA(v, state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"SFVTCA[\" + v.axis + \"]\");\n    }\n    state.fv = v;\n}\nfunction SPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(\"SPVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.pv = state.dpv = getUnitVector(dx, dy);\n}\nfunction SFVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(\"SFVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.fv = getUnitVector(dx, dy);\n}\nfunction SPVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVFS[]\", y, x);\n    }\n    state.pv = state.dpv = getUnitVector(x, y);\n}\nfunction SFVFS(state) {\n    var stack = state.stack;\n    var y = stack.pop();\n    var x = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SPVFS[]\", y, x);\n    }\n    state.fv = getUnitVector(x, y);\n}\nfunction GPV(state) {\n    var stack = state.stack;\n    var pv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GPV[]\");\n    }\n    stack.push(pv.x * 16384);\n    stack.push(pv.y * 16384);\n}\nfunction GFV(state) {\n    var stack = state.stack;\n    var fv = state.fv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GFV[]\");\n    }\n    stack.push(fv.x * 16384);\n    stack.push(fv.y * 16384);\n}\nfunction SFVTPV(state) {\n    state.fv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"SFVTPV[]\");\n    }\n}\nfunction ISECT(state) {\n    var stack = state.stack;\n    var pa0i = stack.pop();\n    var pa1i = stack.pop();\n    var pb0i = stack.pop();\n    var pb1i = stack.pop();\n    var pi = stack.pop();\n    var z02 = state.z0;\n    var z1 = state.z1;\n    var pa0 = z02[pa0i];\n    var pa1 = z02[pa1i];\n    var pb0 = z1[pb0i];\n    var pb1 = z1[pb1i];\n    var p = state.z2[pi];\n    if (exports.DEBUG) {\n        console.log(\"ISECT[], \", pa0i, pa1i, pb0i, pb1i, pi);\n    }\n    var x1 = pa0.x;\n    var y1 = pa0.y;\n    var x2 = pa1.x;\n    var y2 = pa1.y;\n    var x3 = pb0.x;\n    var y3 = pb0.y;\n    var x4 = pb1.x;\n    var y4 = pb1.y;\n    var div = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    var f1 = x1 * y2 - y1 * x2;\n    var f2 = x3 * y4 - y3 * x4;\n    p.x = (f1 * (x3 - x4) - f2 * (x1 - x2)) / div;\n    p.y = (f1 * (y3 - y4) - f2 * (y1 - y2)) / div;\n}\nfunction SRP0(state) {\n    state.rp0 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP0[]\", state.rp0);\n    }\n}\nfunction SRP1(state) {\n    state.rp1 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP1[]\", state.rp1);\n    }\n}\nfunction SRP2(state) {\n    state.rp2 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SRP2[]\", state.rp2);\n    }\n}\nfunction SZP0(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP0[]\", n);\n    }\n    state.zp0 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z0 = state.tZone;\n            break;\n        case 1:\n            state.z0 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZP1(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP1[]\", n);\n    }\n    state.zp1 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z1 = state.tZone;\n            break;\n        case 1:\n            state.z1 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZP2(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZP2[]\", n);\n    }\n    state.zp2 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z2 = state.tZone;\n            break;\n        case 1:\n            state.z2 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SZPS(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SZPS[]\", n);\n    }\n    state.zp0 = state.zp1 = state.zp2 = n;\n    switch(n){\n        case 0:\n            if (!state.tZone) {\n                initTZone(state);\n            }\n            state.z0 = state.z1 = state.z2 = state.tZone;\n            break;\n        case 1:\n            state.z0 = state.z1 = state.z2 = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone pointer\");\n    }\n}\nfunction SLOOP(state) {\n    state.loop = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SLOOP[]\", state.loop);\n    }\n}\nfunction RTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTG[]\");\n    }\n    state.round = roundToGrid;\n}\nfunction RTHG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTHG[]\");\n    }\n    state.round = roundToHalfGrid;\n}\nfunction SMD(state) {\n    var d = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SMD[]\", d);\n    }\n    state.minDis = d / 64;\n}\nfunction ELSE(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"ELSE[]\");\n    }\n    skip(state, false);\n}\nfunction JMPR(state) {\n    var o = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"JMPR[]\", o);\n    }\n    state.ip += o - 1;\n}\nfunction SCVTCI(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCVTCI[]\", n);\n    }\n    state.cvCutIn = n / 64;\n}\nfunction DUP(state) {\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DUP[]\");\n    }\n    stack.push(stack[stack.length - 1]);\n}\nfunction POP(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"POP[]\");\n    }\n    state.stack.pop();\n}\nfunction CLEAR(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"CLEAR[]\");\n    }\n    state.stack.length = 0;\n}\nfunction SWAP(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SWAP[]\");\n    }\n    stack.push(a);\n    stack.push(b);\n}\nfunction DEPTH(state) {\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DEPTH[]\");\n    }\n    stack.push(stack.length);\n}\nfunction LOOPCALL(state) {\n    var stack = state.stack;\n    var fn2 = stack.pop();\n    var c2 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LOOPCALL[]\", fn2, c2);\n    }\n    var cip = state.ip;\n    var cprog = state.prog;\n    state.prog = state.funcs[fn2];\n    for(var i = 0; i < c2; i++){\n        exec(state);\n        if (exports.DEBUG) {\n            console.log(++state.step, i + 1 < c2 ? \"next loopcall\" : \"done loopcall\", i);\n        }\n    }\n    state.ip = cip;\n    state.prog = cprog;\n}\nfunction CALL(state) {\n    var fn2 = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CALL[]\", fn2);\n    }\n    var cip = state.ip;\n    var cprog = state.prog;\n    state.prog = state.funcs[fn2];\n    exec(state);\n    state.ip = cip;\n    state.prog = cprog;\n    if (exports.DEBUG) {\n        console.log(++state.step, \"returning from\", fn2);\n    }\n}\nfunction CINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CINDEX[]\", k);\n    }\n    stack.push(stack[stack.length - k]);\n}\nfunction MINDEX(state) {\n    var stack = state.stack;\n    var k = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MINDEX[]\", k);\n    }\n    stack.push(stack.splice(stack.length - k, 1)[0]);\n}\nfunction FDEF(state) {\n    if (state.env !== \"fpgm\") {\n        throw new Error(\"FDEF not allowed here\");\n    }\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n    var fn2 = stack.pop();\n    var ipBegin = ip;\n    if (exports.DEBUG) {\n        console.log(state.step, \"FDEF[]\", fn2);\n    }\n    while(prog[++ip] !== 45){}\n    state.ip = ip;\n    state.funcs[fn2] = prog.slice(ipBegin + 1, ip);\n}\nfunction MDAP(round, state) {\n    var pi = state.stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    if (exports.DEBUG) {\n        console.log(state.step, \"MDAP[\" + round + \"]\", pi);\n    }\n    var d = pv.distance(p, HPZero);\n    if (round) {\n        d = state.round(d);\n    }\n    fv.setRelative(p, HPZero, d, pv);\n    fv.touch(p);\n    state.rp0 = state.rp1 = pi;\n}\nfunction IUP(v, state) {\n    var z2 = state.z2;\n    var pLen = z2.length - 2;\n    var cp;\n    var pp;\n    var np;\n    if (exports.DEBUG) {\n        console.log(state.step, \"IUP[\" + v.axis + \"]\");\n    }\n    for(var i = 0; i < pLen; i++){\n        cp = z2[i];\n        if (v.touched(cp)) {\n            continue;\n        }\n        pp = cp.prevTouched(v);\n        if (pp === cp) {\n            continue;\n        }\n        np = cp.nextTouched(v);\n        if (pp === np) {\n            v.setRelative(cp, cp, v.distance(pp, pp, false, true), v, true);\n        }\n        v.interpolate(cp, pp, np, v);\n    }\n}\nfunction SHP(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var loop = state.loop;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        var d = pv.distance(rp, rp, false, true);\n        fv.setRelative(p, p, d, pv);\n        fv.touch(p);\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHP[\" + (a ? \"rp1\" : \"rp2\") + \"]\", pi);\n        }\n    }\n    state.loop = 1;\n}\nfunction SHC(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var ci = stack.pop();\n    var sp = state.z2[state.contours[ci]];\n    var p = sp;\n    if (exports.DEBUG) {\n        console.log(state.step, \"SHC[\" + a + \"]\", ci);\n    }\n    var d = pv.distance(rp, rp, false, true);\n    do {\n        if (p !== rp) {\n            fv.setRelative(p, p, d, pv);\n        }\n        p = p.nextPointOnContour;\n    }while (p !== sp);\n}\nfunction SHZ(a, state) {\n    var stack = state.stack;\n    var rpi = a ? state.rp1 : state.rp2;\n    var rp = (a ? state.z0 : state.z1)[rpi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var e = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SHZ[\" + a + \"]\", e);\n    }\n    var z;\n    switch(e){\n        case 0:\n            z = state.tZone;\n            break;\n        case 1:\n            z = state.gZone;\n            break;\n        default:\n            throw new Error(\"Invalid zone\");\n    }\n    var p;\n    var d = pv.distance(rp, rp, false, true);\n    var pLen = z.length - 2;\n    for(var i = 0; i < pLen; i++){\n        p = z[i];\n        fv.setRelative(p, p, d, pv);\n    }\n}\nfunction SHPIX(state) {\n    var stack = state.stack;\n    var loop = state.loop;\n    var fv = state.fv;\n    var d = stack.pop() / 64;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"SHPIX[]\", pi, d);\n        }\n        fv.setRelative(p, p, d);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction IP(state) {\n    var stack = state.stack;\n    var rp1i = state.rp1;\n    var rp2i = state.rp2;\n    var loop = state.loop;\n    var rp1 = state.z0[rp1i];\n    var rp2 = state.z1[rp2i];\n    var fv = state.fv;\n    var pv = state.dpv;\n    var z2 = state.z2;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z2[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"IP[]\", pi, rp1i, \"<->\", rp2i);\n        }\n        fv.interpolate(p, rp1, rp2, pv);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction MSIRP(a, state) {\n    var stack = state.stack;\n    var d = stack.pop() / 64;\n    var pi = stack.pop();\n    var p = state.z1[pi];\n    var rp0 = state.z0[state.rp0];\n    var fv = state.fv;\n    var pv = state.pv;\n    fv.setRelative(p, rp0, d, pv);\n    fv.touch(p);\n    if (exports.DEBUG) {\n        console.log(state.step, \"MSIRP[\" + a + \"]\", d, pi);\n    }\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (a) {\n        state.rp0 = pi;\n    }\n}\nfunction ALIGNRP(state) {\n    var stack = state.stack;\n    var rp0i = state.rp0;\n    var rp0 = state.z0[rp0i];\n    var loop = state.loop;\n    var fv = state.fv;\n    var pv = state.pv;\n    var z1 = state.z1;\n    while(loop--){\n        var pi = stack.pop();\n        var p = z1[pi];\n        if (exports.DEBUG) {\n            console.log(state.step, (state.loop > 1 ? \"loop \" + (state.loop - loop) + \": \" : \"\") + \"ALIGNRP[]\", pi);\n        }\n        fv.setRelative(p, rp0, 0, pv);\n        fv.touch(p);\n    }\n    state.loop = 1;\n}\nfunction RTDG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RTDG[]\");\n    }\n    state.round = roundToDoubleGrid;\n}\nfunction MIAP(round, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var pi = stack.pop();\n    var p = state.z0[pi];\n    var fv = state.fv;\n    var pv = state.pv;\n    var cv = state.cvt[n];\n    if (exports.DEBUG) {\n        console.log(state.step, \"MIAP[\" + round + \"]\", n, \"(\", cv, \")\", pi);\n    }\n    var d = pv.distance(p, HPZero);\n    if (round) {\n        if (Math.abs(d - cv) < state.cvCutIn) {\n            d = cv;\n        }\n        d = state.round(d);\n    }\n    fv.setRelative(p, HPZero, d, pv);\n    if (state.zp0 === 0) {\n        p.xo = p.x;\n        p.yo = p.y;\n    }\n    fv.touch(p);\n    state.rp0 = state.rp1 = pi;\n}\nfunction NPUSHB(state) {\n    var prog = state.prog;\n    var ip = state.ip;\n    var stack = state.stack;\n    var n = prog[++ip];\n    if (exports.DEBUG) {\n        console.log(state.step, \"NPUSHB[]\", n);\n    }\n    for(var i = 0; i < n; i++){\n        stack.push(prog[++ip]);\n    }\n    state.ip = ip;\n}\nfunction NPUSHW(state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    var n = prog[++ip];\n    if (exports.DEBUG) {\n        console.log(state.step, \"NPUSHW[]\", n);\n    }\n    for(var i = 0; i < n; i++){\n        var w = prog[++ip] << 8 | prog[++ip];\n        if (w & 32768) {\n            w = -((w ^ 65535) + 1);\n        }\n        stack.push(w);\n    }\n    state.ip = ip;\n}\nfunction WS(state) {\n    var stack = state.stack;\n    var store = state.store;\n    if (!store) {\n        store = state.store = [];\n    }\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WS\", v, l);\n    }\n    store[l] = v;\n}\nfunction RS(state) {\n    var stack = state.stack;\n    var store = state.store;\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"RS\", l);\n    }\n    var v = store && store[l] || 0;\n    stack.push(v);\n}\nfunction WCVTP(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WCVTP\", v, l);\n    }\n    state.cvt[l] = v / 64;\n}\nfunction RCVT(state) {\n    var stack = state.stack;\n    var cvte = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"RCVT\", cvte);\n    }\n    stack.push(state.cvt[cvte] * 64);\n}\nfunction GC(a, state) {\n    var stack = state.stack;\n    var pi = stack.pop();\n    var p = state.z2[pi];\n    if (exports.DEBUG) {\n        console.log(state.step, \"GC[\" + a + \"]\", pi);\n    }\n    stack.push(state.dpv.distance(p, HPZero, a, false) * 64);\n}\nfunction MD(a, state) {\n    var stack = state.stack;\n    var pi2 = stack.pop();\n    var pi1 = stack.pop();\n    var p2 = state.z1[pi2];\n    var p1 = state.z0[pi1];\n    var d = state.dpv.distance(p1, p2, a, a);\n    if (exports.DEBUG) {\n        console.log(state.step, \"MD[\" + a + \"]\", pi2, pi1, \"->\", d);\n    }\n    state.stack.push(Math.round(d * 64));\n}\nfunction MPPEM(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"MPPEM[]\");\n    }\n    state.stack.push(state.ppem);\n}\nfunction FLIPON(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"FLIPON[]\");\n    }\n    state.autoFlip = true;\n}\nfunction LT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LT[]\", e2, e1);\n    }\n    stack.push(e1 < e2 ? 1 : 0);\n}\nfunction LTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"LTEQ[]\", e2, e1);\n    }\n    stack.push(e1 <= e2 ? 1 : 0);\n}\nfunction GT(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"GT[]\", e2, e1);\n    }\n    stack.push(e1 > e2 ? 1 : 0);\n}\nfunction GTEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"GTEQ[]\", e2, e1);\n    }\n    stack.push(e1 >= e2 ? 1 : 0);\n}\nfunction EQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"EQ[]\", e2, e1);\n    }\n    stack.push(e2 === e1 ? 1 : 0);\n}\nfunction NEQ(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NEQ[]\", e2, e1);\n    }\n    stack.push(e2 !== e1 ? 1 : 0);\n}\nfunction ODD(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ODD[]\", n);\n    }\n    stack.push(Math.trunc(n) % 2 ? 1 : 0);\n}\nfunction EVEN(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"EVEN[]\", n);\n    }\n    stack.push(Math.trunc(n) % 2 ? 0 : 1);\n}\nfunction IF(state) {\n    var test = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"IF[]\", test);\n    }\n    if (!test) {\n        skip(state, true);\n        if (exports.DEBUG) {\n            console.log(state.step, \"EIF[]\");\n        }\n    }\n}\nfunction EIF(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"EIF[]\");\n    }\n}\nfunction AND(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"AND[]\", e2, e1);\n    }\n    stack.push(e2 && e1 ? 1 : 0);\n}\nfunction OR(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"OR[]\", e2, e1);\n    }\n    stack.push(e2 || e1 ? 1 : 0);\n}\nfunction NOT(state) {\n    var stack = state.stack;\n    var e = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NOT[]\", e);\n    }\n    stack.push(e ? 0 : 1);\n}\nfunction DELTAP123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var fv = state.fv;\n    var pv = state.pv;\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds2 = state.deltaShift;\n    var z02 = state.z0;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DELTAP[\" + b + \"]\", n, stack);\n    }\n    for(var i = 0; i < n; i++){\n        var pi = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 240) >> 4);\n        if (appem !== ppem) {\n            continue;\n        }\n        var mag = (arg & 15) - 8;\n        if (mag >= 0) {\n            mag++;\n        }\n        if (exports.DEBUG) {\n            console.log(state.step, \"DELTAPFIX\", pi, \"by\", mag * ds2);\n        }\n        var p = z02[pi];\n        fv.setRelative(p, p, mag * ds2, pv);\n    }\n}\nfunction SDB(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDB[]\", n);\n    }\n    state.deltaBase = n;\n}\nfunction SDS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDS[]\", n);\n    }\n    state.deltaShift = Math.pow(0.5, n);\n}\nfunction ADD(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ADD[]\", n2, n1);\n    }\n    stack.push(n1 + n2);\n}\nfunction SUB(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SUB[]\", n2, n1);\n    }\n    stack.push(n1 - n2);\n}\nfunction DIV(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"DIV[]\", n2, n1);\n    }\n    stack.push(n1 * 64 / n2);\n}\nfunction MUL(state) {\n    var stack = state.stack;\n    var n2 = stack.pop();\n    var n1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MUL[]\", n2, n1);\n    }\n    stack.push(n1 * n2 / 64);\n}\nfunction ABS(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ABS[]\", n);\n    }\n    stack.push(Math.abs(n));\n}\nfunction NEG(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"NEG[]\", n);\n    }\n    stack.push(-n);\n}\nfunction FLOOR(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"FLOOR[]\", n);\n    }\n    stack.push(Math.floor(n / 64) * 64);\n}\nfunction CEILING(state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"CEILING[]\", n);\n    }\n    stack.push(Math.ceil(n / 64) * 64);\n}\nfunction ROUND(dt, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROUND[]\");\n    }\n    stack.push(state.round(n / 64) * 64);\n}\nfunction WCVTF(state) {\n    var stack = state.stack;\n    var v = stack.pop();\n    var l = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"WCVTF[]\", v, l);\n    }\n    state.cvt[l] = v * state.ppem / state.font.unitsPerEm;\n}\nfunction DELTAC123(b, state) {\n    var stack = state.stack;\n    var n = stack.pop();\n    var ppem = state.ppem;\n    var base = state.deltaBase + (b - 1) * 16;\n    var ds2 = state.deltaShift;\n    if (exports.DEBUG) {\n        console.log(state.step, \"DELTAC[\" + b + \"]\", n, stack);\n    }\n    for(var i = 0; i < n; i++){\n        var c2 = stack.pop();\n        var arg = stack.pop();\n        var appem = base + ((arg & 240) >> 4);\n        if (appem !== ppem) {\n            continue;\n        }\n        var mag = (arg & 15) - 8;\n        if (mag >= 0) {\n            mag++;\n        }\n        var delta = mag * ds2;\n        if (exports.DEBUG) {\n            console.log(state.step, \"DELTACFIX\", c2, \"by\", delta);\n        }\n        state.cvt[c2] += delta;\n    }\n}\nfunction SROUND(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SROUND[]\", n);\n    }\n    state.round = roundSuper;\n    var period;\n    switch(n & 192){\n        case 0:\n            period = 0.5;\n            break;\n        case 64:\n            period = 1;\n            break;\n        case 128:\n            period = 2;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    state.srPeriod = period;\n    switch(n & 48){\n        case 0:\n            state.srPhase = 0;\n            break;\n        case 16:\n            state.srPhase = 0.25 * period;\n            break;\n        case 32:\n            state.srPhase = 0.5 * period;\n            break;\n        case 48:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error(\"invalid SROUND value\");\n    }\n    n &= 15;\n    if (n === 0) {\n        state.srThreshold = 0;\n    } else {\n        state.srThreshold = (n / 8 - 0.5) * period;\n    }\n}\nfunction S45ROUND(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"S45ROUND[]\", n);\n    }\n    state.round = roundSuper;\n    var period;\n    switch(n & 192){\n        case 0:\n            period = Math.sqrt(2) / 2;\n            break;\n        case 64:\n            period = Math.sqrt(2);\n            break;\n        case 128:\n            period = 2 * Math.sqrt(2);\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    state.srPeriod = period;\n    switch(n & 48){\n        case 0:\n            state.srPhase = 0;\n            break;\n        case 16:\n            state.srPhase = 0.25 * period;\n            break;\n        case 32:\n            state.srPhase = 0.5 * period;\n            break;\n        case 48:\n            state.srPhase = 0.75 * period;\n            break;\n        default:\n            throw new Error(\"invalid S45ROUND value\");\n    }\n    n &= 15;\n    if (n === 0) {\n        state.srThreshold = 0;\n    } else {\n        state.srThreshold = (n / 8 - 0.5) * period;\n    }\n}\nfunction ROFF(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROFF[]\");\n    }\n    state.round = roundOff;\n}\nfunction RUTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RUTG[]\");\n    }\n    state.round = roundUpToGrid;\n}\nfunction RDTG(state) {\n    if (exports.DEBUG) {\n        console.log(state.step, \"RDTG[]\");\n    }\n    state.round = roundDownToGrid;\n}\nfunction SCANCTRL(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCANCTRL[]\", n);\n    }\n}\nfunction SDPVTL(a, state) {\n    var stack = state.stack;\n    var p2i = stack.pop();\n    var p1i = stack.pop();\n    var p2 = state.z2[p2i];\n    var p1 = state.z1[p1i];\n    if (exports.DEBUG) {\n        console.log(state.step, \"SDPVTL[\" + a + \"]\", p2i, p1i);\n    }\n    var dx;\n    var dy;\n    if (!a) {\n        dx = p1.x - p2.x;\n        dy = p1.y - p2.y;\n    } else {\n        dx = p2.y - p1.y;\n        dy = p1.x - p2.x;\n    }\n    state.dpv = getUnitVector(dx, dy);\n}\nfunction GETINFO(state) {\n    var stack = state.stack;\n    var sel = stack.pop();\n    var r = 0;\n    if (exports.DEBUG) {\n        console.log(state.step, \"GETINFO[]\", sel);\n    }\n    if (sel & 1) {\n        r = 35;\n    }\n    if (sel & 32) {\n        r |= 4096;\n    }\n    stack.push(r);\n}\nfunction ROLL(state) {\n    var stack = state.stack;\n    var a = stack.pop();\n    var b = stack.pop();\n    var c2 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"ROLL[]\");\n    }\n    stack.push(b);\n    stack.push(a);\n    stack.push(c2);\n}\nfunction MAX(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MAX[]\", e2, e1);\n    }\n    stack.push(Math.max(e1, e2));\n}\nfunction MIN(state) {\n    var stack = state.stack;\n    var e2 = stack.pop();\n    var e1 = stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"MIN[]\", e2, e1);\n    }\n    stack.push(Math.min(e1, e2));\n}\nfunction SCANTYPE(state) {\n    var n = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"SCANTYPE[]\", n);\n    }\n}\nfunction INSTCTRL(state) {\n    var s = state.stack.pop();\n    var v = state.stack.pop();\n    if (exports.DEBUG) {\n        console.log(state.step, \"INSTCTRL[]\", s, v);\n    }\n    switch(s){\n        case 1:\n            state.inhibitGridFit = !!v;\n            return;\n        case 2:\n            state.ignoreCvt = !!v;\n            return;\n        default:\n            throw new Error(\"invalid INSTCTRL[] selector\");\n    }\n}\nfunction PUSHB(n, state) {\n    var stack = state.stack;\n    var prog = state.prog;\n    var ip = state.ip;\n    if (exports.DEBUG) {\n        console.log(state.step, \"PUSHB[\" + n + \"]\");\n    }\n    for(var i = 0; i < n; i++){\n        stack.push(prog[++ip]);\n    }\n    state.ip = ip;\n}\nfunction PUSHW(n, state) {\n    var ip = state.ip;\n    var prog = state.prog;\n    var stack = state.stack;\n    if (exports.DEBUG) {\n        console.log(state.ip, \"PUSHW[\" + n + \"]\");\n    }\n    for(var i = 0; i < n; i++){\n        var w = prog[++ip] << 8 | prog[++ip];\n        if (w & 32768) {\n            w = -((w ^ 65535) + 1);\n        }\n        stack.push(w);\n    }\n    state.ip = ip;\n}\nfunction MDRP_MIRP(indirect, setRp0, keepD, ro2, dt, state) {\n    var stack = state.stack;\n    var cvte = indirect && stack.pop();\n    var pi = stack.pop();\n    var rp0i = state.rp0;\n    var rp = state.z0[rp0i];\n    var p = state.z1[pi];\n    var md = state.minDis;\n    var fv = state.fv;\n    var pv = state.dpv;\n    var od;\n    var d;\n    var sign;\n    var cv;\n    d = od = pv.distance(p, rp, true, true);\n    sign = d >= 0 ? 1 : -1;\n    d = Math.abs(d);\n    if (indirect) {\n        cv = state.cvt[cvte];\n        if (ro2 && Math.abs(d - cv) < state.cvCutIn) {\n            d = cv;\n        }\n    }\n    if (keepD && d < md) {\n        d = md;\n    }\n    if (ro2) {\n        d = state.round(d);\n    }\n    fv.setRelative(p, rp, sign * d, pv);\n    fv.touch(p);\n    if (exports.DEBUG) {\n        console.log(state.step, (indirect ? \"MIRP[\" : \"MDRP[\") + (setRp0 ? \"M\" : \"m\") + (keepD ? \">\" : \"_\") + (ro2 ? \"R\" : \"_\") + (dt === 0 ? \"Gr\" : dt === 1 ? \"Bl\" : dt === 2 ? \"Wh\" : \"\") + \"]\", indirect ? cvte + \"(\" + state.cvt[cvte] + \",\" + cv + \")\" : \"\", pi, \"(d =\", od, \"->\", sign * d, \")\");\n    }\n    state.rp1 = state.rp0;\n    state.rp2 = pi;\n    if (setRp0) {\n        state.rp0 = pi;\n    }\n}\ninstructionTable = [\n    SVTCA.bind(void 0, yUnitVector),\n    SVTCA.bind(void 0, xUnitVector),\n    SPVTCA.bind(void 0, yUnitVector),\n    SPVTCA.bind(void 0, xUnitVector),\n    SFVTCA.bind(void 0, yUnitVector),\n    SFVTCA.bind(void 0, xUnitVector),\n    SPVTL.bind(void 0, 0),\n    SPVTL.bind(void 0, 1),\n    SFVTL.bind(void 0, 0),\n    SFVTL.bind(void 0, 1),\n    SPVFS,\n    SFVFS,\n    GPV,\n    GFV,\n    SFVTPV,\n    ISECT,\n    SRP0,\n    SRP1,\n    SRP2,\n    SZP0,\n    SZP1,\n    SZP2,\n    SZPS,\n    SLOOP,\n    RTG,\n    RTHG,\n    SMD,\n    ELSE,\n    JMPR,\n    SCVTCI,\n    void 0,\n    void 0,\n    DUP,\n    POP,\n    CLEAR,\n    SWAP,\n    DEPTH,\n    CINDEX,\n    MINDEX,\n    void 0,\n    void 0,\n    void 0,\n    LOOPCALL,\n    CALL,\n    FDEF,\n    void 0,\n    MDAP.bind(void 0, 0),\n    MDAP.bind(void 0, 1),\n    IUP.bind(void 0, yUnitVector),\n    IUP.bind(void 0, xUnitVector),\n    SHP.bind(void 0, 0),\n    SHP.bind(void 0, 1),\n    SHC.bind(void 0, 0),\n    SHC.bind(void 0, 1),\n    SHZ.bind(void 0, 0),\n    SHZ.bind(void 0, 1),\n    SHPIX,\n    IP,\n    MSIRP.bind(void 0, 0),\n    MSIRP.bind(void 0, 1),\n    ALIGNRP,\n    RTDG,\n    MIAP.bind(void 0, 0),\n    MIAP.bind(void 0, 1),\n    NPUSHB,\n    NPUSHW,\n    WS,\n    RS,\n    WCVTP,\n    RCVT,\n    GC.bind(void 0, 0),\n    GC.bind(void 0, 1),\n    void 0,\n    MD.bind(void 0, 0),\n    MD.bind(void 0, 1),\n    MPPEM,\n    void 0,\n    FLIPON,\n    void 0,\n    void 0,\n    LT,\n    LTEQ,\n    GT,\n    GTEQ,\n    EQ,\n    NEQ,\n    ODD,\n    EVEN,\n    IF,\n    EIF,\n    AND,\n    OR,\n    NOT,\n    DELTAP123.bind(void 0, 1),\n    SDB,\n    SDS,\n    ADD,\n    SUB,\n    DIV,\n    MUL,\n    ABS,\n    NEG,\n    FLOOR,\n    CEILING,\n    ROUND.bind(void 0, 0),\n    ROUND.bind(void 0, 1),\n    ROUND.bind(void 0, 2),\n    ROUND.bind(void 0, 3),\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    WCVTF,\n    DELTAP123.bind(void 0, 2),\n    DELTAP123.bind(void 0, 3),\n    DELTAC123.bind(void 0, 1),\n    DELTAC123.bind(void 0, 2),\n    DELTAC123.bind(void 0, 3),\n    SROUND,\n    S45ROUND,\n    void 0,\n    void 0,\n    ROFF,\n    void 0,\n    RUTG,\n    RDTG,\n    POP,\n    POP,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    SCANCTRL,\n    SDPVTL.bind(void 0, 0),\n    SDPVTL.bind(void 0, 1),\n    GETINFO,\n    void 0,\n    ROLL,\n    MAX,\n    MIN,\n    SCANTYPE,\n    INSTCTRL,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    void 0,\n    PUSHB.bind(void 0, 1),\n    PUSHB.bind(void 0, 2),\n    PUSHB.bind(void 0, 3),\n    PUSHB.bind(void 0, 4),\n    PUSHB.bind(void 0, 5),\n    PUSHB.bind(void 0, 6),\n    PUSHB.bind(void 0, 7),\n    PUSHB.bind(void 0, 8),\n    PUSHW.bind(void 0, 1),\n    PUSHW.bind(void 0, 2),\n    PUSHW.bind(void 0, 3),\n    PUSHW.bind(void 0, 4),\n    PUSHW.bind(void 0, 5),\n    PUSHW.bind(void 0, 6),\n    PUSHW.bind(void 0, 7),\n    PUSHW.bind(void 0, 8),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 0, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 0, 1, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 0, 1, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 0, 1, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 0, 3),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 0),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 1),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 2),\n    MDRP_MIRP.bind(void 0, 1, 1, 1, 1, 3)\n];\nfunction Token(char) {\n    this.char = char;\n    this.state = {};\n    this.activeState = null;\n}\nfunction ContextRange(startIndex, endOffset, contextName) {\n    this.contextName = contextName;\n    this.startIndex = startIndex;\n    this.endOffset = endOffset;\n}\nfunction ContextChecker(contextName, checkStart, checkEnd) {\n    this.contextName = contextName;\n    this.openRange = null;\n    this.ranges = [];\n    this.checkStart = checkStart;\n    this.checkEnd = checkEnd;\n}\nfunction ContextParams(context, currentIndex) {\n    this.context = context;\n    this.index = currentIndex;\n    this.length = context.length;\n    this.current = context[currentIndex];\n    this.backtrack = context.slice(0, currentIndex);\n    this.lookahead = context.slice(currentIndex + 1);\n}\nfunction Event(eventId) {\n    this.eventId = eventId;\n    this.subscribers = [];\n}\nfunction initializeCoreEvents(events) {\n    var this$1 = this;\n    var coreEvents = [\n        \"start\",\n        \"end\",\n        \"next\",\n        \"newToken\",\n        \"contextStart\",\n        \"contextEnd\",\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\",\n        \"updateContextsRanges\"\n    ];\n    coreEvents.forEach(function(eventId) {\n        Object.defineProperty(this$1.events, eventId, {\n            value: new Event(eventId)\n        });\n    });\n    if (!!events) {\n        coreEvents.forEach(function(eventId) {\n            var event = events[eventId];\n            if (typeof event === \"function\") {\n                this$1.events[eventId].subscribe(event);\n            }\n        });\n    }\n    var requiresContextUpdate = [\n        \"insertToken\",\n        \"removeToken\",\n        \"removeRange\",\n        \"replaceToken\",\n        \"replaceRange\",\n        \"composeRUD\"\n    ];\n    requiresContextUpdate.forEach(function(eventId) {\n        this$1.events[eventId].subscribe(this$1.updateContextsRanges);\n    });\n}\nfunction Tokenizer(events) {\n    this.tokens = [];\n    this.registeredContexts = {};\n    this.contextCheckers = [];\n    this.events = {};\n    this.registeredModifiers = [];\n    initializeCoreEvents.call(this, events);\n}\nToken.prototype.setState = function(key, value) {\n    this.state[key] = value;\n    this.activeState = {\n        key,\n        value: this.state[key]\n    };\n    return this.activeState;\n};\nToken.prototype.getState = function(stateId) {\n    return this.state[stateId] || null;\n};\nTokenizer.prototype.inboundIndex = function(index) {\n    return index >= 0 && index < this.tokens.length;\n};\nTokenizer.prototype.composeRUD = function(RUDs) {\n    var this$1 = this;\n    var silent = true;\n    var state = RUDs.map(function(RUD) {\n        return this$1[RUD[0]].apply(this$1, RUD.slice(1).concat(silent));\n    });\n    var hasFAILObject = function(obj) {\n        return typeof obj === \"object\" && obj.hasOwnProperty(\"FAIL\");\n    };\n    if (state.every(hasFAILObject)) {\n        return {\n            FAIL: \"composeRUD: one or more operations hasn't completed successfully\",\n            report: state.filter(hasFAILObject)\n        };\n    }\n    this.dispatch(\"composeRUD\", [\n        state.filter(function(op) {\n            return !hasFAILObject(op);\n        })\n    ]);\n};\nTokenizer.prototype.replaceRange = function(startIndex, offset, tokens, silent) {\n    offset = offset !== null ? offset : this.tokens.length;\n    var isTokenType = tokens.every(function(token) {\n        return token instanceof Token;\n    });\n    if (!isNaN(startIndex) && this.inboundIndex(startIndex) && isTokenType) {\n        var replaced = this.tokens.splice.apply(this.tokens, [\n            startIndex,\n            offset\n        ].concat(tokens));\n        if (!silent) {\n            this.dispatch(\"replaceToken\", [\n                startIndex,\n                offset,\n                tokens\n            ]);\n        }\n        return [\n            replaced,\n            tokens\n        ];\n    } else {\n        return {\n            FAIL: \"replaceRange: invalid tokens or startIndex.\"\n        };\n    }\n};\nTokenizer.prototype.replaceToken = function(index, token, silent) {\n    if (!isNaN(index) && this.inboundIndex(index) && token instanceof Token) {\n        var replaced = this.tokens.splice(index, 1, token);\n        if (!silent) {\n            this.dispatch(\"replaceToken\", [\n                index,\n                token\n            ]);\n        }\n        return [\n            replaced[0],\n            token\n        ];\n    } else {\n        return {\n            FAIL: \"replaceToken: invalid token or index.\"\n        };\n    }\n};\nTokenizer.prototype.removeRange = function(startIndex, offset, silent) {\n    offset = !isNaN(offset) ? offset : this.tokens.length;\n    var tokens = this.tokens.splice(startIndex, offset);\n    if (!silent) {\n        this.dispatch(\"removeRange\", [\n            tokens,\n            startIndex,\n            offset\n        ]);\n    }\n    return tokens;\n};\nTokenizer.prototype.removeToken = function(index, silent) {\n    if (!isNaN(index) && this.inboundIndex(index)) {\n        var token = this.tokens.splice(index, 1);\n        if (!silent) {\n            this.dispatch(\"removeToken\", [\n                token,\n                index\n            ]);\n        }\n        return token;\n    } else {\n        return {\n            FAIL: \"removeToken: invalid token index.\"\n        };\n    }\n};\nTokenizer.prototype.insertToken = function(tokens, index, silent) {\n    var tokenType = tokens.every(function(token) {\n        return token instanceof Token;\n    });\n    if (tokenType) {\n        this.tokens.splice.apply(this.tokens, [\n            index,\n            0\n        ].concat(tokens));\n        if (!silent) {\n            this.dispatch(\"insertToken\", [\n                tokens,\n                index\n            ]);\n        }\n        return tokens;\n    } else {\n        return {\n            FAIL: \"insertToken: invalid token(s).\"\n        };\n    }\n};\nTokenizer.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.events.newToken.subscribe(function(token, contextParams) {\n        var conditionParams = [\n            token,\n            contextParams\n        ];\n        var canApplyModifier = condition === null || condition.apply(this, conditionParams) === true;\n        var modifierParams = [\n            token,\n            contextParams\n        ];\n        if (canApplyModifier) {\n            var newStateValue = modifier.apply(this, modifierParams);\n            token.setState(modifierId, newStateValue);\n        }\n    });\n    this.registeredModifiers.push(modifierId);\n};\nEvent.prototype.subscribe = function(eventHandler) {\n    if (typeof eventHandler === \"function\") {\n        return this.subscribers.push(eventHandler) - 1;\n    } else {\n        return {\n            FAIL: \"invalid '\" + this.eventId + \"' event handler\"\n        };\n    }\n};\nEvent.prototype.unsubscribe = function(subsId) {\n    this.subscribers.splice(subsId, 1);\n};\nContextParams.prototype.setCurrentIndex = function(index) {\n    this.index = index;\n    this.current = this.context[index];\n    this.backtrack = this.context.slice(0, index);\n    this.lookahead = this.context.slice(index + 1);\n};\nContextParams.prototype.get = function(offset) {\n    switch(true){\n        case offset === 0:\n            return this.current;\n        case offset < 0 && Math.abs(offset) <= this.backtrack.length:\n            return this.backtrack.slice(offset)[0];\n        case offset > 0 && offset <= this.lookahead.length:\n            return this.lookahead[offset - 1];\n        default:\n            return null;\n    }\n};\nTokenizer.prototype.rangeToText = function(range) {\n    if (range instanceof ContextRange) {\n        return this.getRangeTokens(range).map(function(token) {\n            return token.char;\n        }).join(\"\");\n    }\n};\nTokenizer.prototype.getText = function() {\n    return this.tokens.map(function(token) {\n        return token.char;\n    }).join(\"\");\n};\nTokenizer.prototype.getContext = function(contextName) {\n    var context = this.registeredContexts[contextName];\n    return !!context ? context : null;\n};\nTokenizer.prototype.on = function(eventName, eventHandler) {\n    var event = this.events[eventName];\n    if (!!event) {\n        return event.subscribe(eventHandler);\n    } else {\n        return null;\n    }\n};\nTokenizer.prototype.dispatch = function(eventName, args) {\n    var this$1 = this;\n    var event = this.events[eventName];\n    if (event instanceof Event) {\n        event.subscribers.forEach(function(subscriber) {\n            subscriber.apply(this$1, args || []);\n        });\n    }\n};\nTokenizer.prototype.registerContextChecker = function(contextName, contextStartCheck, contextEndCheck) {\n    if (!!this.getContext(contextName)) {\n        return {\n            FAIL: \"context name '\" + contextName + \"' is already registered.\"\n        };\n    }\n    if (typeof contextStartCheck !== \"function\") {\n        return {\n            FAIL: \"missing context start check.\"\n        };\n    }\n    if (typeof contextEndCheck !== \"function\") {\n        return {\n            FAIL: \"missing context end check.\"\n        };\n    }\n    var contextCheckers = new ContextChecker(contextName, contextStartCheck, contextEndCheck);\n    this.registeredContexts[contextName] = contextCheckers;\n    this.contextCheckers.push(contextCheckers);\n    return contextCheckers;\n};\nTokenizer.prototype.getRangeTokens = function(range) {\n    var endIndex = range.startIndex + range.endOffset;\n    return [].concat(this.tokens.slice(range.startIndex, endIndex));\n};\nTokenizer.prototype.getContextRanges = function(contextName) {\n    var context = this.getContext(contextName);\n    if (!!context) {\n        return context.ranges;\n    } else {\n        return {\n            FAIL: \"context checker '\" + contextName + \"' is not registered.\"\n        };\n    }\n};\nTokenizer.prototype.resetContextsRanges = function() {\n    var registeredContexts = this.registeredContexts;\n    for(var contextName in registeredContexts){\n        if (registeredContexts.hasOwnProperty(contextName)) {\n            var context = registeredContexts[contextName];\n            context.ranges = [];\n        }\n    }\n};\nTokenizer.prototype.updateContextsRanges = function() {\n    this.resetContextsRanges();\n    var chars = this.tokens.map(function(token) {\n        return token.char;\n    });\n    for(var i = 0; i < chars.length; i++){\n        var contextParams = new ContextParams(chars, i);\n        this.runContextCheck(contextParams);\n    }\n    this.dispatch(\"updateContextsRanges\", [\n        this.registeredContexts\n    ]);\n};\nTokenizer.prototype.setEndOffset = function(offset, contextName) {\n    var startIndex = this.getContext(contextName).openRange.startIndex;\n    var range = new ContextRange(startIndex, offset, contextName);\n    var ranges = this.getContext(contextName).ranges;\n    range.rangeId = contextName + \".\" + ranges.length;\n    ranges.push(range);\n    this.getContext(contextName).openRange = null;\n    return range;\n};\nTokenizer.prototype.runContextCheck = function(contextParams) {\n    var this$1 = this;\n    var index = contextParams.index;\n    this.contextCheckers.forEach(function(contextChecker) {\n        var contextName = contextChecker.contextName;\n        var openRange = this$1.getContext(contextName).openRange;\n        if (!openRange && contextChecker.checkStart(contextParams)) {\n            openRange = new ContextRange(index, null, contextName);\n            this$1.getContext(contextName).openRange = openRange;\n            this$1.dispatch(\"contextStart\", [\n                contextName,\n                index\n            ]);\n        }\n        if (!!openRange && contextChecker.checkEnd(contextParams)) {\n            var offset = index - openRange.startIndex + 1;\n            var range = this$1.setEndOffset(offset, contextName);\n            this$1.dispatch(\"contextEnd\", [\n                contextName,\n                range\n            ]);\n        }\n    });\n};\nTokenizer.prototype.tokenize = function(text) {\n    this.tokens = [];\n    this.resetContextsRanges();\n    var chars = Array.from(text);\n    this.dispatch(\"start\");\n    for(var i = 0; i < chars.length; i++){\n        var char = chars[i];\n        var contextParams = new ContextParams(chars, i);\n        this.dispatch(\"next\", [\n            contextParams\n        ]);\n        this.runContextCheck(contextParams);\n        var token = new Token(char);\n        this.tokens.push(token);\n        this.dispatch(\"newToken\", [\n            token,\n            contextParams\n        ]);\n    }\n    this.dispatch(\"end\", [\n        this.tokens\n    ]);\n    return this.tokens;\n};\nfunction isArabicChar(c2) {\n    return /[\\u0600-\\u065F\\u066A-\\u06D2\\u06FA-\\u06FF]/.test(c2);\n}\nfunction isIsolatedArabicChar(char) {\n    return /[\\u0630\\u0690\\u0621\\u0631\\u0661\\u0671\\u0622\\u0632\\u0672\\u0692\\u06C2\\u0623\\u0673\\u0693\\u06C3\\u0624\\u0694\\u06C4\\u0625\\u0675\\u0695\\u06C5\\u06E5\\u0676\\u0696\\u06C6\\u0627\\u0677\\u0697\\u06C7\\u0648\\u0688\\u0698\\u06C8\\u0689\\u0699\\u06C9\\u068A\\u06CA\\u066B\\u068B\\u06CB\\u068C\\u068D\\u06CD\\u06FD\\u068E\\u06EE\\u06FE\\u062F\\u068F\\u06CF\\u06EF]/.test(char);\n}\nfunction isTashkeelArabicChar(char) {\n    return /[\\u0600-\\u0605\\u060C-\\u060E\\u0610-\\u061B\\u061E\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED]/.test(char);\n}\nfunction isLatinChar(c2) {\n    return /[A-z]/.test(c2);\n}\nfunction isWhiteSpace(c2) {\n    return /\\s/.test(c2);\n}\nfunction FeatureQuery(font) {\n    this.font = font;\n    this.features = {};\n}\nfunction SubstitutionAction(action) {\n    this.id = action.id;\n    this.tag = action.tag;\n    this.substitution = action.substitution;\n}\nfunction lookupCoverage(glyphIndex, coverage) {\n    if (!glyphIndex) {\n        return -1;\n    }\n    switch(coverage.format){\n        case 1:\n            return coverage.glyphs.indexOf(glyphIndex);\n        case 2:\n            var ranges = coverage.ranges;\n            for(var i = 0; i < ranges.length; i++){\n                var range = ranges[i];\n                if (glyphIndex >= range.start && glyphIndex <= range.end) {\n                    var offset = glyphIndex - range.start;\n                    return range.index + offset;\n                }\n            }\n            break;\n        default:\n            return -1;\n    }\n    return -1;\n}\nfunction singleSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return glyphIndex + subtable.deltaGlyphId;\n}\nfunction singleSubstitutionFormat2(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return subtable.substitute[substituteIndex];\n}\nfunction lookupCoverageList(coverageList, contextParams) {\n    var lookupList = [];\n    for(var i = 0; i < coverageList.length; i++){\n        var coverage = coverageList[i];\n        var glyphIndex = contextParams.current;\n        glyphIndex = Array.isArray(glyphIndex) ? glyphIndex[0] : glyphIndex;\n        var lookupIndex = lookupCoverage(glyphIndex, coverage);\n        if (lookupIndex !== -1) {\n            lookupList.push(lookupIndex);\n        }\n    }\n    if (lookupList.length !== coverageList.length) {\n        return -1;\n    }\n    return lookupList;\n}\nfunction chainingSubstitutionFormat3(contextParams, subtable) {\n    var lookupsCount = subtable.inputCoverage.length + subtable.lookaheadCoverage.length + subtable.backtrackCoverage.length;\n    if (contextParams.context.length < lookupsCount) {\n        return [];\n    }\n    var inputLookups = lookupCoverageList(subtable.inputCoverage, contextParams);\n    if (inputLookups === -1) {\n        return [];\n    }\n    var lookaheadOffset = subtable.inputCoverage.length - 1;\n    if (contextParams.lookahead.length < subtable.lookaheadCoverage.length) {\n        return [];\n    }\n    var lookaheadContext = contextParams.lookahead.slice(lookaheadOffset);\n    while(lookaheadContext.length && isTashkeelArabicChar(lookaheadContext[0].char)){\n        lookaheadContext.shift();\n    }\n    var lookaheadParams = new ContextParams(lookaheadContext, 0);\n    var lookaheadLookups = lookupCoverageList(subtable.lookaheadCoverage, lookaheadParams);\n    var backtrackContext = [].concat(contextParams.backtrack);\n    backtrackContext.reverse();\n    while(backtrackContext.length && isTashkeelArabicChar(backtrackContext[0].char)){\n        backtrackContext.shift();\n    }\n    if (backtrackContext.length < subtable.backtrackCoverage.length) {\n        return [];\n    }\n    var backtrackParams = new ContextParams(backtrackContext, 0);\n    var backtrackLookups = lookupCoverageList(subtable.backtrackCoverage, backtrackParams);\n    var contextRulesMatch = inputLookups.length === subtable.inputCoverage.length && lookaheadLookups.length === subtable.lookaheadCoverage.length && backtrackLookups.length === subtable.backtrackCoverage.length;\n    var substitutions = [];\n    if (contextRulesMatch) {\n        for(var i = 0; i < subtable.lookupRecords.length; i++){\n            var lookupRecord = subtable.lookupRecords[i];\n            var lookupListIndex = lookupRecord.lookupListIndex;\n            var lookupTable = this.getLookupByIndex(lookupListIndex);\n            for(var s = 0; s < lookupTable.subtables.length; s++){\n                var subtable$1 = lookupTable.subtables[s];\n                var lookup = this.getLookupMethod(lookupTable, subtable$1);\n                var substitutionType = this.getSubstitutionType(lookupTable, subtable$1);\n                if (substitutionType === \"12\") {\n                    for(var n = 0; n < inputLookups.length; n++){\n                        var glyphIndex = contextParams.get(n);\n                        var substitution = lookup(glyphIndex);\n                        if (substitution) {\n                            substitutions.push(substitution);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return substitutions;\n}\nfunction ligatureSubstitutionFormat1(contextParams, subtable) {\n    var glyphIndex = contextParams.current;\n    var ligSetIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (ligSetIndex === -1) {\n        return null;\n    }\n    var ligature;\n    var ligatureSet = subtable.ligatureSets[ligSetIndex];\n    for(var s = 0; s < ligatureSet.length; s++){\n        ligature = ligatureSet[s];\n        for(var l = 0; l < ligature.components.length; l++){\n            var lookaheadItem = contextParams.lookahead[l];\n            var component = ligature.components[l];\n            if (lookaheadItem !== component) {\n                break;\n            }\n            if (l === ligature.components.length - 1) {\n                return ligature;\n            }\n        }\n    }\n    return null;\n}\nfunction decompositionSubstitutionFormat1(glyphIndex, subtable) {\n    var substituteIndex = lookupCoverage(glyphIndex, subtable.coverage);\n    if (substituteIndex === -1) {\n        return null;\n    }\n    return subtable.sequences[substituteIndex];\n}\nFeatureQuery.prototype.getDefaultScriptFeaturesIndexes = function() {\n    var scripts = this.font.tables.gsub.scripts;\n    for(var s = 0; s < scripts.length; s++){\n        var script = scripts[s];\n        if (script.tag === \"DFLT\") {\n            return script.script.defaultLangSys.featureIndexes;\n        }\n    }\n    return [];\n};\nFeatureQuery.prototype.getScriptFeaturesIndexes = function(scriptTag) {\n    var tables = this.font.tables;\n    if (!tables.gsub) {\n        return [];\n    }\n    if (!scriptTag) {\n        return this.getDefaultScriptFeaturesIndexes();\n    }\n    var scripts = this.font.tables.gsub.scripts;\n    for(var i = 0; i < scripts.length; i++){\n        var script = scripts[i];\n        if (script.tag === scriptTag && script.script.defaultLangSys) {\n            return script.script.defaultLangSys.featureIndexes;\n        } else {\n            var langSysRecords = script.langSysRecords;\n            if (!!langSysRecords) {\n                for(var j2 = 0; j2 < langSysRecords.length; j2++){\n                    var langSysRecord = langSysRecords[j2];\n                    if (langSysRecord.tag === scriptTag) {\n                        var langSys = langSysRecord.langSys;\n                        return langSys.featureIndexes;\n                    }\n                }\n            }\n        }\n    }\n    return this.getDefaultScriptFeaturesIndexes();\n};\nFeatureQuery.prototype.mapTagsToFeatures = function(features, scriptTag) {\n    var tags = {};\n    for(var i = 0; i < features.length; i++){\n        var tag = features[i].tag;\n        var feature = features[i].feature;\n        tags[tag] = feature;\n    }\n    this.features[scriptTag].tags = tags;\n};\nFeatureQuery.prototype.getScriptFeatures = function(scriptTag) {\n    var features = this.features[scriptTag];\n    if (this.features.hasOwnProperty(scriptTag)) {\n        return features;\n    }\n    var featuresIndexes = this.getScriptFeaturesIndexes(scriptTag);\n    if (!featuresIndexes) {\n        return null;\n    }\n    var gsub2 = this.font.tables.gsub;\n    features = featuresIndexes.map(function(index) {\n        return gsub2.features[index];\n    });\n    this.features[scriptTag] = features;\n    this.mapTagsToFeatures(features, scriptTag);\n    return features;\n};\nFeatureQuery.prototype.getSubstitutionType = function(lookupTable, subtable) {\n    var lookupType = lookupTable.lookupType.toString();\n    var substFormat = subtable.substFormat.toString();\n    return lookupType + substFormat;\n};\nFeatureQuery.prototype.getLookupMethod = function(lookupTable, subtable) {\n    var this$1 = this;\n    var substitutionType = this.getSubstitutionType(lookupTable, subtable);\n    switch(substitutionType){\n        case \"11\":\n            return function(glyphIndex) {\n                return singleSubstitutionFormat1.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        case \"12\":\n            return function(glyphIndex) {\n                return singleSubstitutionFormat2.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        case \"63\":\n            return function(contextParams) {\n                return chainingSubstitutionFormat3.apply(this$1, [\n                    contextParams,\n                    subtable\n                ]);\n            };\n        case \"41\":\n            return function(contextParams) {\n                return ligatureSubstitutionFormat1.apply(this$1, [\n                    contextParams,\n                    subtable\n                ]);\n            };\n        case \"21\":\n            return function(glyphIndex) {\n                return decompositionSubstitutionFormat1.apply(this$1, [\n                    glyphIndex,\n                    subtable\n                ]);\n            };\n        default:\n            throw new Error(\"lookupType: \" + lookupTable.lookupType + \" - substFormat: \" + subtable.substFormat + \" is not yet supported\");\n    }\n};\nFeatureQuery.prototype.lookupFeature = function(query) {\n    var contextParams = query.contextParams;\n    var currentIndex = contextParams.index;\n    var feature = this.getFeature({\n        tag: query.tag,\n        script: query.script\n    });\n    if (!feature) {\n        return new Error(\"font '\" + this.font.names.fullName.en + \"' doesn't support feature '\" + query.tag + \"' for script '\" + query.script + \"'.\");\n    }\n    var lookups = this.getFeatureLookups(feature);\n    var substitutions = [].concat(contextParams.context);\n    for(var l = 0; l < lookups.length; l++){\n        var lookupTable = lookups[l];\n        var subtables = this.getLookupSubtables(lookupTable);\n        for(var s = 0; s < subtables.length; s++){\n            var subtable = subtables[s];\n            var substType = this.getSubstitutionType(lookupTable, subtable);\n            var lookup = this.getLookupMethod(lookupTable, subtable);\n            var substitution = void 0;\n            switch(substType){\n                case \"11\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 11,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"12\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 12,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"63\":\n                    substitution = lookup(contextParams);\n                    if (Array.isArray(substitution) && substitution.length) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 63,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"41\":\n                    substitution = lookup(contextParams);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 41,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n                case \"21\":\n                    substitution = lookup(contextParams.current);\n                    if (substitution) {\n                        substitutions.splice(currentIndex, 1, new SubstitutionAction({\n                            id: 21,\n                            tag: query.tag,\n                            substitution\n                        }));\n                    }\n                    break;\n            }\n            contextParams = new ContextParams(substitutions, currentIndex);\n            if (Array.isArray(substitution) && !substitution.length) {\n                continue;\n            }\n            substitution = null;\n        }\n    }\n    return substitutions.length ? substitutions : null;\n};\nFeatureQuery.prototype.supports = function(query) {\n    if (!query.script) {\n        return false;\n    }\n    this.getScriptFeatures(query.script);\n    var supportedScript = this.features.hasOwnProperty(query.script);\n    if (!query.tag) {\n        return supportedScript;\n    }\n    var supportedFeature = this.features[query.script].some(function(feature) {\n        return feature.tag === query.tag;\n    });\n    return supportedScript && supportedFeature;\n};\nFeatureQuery.prototype.getLookupSubtables = function(lookupTable) {\n    return lookupTable.subtables || null;\n};\nFeatureQuery.prototype.getLookupByIndex = function(index) {\n    var lookups = this.font.tables.gsub.lookups;\n    return lookups[index] || null;\n};\nFeatureQuery.prototype.getFeatureLookups = function(feature) {\n    return feature.lookupListIndexes.map(this.getLookupByIndex.bind(this));\n};\nFeatureQuery.prototype.getFeature = function getFeature(query) {\n    if (!this.font) {\n        return {\n            FAIL: \"No font was found\"\n        };\n    }\n    if (!this.features.hasOwnProperty(query.script)) {\n        this.getScriptFeatures(query.script);\n    }\n    var scriptFeatures = this.features[query.script];\n    if (!scriptFeatures) {\n        return {\n            FAIL: \"No feature for script \" + query.script\n        };\n    }\n    if (!scriptFeatures.tags[query.tag]) {\n        return null;\n    }\n    return this.features[query.script].tags[query.tag];\n};\nfunction arabicWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return prevChar === null && isArabicChar(char) || !isArabicChar(prevChar) && isArabicChar(char);\n}\nfunction arabicWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return nextChar === null || !isArabicChar(nextChar);\n}\nvar arabicWordCheck = {\n    startCheck: arabicWordStartCheck,\n    endCheck: arabicWordEndCheck\n};\nfunction arabicSentenceStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return (isArabicChar(char) || isTashkeelArabicChar(char)) && !isArabicChar(prevChar);\n}\nfunction arabicSentenceEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    switch(true){\n        case nextChar === null:\n            return true;\n        case !isArabicChar(nextChar) && !isTashkeelArabicChar(nextChar):\n            var nextIsWhitespace = isWhiteSpace(nextChar);\n            if (!nextIsWhitespace) {\n                return true;\n            }\n            if (nextIsWhitespace) {\n                var arabicCharAhead = false;\n                arabicCharAhead = contextParams.lookahead.some(function(c2) {\n                    return isArabicChar(c2) || isTashkeelArabicChar(c2);\n                });\n                if (!arabicCharAhead) {\n                    return true;\n                }\n            }\n            break;\n        default:\n            return false;\n    }\n}\nvar arabicSentenceCheck = {\n    startCheck: arabicSentenceStartCheck,\n    endCheck: arabicSentenceEndCheck\n};\nfunction singleSubstitutionFormat1$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\nfunction singleSubstitutionFormat2$1(action, tokens, index) {\n    tokens[index].setState(action.tag, action.substitution);\n}\nfunction chainingSubstitutionFormat3$1(action, tokens, index) {\n    action.substitution.forEach(function(subst, offset) {\n        var token = tokens[index + offset];\n        token.setState(action.tag, subst);\n    });\n}\nfunction ligatureSubstitutionFormat1$1(action, tokens, index) {\n    var token = tokens[index];\n    token.setState(action.tag, action.substitution.ligGlyph);\n    var compsCount = action.substitution.components.length;\n    for(var i = 0; i < compsCount; i++){\n        token = tokens[index + i + 1];\n        token.setState(\"deleted\", true);\n    }\n}\nvar SUBSTITUTIONS = {\n    11: singleSubstitutionFormat1$1,\n    12: singleSubstitutionFormat2$1,\n    63: chainingSubstitutionFormat3$1,\n    41: ligatureSubstitutionFormat1$1\n};\nfunction applySubstitution(action, tokens, index) {\n    if (action instanceof SubstitutionAction && SUBSTITUTIONS[action.id]) {\n        SUBSTITUTIONS[action.id](action, tokens, index);\n    }\n}\nfunction willConnectPrev(charContextParams) {\n    var backtrack = [].concat(charContextParams.backtrack);\n    for(var i = backtrack.length - 1; i >= 0; i--){\n        var prevChar = backtrack[i];\n        var isolated = isIsolatedArabicChar(prevChar);\n        var tashkeel = isTashkeelArabicChar(prevChar);\n        if (!isolated && !tashkeel) {\n            return true;\n        }\n        if (isolated) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction willConnectNext(charContextParams) {\n    if (isIsolatedArabicChar(charContextParams.current)) {\n        return false;\n    }\n    for(var i = 0; i < charContextParams.lookahead.length; i++){\n        var nextChar = charContextParams.lookahead[i];\n        var tashkeel = isTashkeelArabicChar(nextChar);\n        if (!tashkeel) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction arabicPresentationForms(range) {\n    var this$1 = this;\n    var script = \"arab\";\n    var tags = this.featuresTags[script];\n    var tokens = this.tokenizer.getRangeTokens(range);\n    if (tokens.length === 1) {\n        return;\n    }\n    var contextParams = new ContextParams(tokens.map(function(token) {\n        return token.getState(\"glyphIndex\");\n    }), 0);\n    var charContextParams = new ContextParams(tokens.map(function(token) {\n        return token.char;\n    }), 0);\n    tokens.forEach(function(token, index) {\n        if (isTashkeelArabicChar(token.char)) {\n            return;\n        }\n        contextParams.setCurrentIndex(index);\n        charContextParams.setCurrentIndex(index);\n        var CONNECT = 0;\n        if (willConnectPrev(charContextParams)) {\n            CONNECT |= 1;\n        }\n        if (willConnectNext(charContextParams)) {\n            CONNECT |= 2;\n        }\n        var tag;\n        switch(CONNECT){\n            case 1:\n                tag = \"fina\";\n                break;\n            case 2:\n                tag = \"init\";\n                break;\n            case 3:\n                tag = \"medi\";\n                break;\n        }\n        if (tags.indexOf(tag) === -1) {\n            return;\n        }\n        var substitutions = this$1.query.lookupFeature({\n            tag,\n            script,\n            contextParams\n        });\n        if (substitutions instanceof Error) {\n            return console.info(substitutions.message);\n        }\n        substitutions.forEach(function(action, index2) {\n            if (action instanceof SubstitutionAction) {\n                applySubstitution(action, tokens, index2);\n                contextParams.context[index2] = action.substitution;\n            }\n        });\n    });\n}\nfunction getContextParams(tokens, index) {\n    var context = tokens.map(function(token) {\n        return token.activeState.value;\n    });\n    return new ContextParams(context, index || 0);\n}\nfunction arabicRequiredLigatures(range) {\n    var this$1 = this;\n    var script = \"arab\";\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams(tokens);\n    contextParams.context.forEach(function(glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: \"rlig\",\n            script,\n            contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(function(action) {\n                return applySubstitution(action, tokens, index);\n            });\n            contextParams = getContextParams(tokens);\n        }\n    });\n}\nfunction latinWordStartCheck(contextParams) {\n    var char = contextParams.current;\n    var prevChar = contextParams.get(-1);\n    return prevChar === null && isLatinChar(char) || !isLatinChar(prevChar) && isLatinChar(char);\n}\nfunction latinWordEndCheck(contextParams) {\n    var nextChar = contextParams.get(1);\n    return nextChar === null || !isLatinChar(nextChar);\n}\nvar latinWordCheck = {\n    startCheck: latinWordStartCheck,\n    endCheck: latinWordEndCheck\n};\nfunction getContextParams$1(tokens, index) {\n    var context = tokens.map(function(token) {\n        return token.activeState.value;\n    });\n    return new ContextParams(context, index || 0);\n}\nfunction latinLigature(range) {\n    var this$1 = this;\n    var script = \"latn\";\n    var tokens = this.tokenizer.getRangeTokens(range);\n    var contextParams = getContextParams$1(tokens);\n    contextParams.context.forEach(function(glyphIndex, index) {\n        contextParams.setCurrentIndex(index);\n        var substitutions = this$1.query.lookupFeature({\n            tag: \"liga\",\n            script,\n            contextParams\n        });\n        if (substitutions.length) {\n            substitutions.forEach(function(action) {\n                return applySubstitution(action, tokens, index);\n            });\n            contextParams = getContextParams$1(tokens);\n        }\n    });\n}\nfunction Bidi(baseDir) {\n    this.baseDir = baseDir || \"ltr\";\n    this.tokenizer = new Tokenizer();\n    this.featuresTags = {};\n}\nBidi.prototype.setText = function(text) {\n    this.text = text;\n};\nBidi.prototype.contextChecks = {\n    latinWordCheck,\n    arabicWordCheck,\n    arabicSentenceCheck\n};\nfunction registerContextChecker(checkId) {\n    var check2 = this.contextChecks[checkId + \"Check\"];\n    return this.tokenizer.registerContextChecker(checkId, check2.startCheck, check2.endCheck);\n}\nfunction tokenizeText() {\n    registerContextChecker.call(this, \"latinWord\");\n    registerContextChecker.call(this, \"arabicWord\");\n    registerContextChecker.call(this, \"arabicSentence\");\n    return this.tokenizer.tokenize(this.text);\n}\nfunction reverseArabicSentences() {\n    var this$1 = this;\n    var ranges = this.tokenizer.getContextRanges(\"arabicSentence\");\n    ranges.forEach(function(range) {\n        var rangeTokens = this$1.tokenizer.getRangeTokens(range);\n        this$1.tokenizer.replaceRange(range.startIndex, range.endOffset, rangeTokens.reverse());\n    });\n}\nBidi.prototype.registerFeatures = function(script, tags) {\n    var this$1 = this;\n    var supportedTags = tags.filter(function(tag) {\n        return this$1.query.supports({\n            script,\n            tag\n        });\n    });\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        this.featuresTags[script] = supportedTags;\n    } else {\n        this.featuresTags[script] = this.featuresTags[script].concat(supportedTags);\n    }\n};\nBidi.prototype.applyFeatures = function(font, features) {\n    if (!font) {\n        throw new Error(\"No valid font was provided to apply features\");\n    }\n    if (!this.query) {\n        this.query = new FeatureQuery(font);\n    }\n    for(var f = 0; f < features.length; f++){\n        var feature = features[f];\n        if (!this.query.supports({\n            script: feature.script\n        })) {\n            continue;\n        }\n        this.registerFeatures(feature.script, feature.tags);\n    }\n};\nBidi.prototype.registerModifier = function(modifierId, condition, modifier) {\n    this.tokenizer.registerModifier(modifierId, condition, modifier);\n};\nfunction checkGlyphIndexStatus() {\n    if (this.tokenizer.registeredModifiers.indexOf(\"glyphIndex\") === -1) {\n        throw new Error(\"glyphIndex modifier is required to apply arabic presentation features.\");\n    }\n}\nfunction applyArabicPresentationForms() {\n    var this$1 = this;\n    var script = \"arab\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n    ranges.forEach(function(range) {\n        arabicPresentationForms.call(this$1, range);\n    });\n}\nfunction applyArabicRequireLigatures() {\n    var this$1 = this;\n    var script = \"arab\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf(\"rlig\") === -1) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"arabicWord\");\n    ranges.forEach(function(range) {\n        arabicRequiredLigatures.call(this$1, range);\n    });\n}\nfunction applyLatinLigatures() {\n    var this$1 = this;\n    var script = \"latn\";\n    if (!this.featuresTags.hasOwnProperty(script)) {\n        return;\n    }\n    var tags = this.featuresTags[script];\n    if (tags.indexOf(\"liga\") === -1) {\n        return;\n    }\n    checkGlyphIndexStatus.call(this);\n    var ranges = this.tokenizer.getContextRanges(\"latinWord\");\n    ranges.forEach(function(range) {\n        latinLigature.call(this$1, range);\n    });\n}\nBidi.prototype.checkContextReady = function(contextId) {\n    return !!this.tokenizer.getContext(contextId);\n};\nBidi.prototype.applyFeaturesToContexts = function() {\n    if (this.checkContextReady(\"arabicWord\")) {\n        applyArabicPresentationForms.call(this);\n        applyArabicRequireLigatures.call(this);\n    }\n    if (this.checkContextReady(\"latinWord\")) {\n        applyLatinLigatures.call(this);\n    }\n    if (this.checkContextReady(\"arabicSentence\")) {\n        reverseArabicSentences.call(this);\n    }\n};\nBidi.prototype.processText = function(text) {\n    if (!this.text || this.text !== text) {\n        this.setText(text);\n        tokenizeText.call(this);\n        this.applyFeaturesToContexts();\n    }\n};\nBidi.prototype.getBidiText = function(text) {\n    this.processText(text);\n    return this.tokenizer.getText();\n};\nBidi.prototype.getTextGlyphs = function(text) {\n    this.processText(text);\n    var indexes = [];\n    for(var i = 0; i < this.tokenizer.tokens.length; i++){\n        var token = this.tokenizer.tokens[i];\n        if (token.state.deleted) {\n            continue;\n        }\n        var index = token.activeState.value;\n        indexes.push(Array.isArray(index) ? index[0] : index);\n    }\n    return indexes;\n};\nfunction Font(options) {\n    options = options || {};\n    options.tables = options.tables || {};\n    if (!options.empty) {\n        checkArgument(options.familyName, \"When creating a new Font object, familyName is required.\");\n        checkArgument(options.styleName, \"When creating a new Font object, styleName is required.\");\n        checkArgument(options.unitsPerEm, \"When creating a new Font object, unitsPerEm is required.\");\n        checkArgument(options.ascender, \"When creating a new Font object, ascender is required.\");\n        checkArgument(options.descender <= 0, \"When creating a new Font object, negative descender value is required.\");\n        this.unitsPerEm = options.unitsPerEm || 1e3;\n        this.ascender = options.ascender;\n        this.descender = options.descender;\n        this.createdTimestamp = options.createdTimestamp;\n        this.tables = Object.assign(options.tables, {\n            os2: Object.assign({\n                usWeightClass: options.weightClass || this.usWeightClasses.MEDIUM,\n                usWidthClass: options.widthClass || this.usWidthClasses.MEDIUM,\n                fsSelection: options.fsSelection || this.fsSelectionValues.REGULAR\n            }, options.tables.os2)\n        });\n    }\n    this.supported = true;\n    this.glyphs = new glyphset.GlyphSet(this, options.glyphs || []);\n    this.encoding = new DefaultEncoding(this);\n    this.position = new Position(this);\n    this.substitution = new Substitution(this);\n    this.tables = this.tables || {};\n    this._push = null;\n    this._hmtxTableData = {};\n    Object.defineProperty(this, \"hinting\", {\n        get: function() {\n            if (this._hinting) {\n                return this._hinting;\n            }\n            if (this.outlinesFormat === \"truetype\") {\n                return this._hinting = new Hinting(this);\n            }\n        }\n    });\n}\nFont.prototype.hasChar = function(c2) {\n    return this.encoding.charToGlyphIndex(c2) !== null;\n};\nFont.prototype.charToGlyphIndex = function(s) {\n    return this.encoding.charToGlyphIndex(s);\n};\nFont.prototype.charToGlyph = function(c2) {\n    var glyphIndex = this.charToGlyphIndex(c2);\n    var glyph = this.glyphs.get(glyphIndex);\n    if (!glyph) {\n        glyph = this.glyphs.get(0);\n    }\n    return glyph;\n};\nFont.prototype.updateFeatures = function(options) {\n    return this.defaultRenderOptions.features.map(function(feature) {\n        if (feature.script === \"latn\") {\n            return {\n                script: \"latn\",\n                tags: feature.tags.filter(function(tag) {\n                    return options[tag];\n                })\n            };\n        } else {\n            return feature;\n        }\n    });\n};\nFont.prototype.stringToGlyphs = function(s, options) {\n    var this$1 = this;\n    var bidi = new Bidi();\n    var charToGlyphIndexMod = function(token) {\n        return this$1.charToGlyphIndex(token.char);\n    };\n    bidi.registerModifier(\"glyphIndex\", null, charToGlyphIndexMod);\n    var features = options ? this.updateFeatures(options.features) : this.defaultRenderOptions.features;\n    bidi.applyFeatures(this, features);\n    var indexes = bidi.getTextGlyphs(s);\n    var length = indexes.length;\n    var glyphs = new Array(length);\n    var notdef = this.glyphs.get(0);\n    for(var i = 0; i < length; i += 1){\n        glyphs[i] = this.glyphs.get(indexes[i]) || notdef;\n    }\n    return glyphs;\n};\nFont.prototype.getKerningValue = function(leftGlyph, rightGlyph) {\n    leftGlyph = leftGlyph.index || leftGlyph;\n    rightGlyph = rightGlyph.index || rightGlyph;\n    var gposKerning = this.position.defaultKerningTables;\n    if (gposKerning) {\n        return this.position.getKerningValue(gposKerning, leftGlyph, rightGlyph);\n    }\n    return this.kerningPairs[leftGlyph + \",\" + rightGlyph] || 0;\n};\nFont.prototype.defaultRenderOptions = {\n    kerning: true,\n    features: [\n        {\n            script: \"arab\",\n            tags: [\n                \"init\",\n                \"medi\",\n                \"fina\",\n                \"rlig\"\n            ]\n        },\n        {\n            script: \"latn\",\n            tags: [\n                \"liga\",\n                \"rlig\"\n            ]\n        }\n    ]\n};\nFont.prototype.forEachGlyph = function(text, x, y, fontSize, options, callback) {\n    x = x !== void 0 ? x : 0;\n    y = y !== void 0 ? y : 0;\n    fontSize = fontSize !== void 0 ? fontSize : 72;\n    options = Object.assign({}, this.defaultRenderOptions, options);\n    var fontScale = 1 / this.unitsPerEm * fontSize;\n    var glyphs = this.stringToGlyphs(text, options);\n    var kerningLookups;\n    if (options.kerning) {\n        var script = options.script || this.position.getDefaultScriptName();\n        kerningLookups = this.position.getKerningTables(script, options.language);\n    }\n    for(var i = 0; i < glyphs.length; i += 1){\n        var glyph = glyphs[i];\n        callback.call(this, glyph, x, y, fontSize, options);\n        if (glyph.advanceWidth) {\n            x += glyph.advanceWidth * fontScale;\n        }\n        if (options.kerning && i < glyphs.length - 1) {\n            var kerningValue = kerningLookups ? this.position.getKerningValue(kerningLookups, glyph.index, glyphs[i + 1].index) : this.getKerningValue(glyph, glyphs[i + 1]);\n            x += kerningValue * fontScale;\n        }\n        if (options.letterSpacing) {\n            x += options.letterSpacing * fontSize;\n        } else if (options.tracking) {\n            x += options.tracking / 1e3 * fontSize;\n        }\n    }\n    return x;\n};\nFont.prototype.getPath = function(text, x, y, fontSize, options) {\n    var fullPath = new Path();\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        fullPath.extend(glyphPath);\n    });\n    return fullPath;\n};\nFont.prototype.getPaths = function(text, x, y, fontSize, options) {\n    var glyphPaths = [];\n    this.forEachGlyph(text, x, y, fontSize, options, function(glyph, gX, gY, gFontSize) {\n        var glyphPath = glyph.getPath(gX, gY, gFontSize, options, this);\n        glyphPaths.push(glyphPath);\n    });\n    return glyphPaths;\n};\nFont.prototype.getAdvanceWidth = function(text, fontSize, options) {\n    return this.forEachGlyph(text, 0, 0, fontSize, options, function() {});\n};\nFont.prototype.fsSelectionValues = {\n    ITALIC: 1,\n    UNDERSCORE: 2,\n    NEGATIVE: 4,\n    OUTLINED: 8,\n    STRIKEOUT: 16,\n    BOLD: 32,\n    REGULAR: 64,\n    USER_TYPO_METRICS: 128,\n    WWS: 256,\n    OBLIQUE: 512\n};\nFont.prototype.usWidthClasses = {\n    ULTRA_CONDENSED: 1,\n    EXTRA_CONDENSED: 2,\n    CONDENSED: 3,\n    SEMI_CONDENSED: 4,\n    MEDIUM: 5,\n    SEMI_EXPANDED: 6,\n    EXPANDED: 7,\n    EXTRA_EXPANDED: 8,\n    ULTRA_EXPANDED: 9\n};\nFont.prototype.usWeightClasses = {\n    THIN: 100,\n    EXTRA_LIGHT: 200,\n    LIGHT: 300,\n    NORMAL: 400,\n    MEDIUM: 500,\n    SEMI_BOLD: 600,\n    BOLD: 700,\n    EXTRA_BOLD: 800,\n    BLACK: 900\n};\nfunction parseCmapTableFormat12(cmap2, p) {\n    p.parseUShort();\n    cmap2.length = p.parseULong();\n    cmap2.language = p.parseULong();\n    var groupCount;\n    cmap2.groupCount = groupCount = p.parseULong();\n    cmap2.glyphIndexMap = {};\n    for(var i = 0; i < groupCount; i += 1){\n        var startCharCode = p.parseULong();\n        var endCharCode = p.parseULong();\n        var startGlyphId = p.parseULong();\n        for(var c2 = startCharCode; c2 <= endCharCode; c2 += 1){\n            cmap2.glyphIndexMap[c2] = startGlyphId;\n            startGlyphId++;\n        }\n    }\n}\nfunction parseCmapTableFormat4(cmap2, p, data, start, offset) {\n    cmap2.length = p.parseUShort();\n    cmap2.language = p.parseUShort();\n    var segCount;\n    cmap2.segCount = segCount = p.parseUShort() >> 1;\n    p.skip(\"uShort\", 3);\n    cmap2.glyphIndexMap = {};\n    var endCountParser = new parse.Parser(data, start + offset + 14);\n    var startCountParser = new parse.Parser(data, start + offset + 16 + segCount * 2);\n    var idDeltaParser = new parse.Parser(data, start + offset + 16 + segCount * 4);\n    var idRangeOffsetParser = new parse.Parser(data, start + offset + 16 + segCount * 6);\n    var glyphIndexOffset = start + offset + 16 + segCount * 8;\n    for(var i = 0; i < segCount - 1; i += 1){\n        var glyphIndex = void 0;\n        var endCount = endCountParser.parseUShort();\n        var startCount = startCountParser.parseUShort();\n        var idDelta = idDeltaParser.parseShort();\n        var idRangeOffset = idRangeOffsetParser.parseUShort();\n        for(var c2 = startCount; c2 <= endCount; c2 += 1){\n            if (idRangeOffset !== 0) {\n                glyphIndexOffset = idRangeOffsetParser.offset + idRangeOffsetParser.relativeOffset - 2;\n                glyphIndexOffset += idRangeOffset;\n                glyphIndexOffset += (c2 - startCount) * 2;\n                glyphIndex = parse.getUShort(data, glyphIndexOffset);\n                if (glyphIndex !== 0) {\n                    glyphIndex = glyphIndex + idDelta & 65535;\n                }\n            } else {\n                glyphIndex = c2 + idDelta & 65535;\n            }\n            cmap2.glyphIndexMap[c2] = glyphIndex;\n        }\n    }\n}\nfunction parseCmapTable(data, start) {\n    var cmap2 = {};\n    cmap2.version = parse.getUShort(data, start);\n    check.argument(cmap2.version === 0, \"cmap table version should be 0.\");\n    cmap2.numTables = parse.getUShort(data, start + 2);\n    var offset = -1;\n    for(var i = cmap2.numTables - 1; i >= 0; i -= 1){\n        var platformId = parse.getUShort(data, start + 4 + i * 8);\n        var encodingId = parse.getUShort(data, start + 4 + i * 8 + 2);\n        if (platformId === 3 && (encodingId === 0 || encodingId === 1 || encodingId === 10) || platformId === 0 && (encodingId === 0 || encodingId === 1 || encodingId === 2 || encodingId === 3 || encodingId === 4)) {\n            offset = parse.getULong(data, start + 4 + i * 8 + 4);\n            break;\n        }\n    }\n    if (offset === -1) {\n        throw new Error(\"No valid cmap sub-tables found.\");\n    }\n    var p = new parse.Parser(data, start + offset);\n    cmap2.format = p.parseUShort();\n    if (cmap2.format === 12) {\n        parseCmapTableFormat12(cmap2, p);\n    } else if (cmap2.format === 4) {\n        parseCmapTableFormat4(cmap2, p, data, start, offset);\n    } else {\n        throw new Error(\"Only format 4 and 12 cmap tables are supported (found format \" + cmap2.format + \").\");\n    }\n    return cmap2;\n}\nvar cmap = {\n    parse: parseCmapTable\n};\nfunction calcCFFSubroutineBias(subrs) {\n    var bias;\n    if (subrs.length < 1240) {\n        bias = 107;\n    } else if (subrs.length < 33900) {\n        bias = 1131;\n    } else {\n        bias = 32768;\n    }\n    return bias;\n}\nfunction parseCFFIndex(data, start, conversionFn) {\n    var offsets = [];\n    var objects = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for(var i = 0; i < count + 1; i += 1){\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n    for(var i$1 = 0; i$1 < offsets.length - 1; i$1 += 1){\n        var value = parse.getBytes(data, objectOffset + offsets[i$1], objectOffset + offsets[i$1 + 1]);\n        if (conversionFn) {\n            value = conversionFn(value);\n        }\n        objects.push(value);\n    }\n    return {\n        objects,\n        startOffset: start,\n        endOffset\n    };\n}\nfunction parseCFFIndexLowMemory(data, start) {\n    var offsets = [];\n    var count = parse.getCard16(data, start);\n    var objectOffset;\n    var endOffset;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n        var pos = start + 3;\n        for(var i = 0; i < count + 1; i += 1){\n            offsets.push(parse.getOffset(data, pos, offsetSize));\n            pos += offsetSize;\n        }\n        endOffset = objectOffset + offsets[count];\n    } else {\n        endOffset = start + 2;\n    }\n    return {\n        offsets,\n        startOffset: start,\n        endOffset\n    };\n}\nfunction getCffIndexObject(i, offsets, data, start, conversionFn) {\n    var count = parse.getCard16(data, start);\n    var objectOffset = 0;\n    if (count !== 0) {\n        var offsetSize = parse.getByte(data, start + 2);\n        objectOffset = start + (count + 1) * offsetSize + 2;\n    }\n    var value = parse.getBytes(data, objectOffset + offsets[i], objectOffset + offsets[i + 1]);\n    if (conversionFn) {\n        value = conversionFn(value);\n    }\n    return value;\n}\nfunction parseFloatOperand(parser) {\n    var s = \"\";\n    var eof = 15;\n    var lookup = [\n        \"0\",\n        \"1\",\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \".\",\n        \"E\",\n        \"E-\",\n        null,\n        \"-\"\n    ];\n    while(true){\n        var b = parser.parseByte();\n        var n1 = b >> 4;\n        var n2 = b & 15;\n        if (n1 === eof) {\n            break;\n        }\n        s += lookup[n1];\n        if (n2 === eof) {\n            break;\n        }\n        s += lookup[n2];\n    }\n    return parseFloat(s);\n}\nfunction parseOperand(parser, b0) {\n    var b1;\n    var b2;\n    var b3;\n    var b4;\n    if (b0 === 28) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        return b1 << 8 | b2;\n    }\n    if (b0 === 29) {\n        b1 = parser.parseByte();\n        b2 = parser.parseByte();\n        b3 = parser.parseByte();\n        b4 = parser.parseByte();\n        return b1 << 24 | b2 << 16 | b3 << 8 | b4;\n    }\n    if (b0 === 30) {\n        return parseFloatOperand(parser);\n    }\n    if (b0 >= 32 && b0 <= 246) {\n        return b0 - 139;\n    }\n    if (b0 >= 247 && b0 <= 250) {\n        b1 = parser.parseByte();\n        return (b0 - 247) * 256 + b1 + 108;\n    }\n    if (b0 >= 251 && b0 <= 254) {\n        b1 = parser.parseByte();\n        return -(b0 - 251) * 256 - b1 - 108;\n    }\n    throw new Error(\"Invalid b0 \" + b0);\n}\nfunction entriesToObject(entries) {\n    var o = {};\n    for(var i = 0; i < entries.length; i += 1){\n        var key = entries[i][0];\n        var values = entries[i][1];\n        var value = void 0;\n        if (values.length === 1) {\n            value = values[0];\n        } else {\n            value = values;\n        }\n        if (o.hasOwnProperty(key) && !isNaN(o[key])) {\n            throw new Error(\"Object \" + o + \" already has key \" + key);\n        }\n        o[key] = value;\n    }\n    return o;\n}\nfunction parseCFFDict(data, start, size) {\n    start = start !== void 0 ? start : 0;\n    var parser = new parse.Parser(data, start);\n    var entries = [];\n    var operands = [];\n    size = size !== void 0 ? size : data.length;\n    while(parser.relativeOffset < size){\n        var op = parser.parseByte();\n        if (op <= 21) {\n            if (op === 12) {\n                op = 1200 + parser.parseByte();\n            }\n            entries.push([\n                op,\n                operands\n            ]);\n            operands = [];\n        } else {\n            operands.push(parseOperand(parser, op));\n        }\n    }\n    return entriesToObject(entries);\n}\nfunction getCFFString(strings, index) {\n    if (index <= 390) {\n        index = cffStandardStrings[index];\n    } else {\n        index = strings[index - 391];\n    }\n    return index;\n}\nfunction interpretDict(dict, meta2, strings) {\n    var newDict = {};\n    var value;\n    for(var i = 0; i < meta2.length; i += 1){\n        var m2 = meta2[i];\n        if (Array.isArray(m2.type)) {\n            var values = [];\n            values.length = m2.type.length;\n            for(var j2 = 0; j2 < m2.type.length; j2++){\n                value = dict[m2.op] !== void 0 ? dict[m2.op][j2] : void 0;\n                if (value === void 0) {\n                    value = m2.value !== void 0 && m2.value[j2] !== void 0 ? m2.value[j2] : null;\n                }\n                if (m2.type[j2] === \"SID\") {\n                    value = getCFFString(strings, value);\n                }\n                values[j2] = value;\n            }\n            newDict[m2.name] = values;\n        } else {\n            value = dict[m2.op];\n            if (value === void 0) {\n                value = m2.value !== void 0 ? m2.value : null;\n            }\n            if (m2.type === \"SID\") {\n                value = getCFFString(strings, value);\n            }\n            newDict[m2.name] = value;\n        }\n    }\n    return newDict;\n}\nfunction parseCFFHeader(data, start) {\n    var header = {};\n    header.formatMajor = parse.getCard8(data, start);\n    header.formatMinor = parse.getCard8(data, start + 1);\n    header.size = parse.getCard8(data, start + 2);\n    header.offsetSize = parse.getCard8(data, start + 3);\n    header.startOffset = start;\n    header.endOffset = start + 4;\n    return header;\n}\nvar TOP_DICT_META = [\n    {\n        name: \"version\",\n        op: 0,\n        type: \"SID\"\n    },\n    {\n        name: \"notice\",\n        op: 1,\n        type: \"SID\"\n    },\n    {\n        name: \"copyright\",\n        op: 1200,\n        type: \"SID\"\n    },\n    {\n        name: \"fullName\",\n        op: 2,\n        type: \"SID\"\n    },\n    {\n        name: \"familyName\",\n        op: 3,\n        type: \"SID\"\n    },\n    {\n        name: \"weight\",\n        op: 4,\n        type: \"SID\"\n    },\n    {\n        name: \"isFixedPitch\",\n        op: 1201,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"italicAngle\",\n        op: 1202,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"underlinePosition\",\n        op: 1203,\n        type: \"number\",\n        value: -100\n    },\n    {\n        name: \"underlineThickness\",\n        op: 1204,\n        type: \"number\",\n        value: 50\n    },\n    {\n        name: \"paintType\",\n        op: 1205,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"charstringType\",\n        op: 1206,\n        type: \"number\",\n        value: 2\n    },\n    {\n        name: \"fontMatrix\",\n        op: 1207,\n        type: [\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\",\n            \"real\"\n        ],\n        value: [\n            1e-3,\n            0,\n            0,\n            1e-3,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"uniqueId\",\n        op: 13,\n        type: \"number\"\n    },\n    {\n        name: \"fontBBox\",\n        op: 5,\n        type: [\n            \"number\",\n            \"number\",\n            \"number\",\n            \"number\"\n        ],\n        value: [\n            0,\n            0,\n            0,\n            0\n        ]\n    },\n    {\n        name: \"strokeWidth\",\n        op: 1208,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"xuid\",\n        op: 14,\n        type: [],\n        value: null\n    },\n    {\n        name: \"charset\",\n        op: 15,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"encoding\",\n        op: 16,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"charStrings\",\n        op: 17,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"private\",\n        op: 18,\n        type: [\n            \"number\",\n            \"offset\"\n        ],\n        value: [\n            0,\n            0\n        ]\n    },\n    {\n        name: \"ros\",\n        op: 1230,\n        type: [\n            \"SID\",\n            \"SID\",\n            \"number\"\n        ]\n    },\n    {\n        name: \"cidFontVersion\",\n        op: 1231,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontRevision\",\n        op: 1232,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidFontType\",\n        op: 1233,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"cidCount\",\n        op: 1234,\n        type: \"number\",\n        value: 8720\n    },\n    {\n        name: \"uidBase\",\n        op: 1235,\n        type: \"number\"\n    },\n    {\n        name: \"fdArray\",\n        op: 1236,\n        type: \"offset\"\n    },\n    {\n        name: \"fdSelect\",\n        op: 1237,\n        type: \"offset\"\n    },\n    {\n        name: \"fontName\",\n        op: 1238,\n        type: \"SID\"\n    }\n];\nvar PRIVATE_DICT_META = [\n    {\n        name: \"subrs\",\n        op: 19,\n        type: \"offset\",\n        value: 0\n    },\n    {\n        name: \"defaultWidthX\",\n        op: 20,\n        type: \"number\",\n        value: 0\n    },\n    {\n        name: \"nominalWidthX\",\n        op: 21,\n        type: \"number\",\n        value: 0\n    }\n];\nfunction parseCFFTopDict(data, strings) {\n    var dict = parseCFFDict(data, 0, data.byteLength);\n    return interpretDict(dict, TOP_DICT_META, strings);\n}\nfunction parseCFFPrivateDict(data, start, size, strings) {\n    var dict = parseCFFDict(data, start, size);\n    return interpretDict(dict, PRIVATE_DICT_META, strings);\n}\nfunction gatherCFFTopDicts(data, start, cffIndex, strings) {\n    var topDictArray = [];\n    for(var iTopDict = 0; iTopDict < cffIndex.length; iTopDict += 1){\n        var topDictData = new DataView(new Uint8Array(cffIndex[iTopDict]).buffer);\n        var topDict = parseCFFTopDict(topDictData, strings);\n        topDict._subrs = [];\n        topDict._subrsBias = 0;\n        topDict._defaultWidthX = 0;\n        topDict._nominalWidthX = 0;\n        var privateSize = topDict.private[0];\n        var privateOffset = topDict.private[1];\n        if (privateSize !== 0 && privateOffset !== 0) {\n            var privateDict = parseCFFPrivateDict(data, privateOffset + start, privateSize, strings);\n            topDict._defaultWidthX = privateDict.defaultWidthX;\n            topDict._nominalWidthX = privateDict.nominalWidthX;\n            if (privateDict.subrs !== 0) {\n                var subrOffset = privateOffset + privateDict.subrs;\n                var subrIndex = parseCFFIndex(data, subrOffset + start);\n                topDict._subrs = subrIndex.objects;\n                topDict._subrsBias = calcCFFSubroutineBias(topDict._subrs);\n            }\n            topDict._privateDict = privateDict;\n        }\n        topDictArray.push(topDict);\n    }\n    return topDictArray;\n}\nfunction parseCFFCharset(data, start, nGlyphs, strings) {\n    var sid;\n    var count;\n    var parser = new parse.Parser(data, start);\n    nGlyphs -= 1;\n    var charset = [\n        \".notdef\"\n    ];\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for(var i = 0; i < nGlyphs; i += 1){\n            sid = parser.parseSID();\n            charset.push(getCFFString(strings, sid));\n        }\n    } else if (format === 1) {\n        while(charset.length <= nGlyphs){\n            sid = parser.parseSID();\n            count = parser.parseCard8();\n            for(var i$1 = 0; i$1 <= count; i$1 += 1){\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else if (format === 2) {\n        while(charset.length <= nGlyphs){\n            sid = parser.parseSID();\n            count = parser.parseCard16();\n            for(var i$2 = 0; i$2 <= count; i$2 += 1){\n                charset.push(getCFFString(strings, sid));\n                sid += 1;\n            }\n        }\n    } else {\n        throw new Error(\"Unknown charset format \" + format);\n    }\n    return charset;\n}\nfunction parseCFFEncoding(data, start, charset) {\n    var code;\n    var enc = {};\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        var nCodes = parser.parseCard8();\n        for(var i = 0; i < nCodes; i += 1){\n            code = parser.parseCard8();\n            enc[code] = i;\n        }\n    } else if (format === 1) {\n        var nRanges = parser.parseCard8();\n        code = 1;\n        for(var i$1 = 0; i$1 < nRanges; i$1 += 1){\n            var first = parser.parseCard8();\n            var nLeft = parser.parseCard8();\n            for(var j2 = first; j2 <= first + nLeft; j2 += 1){\n                enc[j2] = code;\n                code += 1;\n            }\n        }\n    } else {\n        throw new Error(\"Unknown encoding format \" + format);\n    }\n    return new CffEncoding(enc, charset);\n}\nfunction parseCFFCharstring(font, glyph, code) {\n    var c1x;\n    var c1y;\n    var c2x;\n    var c2y;\n    var p = new Path();\n    var stack = [];\n    var nStems = 0;\n    var haveWidth = false;\n    var open = false;\n    var x = 0;\n    var y = 0;\n    var subrs;\n    var subrsBias;\n    var defaultWidthX;\n    var nominalWidthX;\n    if (font.isCIDFont) {\n        var fdIndex = font.tables.cff.topDict._fdSelect[glyph.index];\n        var fdDict = font.tables.cff.topDict._fdArray[fdIndex];\n        subrs = fdDict._subrs;\n        subrsBias = fdDict._subrsBias;\n        defaultWidthX = fdDict._defaultWidthX;\n        nominalWidthX = fdDict._nominalWidthX;\n    } else {\n        subrs = font.tables.cff.topDict._subrs;\n        subrsBias = font.tables.cff.topDict._subrsBias;\n        defaultWidthX = font.tables.cff.topDict._defaultWidthX;\n        nominalWidthX = font.tables.cff.topDict._nominalWidthX;\n    }\n    var width = defaultWidthX;\n    function newContour(x2, y2) {\n        if (open) {\n            p.closePath();\n        }\n        p.moveTo(x2, y2);\n        open = true;\n    }\n    function parseStems() {\n        var hasWidthArg;\n        hasWidthArg = stack.length % 2 !== 0;\n        if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + nominalWidthX;\n        }\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n    }\n    function parse2(code2) {\n        var b1;\n        var b2;\n        var b3;\n        var b4;\n        var codeIndex;\n        var subrCode;\n        var jpx;\n        var jpy;\n        var c3x;\n        var c3y;\n        var c4x;\n        var c4y;\n        var i = 0;\n        while(i < code2.length){\n            var v = code2[i];\n            i += 1;\n            switch(v){\n                case 1:\n                    parseStems();\n                    break;\n                case 3:\n                    parseStems();\n                    break;\n                case 4:\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    y += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 5:\n                    while(stack.length > 0){\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 6:\n                    while(stack.length > 0){\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 7:\n                    while(stack.length > 0){\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        x += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    break;\n                case 8:\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 10:\n                    codeIndex = stack.pop() + subrsBias;\n                    subrCode = subrs[codeIndex];\n                    if (subrCode) {\n                        parse2(subrCode);\n                    }\n                    break;\n                case 11:\n                    return;\n                case 12:\n                    v = code2[i];\n                    i += 1;\n                    switch(v){\n                        case 35:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y + stack.shift();\n                            c3x = jpx + stack.shift();\n                            c3y = jpy + stack.shift();\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            x = c4x + stack.shift();\n                            y = c4y + stack.shift();\n                            stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 34:\n                            c1x = x + stack.shift();\n                            c1y = y;\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y;\n                            c3x = jpx + stack.shift();\n                            c3y = c2y;\n                            c4x = c3x + stack.shift();\n                            c4y = y;\n                            x = c4x + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 36:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y;\n                            c3x = jpx + stack.shift();\n                            c3y = c2y;\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            x = c4x + stack.shift();\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        case 37:\n                            c1x = x + stack.shift();\n                            c1y = y + stack.shift();\n                            c2x = c1x + stack.shift();\n                            c2y = c1y + stack.shift();\n                            jpx = c2x + stack.shift();\n                            jpy = c2y + stack.shift();\n                            c3x = jpx + stack.shift();\n                            c3y = jpy + stack.shift();\n                            c4x = c3x + stack.shift();\n                            c4y = c3y + stack.shift();\n                            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n                                x = c4x + stack.shift();\n                            } else {\n                                y = c4y + stack.shift();\n                            }\n                            p.curveTo(c1x, c1y, c2x, c2y, jpx, jpy);\n                            p.curveTo(c3x, c3y, c4x, c4y, x, y);\n                            break;\n                        default:\n                            console.log(\"Glyph \" + glyph.index + \": unknown operator \" + 1200 + v);\n                            stack.length = 0;\n                    }\n                    break;\n                case 14:\n                    if (stack.length > 0 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    if (open) {\n                        p.closePath();\n                        open = false;\n                    }\n                    break;\n                case 18:\n                    parseStems();\n                    break;\n                case 19:\n                case 20:\n                    parseStems();\n                    i += nStems + 7 >> 3;\n                    break;\n                case 21:\n                    if (stack.length > 2 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    y += stack.pop();\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 22:\n                    if (stack.length > 1 && !haveWidth) {\n                        width = stack.shift() + nominalWidthX;\n                        haveWidth = true;\n                    }\n                    x += stack.pop();\n                    newContour(x, y);\n                    break;\n                case 23:\n                    parseStems();\n                    break;\n                case 24:\n                    while(stack.length > 2){\n                        c1x = x + stack.shift();\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    x += stack.shift();\n                    y += stack.shift();\n                    p.lineTo(x, y);\n                    break;\n                case 25:\n                    while(stack.length > 6){\n                        x += stack.shift();\n                        y += stack.shift();\n                        p.lineTo(x, y);\n                    }\n                    c1x = x + stack.shift();\n                    c1y = y + stack.shift();\n                    c2x = c1x + stack.shift();\n                    c2y = c1y + stack.shift();\n                    x = c2x + stack.shift();\n                    y = c2y + stack.shift();\n                    p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    break;\n                case 26:\n                    if (stack.length % 2) {\n                        x += stack.shift();\n                    }\n                    while(stack.length > 0){\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x;\n                        y = c2y + stack.shift();\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 27:\n                    if (stack.length % 2) {\n                        y += stack.shift();\n                    }\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y;\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 28:\n                    b1 = code2[i];\n                    b2 = code2[i + 1];\n                    stack.push((b1 << 24 | b2 << 16) >> 16);\n                    i += 2;\n                    break;\n                case 29:\n                    codeIndex = stack.pop() + font.gsubrsBias;\n                    subrCode = font.gsubrs[codeIndex];\n                    if (subrCode) {\n                        parse2(subrCode);\n                    }\n                    break;\n                case 30:\n                    while(stack.length > 0){\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                case 31:\n                    while(stack.length > 0){\n                        c1x = x + stack.shift();\n                        c1y = y;\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        y = c2y + stack.shift();\n                        x = c2x + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                        if (stack.length === 0) {\n                            break;\n                        }\n                        c1x = x;\n                        c1y = y + stack.shift();\n                        c2x = c1x + stack.shift();\n                        c2y = c1y + stack.shift();\n                        x = c2x + stack.shift();\n                        y = c2y + (stack.length === 1 ? stack.shift() : 0);\n                        p.curveTo(c1x, c1y, c2x, c2y, x, y);\n                    }\n                    break;\n                default:\n                    if (v < 32) {\n                        console.log(\"Glyph \" + glyph.index + \": unknown operator \" + v);\n                    } else if (v < 247) {\n                        stack.push(v - 139);\n                    } else if (v < 251) {\n                        b1 = code2[i];\n                        i += 1;\n                        stack.push((v - 247) * 256 + b1 + 108);\n                    } else if (v < 255) {\n                        b1 = code2[i];\n                        i += 1;\n                        stack.push(-(v - 251) * 256 - b1 - 108);\n                    } else {\n                        b1 = code2[i];\n                        b2 = code2[i + 1];\n                        b3 = code2[i + 2];\n                        b4 = code2[i + 3];\n                        i += 4;\n                        stack.push((b1 << 24 | b2 << 16 | b3 << 8 | b4) / 65536);\n                    }\n            }\n        }\n    }\n    parse2(code);\n    glyph.advanceWidth = width;\n    return p;\n}\nfunction parseCFFFDSelect(data, start, nGlyphs, fdArrayCount) {\n    var fdSelect = [];\n    var fdIndex;\n    var parser = new parse.Parser(data, start);\n    var format = parser.parseCard8();\n    if (format === 0) {\n        for(var iGid = 0; iGid < nGlyphs; iGid++){\n            fdIndex = parser.parseCard8();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n            }\n            fdSelect.push(fdIndex);\n        }\n    } else if (format === 3) {\n        var nRanges = parser.parseCard16();\n        var first = parser.parseCard16();\n        if (first !== 0) {\n            throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad initial GID \" + first);\n        }\n        var next;\n        for(var iRange = 0; iRange < nRanges; iRange++){\n            fdIndex = parser.parseCard8();\n            next = parser.parseCard16();\n            if (fdIndex >= fdArrayCount) {\n                throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + fdIndex + \" (FD count \" + fdArrayCount + \")\");\n            }\n            if (next > nGlyphs) {\n                throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad GID \" + next);\n            }\n            for(; first < next; first++){\n                fdSelect.push(fdIndex);\n            }\n            first = next;\n        }\n        if (next !== nGlyphs) {\n            throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad final GID \" + next);\n        }\n    } else {\n        throw new Error(\"CFF Table CID Font FDSelect table has unsupported format \" + format);\n    }\n    return fdSelect;\n}\nfunction parseCFFTable(data, start, font, opt) {\n    font.tables.cff = {};\n    var header = parseCFFHeader(data, start);\n    var nameIndex = parseCFFIndex(data, header.endOffset, parse.bytesToString);\n    var topDictIndex = parseCFFIndex(data, nameIndex.endOffset);\n    var stringIndex = parseCFFIndex(data, topDictIndex.endOffset, parse.bytesToString);\n    var globalSubrIndex = parseCFFIndex(data, stringIndex.endOffset);\n    font.gsubrs = globalSubrIndex.objects;\n    font.gsubrsBias = calcCFFSubroutineBias(font.gsubrs);\n    var topDictArray = gatherCFFTopDicts(data, start, topDictIndex.objects, stringIndex.objects);\n    if (topDictArray.length !== 1) {\n        throw new Error(\"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" + topDictArray.length);\n    }\n    var topDict = topDictArray[0];\n    font.tables.cff.topDict = topDict;\n    if (topDict._privateDict) {\n        font.defaultWidthX = topDict._privateDict.defaultWidthX;\n        font.nominalWidthX = topDict._privateDict.nominalWidthX;\n    }\n    if (topDict.ros[0] !== void 0 && topDict.ros[1] !== void 0) {\n        font.isCIDFont = true;\n    }\n    if (font.isCIDFont) {\n        var fdArrayOffset = topDict.fdArray;\n        var fdSelectOffset = topDict.fdSelect;\n        if (fdArrayOffset === 0 || fdSelectOffset === 0) {\n            throw new Error(\"Font is marked as a CID font, but FDArray and/or FDSelect information is missing\");\n        }\n        fdArrayOffset += start;\n        var fdArrayIndex = parseCFFIndex(data, fdArrayOffset);\n        var fdArray = gatherCFFTopDicts(data, start, fdArrayIndex.objects, stringIndex.objects);\n        topDict._fdArray = fdArray;\n        fdSelectOffset += start;\n        topDict._fdSelect = parseCFFFDSelect(data, fdSelectOffset, font.numGlyphs, fdArray.length);\n    }\n    var privateDictOffset = start + topDict.private[1];\n    var privateDict = parseCFFPrivateDict(data, privateDictOffset, topDict.private[0], stringIndex.objects);\n    font.defaultWidthX = privateDict.defaultWidthX;\n    font.nominalWidthX = privateDict.nominalWidthX;\n    if (privateDict.subrs !== 0) {\n        var subrOffset = privateDictOffset + privateDict.subrs;\n        var subrIndex = parseCFFIndex(data, subrOffset);\n        font.subrs = subrIndex.objects;\n        font.subrsBias = calcCFFSubroutineBias(font.subrs);\n    } else {\n        font.subrs = [];\n        font.subrsBias = 0;\n    }\n    var charStringsIndex;\n    if (opt.lowMemory) {\n        charStringsIndex = parseCFFIndexLowMemory(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.offsets.length;\n    } else {\n        charStringsIndex = parseCFFIndex(data, start + topDict.charStrings);\n        font.nGlyphs = charStringsIndex.objects.length;\n    }\n    var charset = parseCFFCharset(data, start + topDict.charset, font.nGlyphs, stringIndex.objects);\n    if (topDict.encoding === 0) {\n        font.cffEncoding = new CffEncoding(cffStandardEncoding, charset);\n    } else if (topDict.encoding === 1) {\n        font.cffEncoding = new CffEncoding(cffExpertEncoding, charset);\n    } else {\n        font.cffEncoding = parseCFFEncoding(data, start + topDict.encoding, charset);\n    }\n    font.encoding = font.encoding || font.cffEncoding;\n    font.glyphs = new glyphset.GlyphSet(font);\n    if (opt.lowMemory) {\n        font._push = function(i2) {\n            var charString2 = getCffIndexObject(i2, charStringsIndex.offsets, data, start + topDict.charStrings);\n            font.glyphs.push(i2, glyphset.cffGlyphLoader(font, i2, parseCFFCharstring, charString2));\n        };\n    } else {\n        for(var i = 0; i < font.nGlyphs; i += 1){\n            var charString = charStringsIndex.objects[i];\n            font.glyphs.push(i, glyphset.cffGlyphLoader(font, i, parseCFFCharstring, charString));\n        }\n    }\n}\nvar cff = {\n    parse: parseCFFTable\n};\nfunction parseFvarAxis(data, start, names) {\n    var axis = {};\n    var p = new parse.Parser(data, start);\n    axis.tag = p.parseTag();\n    axis.minValue = p.parseFixed();\n    axis.defaultValue = p.parseFixed();\n    axis.maxValue = p.parseFixed();\n    p.skip(\"uShort\", 1);\n    axis.name = names[p.parseUShort()] || {};\n    return axis;\n}\nfunction parseFvarInstance(data, start, axes, names) {\n    var inst = {};\n    var p = new parse.Parser(data, start);\n    inst.name = names[p.parseUShort()] || {};\n    p.skip(\"uShort\", 1);\n    inst.coordinates = {};\n    for(var i = 0; i < axes.length; ++i){\n        inst.coordinates[axes[i].tag] = p.parseFixed();\n    }\n    return inst;\n}\nfunction parseFvarTable(data, start, names) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 65536, \"Unsupported fvar table version.\");\n    var offsetToData = p.parseOffset16();\n    p.skip(\"uShort\", 1);\n    var axisCount = p.parseUShort();\n    var axisSize = p.parseUShort();\n    var instanceCount = p.parseUShort();\n    var instanceSize = p.parseUShort();\n    var axes = [];\n    for(var i = 0; i < axisCount; i++){\n        axes.push(parseFvarAxis(data, start + offsetToData + i * axisSize, names));\n    }\n    var instances = [];\n    var instanceStart = start + offsetToData + axisCount * axisSize;\n    for(var j2 = 0; j2 < instanceCount; j2++){\n        instances.push(parseFvarInstance(data, instanceStart + j2 * instanceSize, axes, names));\n    }\n    return {\n        axes,\n        instances\n    };\n}\nvar fvar = {\n    parse: parseFvarTable\n};\nvar attachList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        attachPoints: this.parseList(Parser.pointer(Parser.uShortList))\n    };\n};\nvar caretValue = function() {\n    var format = this.parseUShort();\n    check.argument(format === 1 || format === 2 || format === 3, \"Unsupported CaretValue table version.\");\n    if (format === 1) {\n        return {\n            coordinate: this.parseShort()\n        };\n    } else if (format === 2) {\n        return {\n            pointindex: this.parseShort()\n        };\n    } else if (format === 3) {\n        return {\n            coordinate: this.parseShort()\n        };\n    }\n};\nvar ligGlyph = function() {\n    return this.parseList(Parser.pointer(caretValue));\n};\nvar ligCaretList = function() {\n    return {\n        coverage: this.parsePointer(Parser.coverage),\n        ligGlyphs: this.parseList(Parser.pointer(ligGlyph))\n    };\n};\nvar markGlyphSets = function() {\n    this.parseUShort();\n    return this.parseList(Parser.pointer(Parser.coverage));\n};\nfunction parseGDEFTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.2 || tableVersion === 1.3, \"Unsupported GDEF table version.\");\n    var gdef2 = {\n        version: tableVersion,\n        classDef: p.parsePointer(Parser.classDef),\n        attachList: p.parsePointer(attachList),\n        ligCaretList: p.parsePointer(ligCaretList),\n        markAttachClassDef: p.parsePointer(Parser.classDef)\n    };\n    if (tableVersion >= 1.2) {\n        gdef2.markGlyphSets = p.parsePointer(markGlyphSets);\n    }\n    return gdef2;\n}\nvar gdef = {\n    parse: parseGDEFTable\n};\nvar subtableParsers = new Array(10);\nsubtableParsers[1] = function parseLookup1() {\n    var start = this.offset + this.relativeOffset;\n    var posformat = this.parseUShort();\n    if (posformat === 1) {\n        return {\n            posFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            value: this.parseValueRecord()\n        };\n    } else if (posformat === 2) {\n        return {\n            posFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            values: this.parseValueRecordList()\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": GPOS lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers[2] = function parseLookup2() {\n    var start = this.offset + this.relativeOffset;\n    var posFormat = this.parseUShort();\n    check.assert(posFormat === 1 || posFormat === 2, \"0x\" + start.toString(16) + \": GPOS lookup type 2 format must be 1 or 2.\");\n    var coverage = this.parsePointer(Parser.coverage);\n    var valueFormat1 = this.parseUShort();\n    var valueFormat2 = this.parseUShort();\n    if (posFormat === 1) {\n        return {\n            posFormat,\n            coverage,\n            valueFormat1,\n            valueFormat2,\n            pairSets: this.parseList(Parser.pointer(Parser.list(function() {\n                return {\n                    secondGlyph: this.parseUShort(),\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            })))\n        };\n    } else if (posFormat === 2) {\n        var classDef1 = this.parsePointer(Parser.classDef);\n        var classDef2 = this.parsePointer(Parser.classDef);\n        var class1Count = this.parseUShort();\n        var class2Count = this.parseUShort();\n        return {\n            posFormat,\n            coverage,\n            valueFormat1,\n            valueFormat2,\n            classDef1,\n            classDef2,\n            class1Count,\n            class2Count,\n            classRecords: this.parseList(class1Count, Parser.list(class2Count, function() {\n                return {\n                    value1: this.parseValueRecord(valueFormat1),\n                    value2: this.parseValueRecord(valueFormat2)\n                };\n            }))\n        };\n    }\n};\nsubtableParsers[3] = function parseLookup3() {\n    return {\n        error: \"GPOS Lookup 3 not supported\"\n    };\n};\nsubtableParsers[4] = function parseLookup4() {\n    return {\n        error: \"GPOS Lookup 4 not supported\"\n    };\n};\nsubtableParsers[5] = function parseLookup5() {\n    return {\n        error: \"GPOS Lookup 5 not supported\"\n    };\n};\nsubtableParsers[6] = function parseLookup6() {\n    return {\n        error: \"GPOS Lookup 6 not supported\"\n    };\n};\nsubtableParsers[7] = function parseLookup7() {\n    return {\n        error: \"GPOS Lookup 7 not supported\"\n    };\n};\nsubtableParsers[8] = function parseLookup8() {\n    return {\n        error: \"GPOS Lookup 8 not supported\"\n    };\n};\nsubtableParsers[9] = function parseLookup9() {\n    return {\n        error: \"GPOS Lookup 9 not supported\"\n    };\n};\nfunction parseGposTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GPOS table version \" + tableVersion);\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n}\nvar gpos = {\n    parse: parseGposTable\n};\nvar subtableParsers$1 = new Array(9);\nsubtableParsers$1[1] = function parseLookup12() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            deltaGlyphId: this.parseUShort()\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            substitute: this.parseOffset16List()\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 1 format must be 1 or 2.\");\n};\nsubtableParsers$1[2] = function parseLookup22() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Multiple Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        sequences: this.parseListOfLists()\n    };\n};\nsubtableParsers$1[3] = function parseLookup32() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Alternate Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        alternateSets: this.parseListOfLists()\n    };\n};\nsubtableParsers$1[4] = function parseLookup42() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB ligature table identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        ligatureSets: this.parseListOfLists(function() {\n            return {\n                ligGlyph: this.parseUShort(),\n                components: this.parseUShortList(this.parseUShort() - 1)\n            };\n        })\n    };\n};\nvar lookupRecordDesc = {\n    sequenceIndex: Parser.uShort,\n    lookupListIndex: Parser.uShort\n};\nsubtableParsers$1[5] = function parseLookup52() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            ruleSets: this.parseListOfLists(function() {\n                var glyphCount2 = this.parseUShort();\n                var substCount2 = this.parseUShort();\n                return {\n                    input: this.parseUShortList(glyphCount2 - 1),\n                    lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat,\n            coverage: this.parsePointer(Parser.coverage),\n            classDef: this.parsePointer(Parser.classDef),\n            classSets: this.parseListOfLists(function() {\n                var glyphCount2 = this.parseUShort();\n                var substCount2 = this.parseUShort();\n                return {\n                    classes: this.parseUShortList(glyphCount2 - 1),\n                    lookupRecords: this.parseRecordList(substCount2, lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        var glyphCount = this.parseUShort();\n        var substCount = this.parseUShort();\n        return {\n            substFormat,\n            coverages: this.parseList(glyphCount, Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(substCount, lookupRecordDesc)\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 5 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[6] = function parseLookup62() {\n    var start = this.offset + this.relativeOffset;\n    var substFormat = this.parseUShort();\n    if (substFormat === 1) {\n        return {\n            substFormat: 1,\n            coverage: this.parsePointer(Parser.coverage),\n            chainRuleSets: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 2) {\n        return {\n            substFormat: 2,\n            coverage: this.parsePointer(Parser.coverage),\n            backtrackClassDef: this.parsePointer(Parser.classDef),\n            inputClassDef: this.parsePointer(Parser.classDef),\n            lookaheadClassDef: this.parsePointer(Parser.classDef),\n            chainClassSet: this.parseListOfLists(function() {\n                return {\n                    backtrack: this.parseUShortList(),\n                    input: this.parseUShortList(this.parseShort() - 1),\n                    lookahead: this.parseUShortList(),\n                    lookupRecords: this.parseRecordList(lookupRecordDesc)\n                };\n            })\n        };\n    } else if (substFormat === 3) {\n        return {\n            substFormat: 3,\n            backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            inputCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n            lookupRecords: this.parseRecordList(lookupRecordDesc)\n        };\n    }\n    check.assert(false, \"0x\" + start.toString(16) + \": lookup type 6 format must be 1, 2 or 3.\");\n};\nsubtableParsers$1[7] = function parseLookup72() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Extension Substitution subtable identifier-format must be 1\");\n    var extensionLookupType = this.parseUShort();\n    var extensionParser = new Parser(this.data, this.offset + this.parseULong());\n    return {\n        substFormat: 1,\n        lookupType: extensionLookupType,\n        extension: subtableParsers$1[extensionLookupType].call(extensionParser)\n    };\n};\nsubtableParsers$1[8] = function parseLookup82() {\n    var substFormat = this.parseUShort();\n    check.argument(substFormat === 1, \"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1\");\n    return {\n        substFormat,\n        coverage: this.parsePointer(Parser.coverage),\n        backtrackCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        lookaheadCoverage: this.parseList(Parser.pointer(Parser.coverage)),\n        substitutes: this.parseUShortList()\n    };\n};\nfunction parseGsubTable(data, start) {\n    start = start || 0;\n    var p = new Parser(data, start);\n    var tableVersion = p.parseVersion(1);\n    check.argument(tableVersion === 1 || tableVersion === 1.1, \"Unsupported GSUB table version.\");\n    if (tableVersion === 1) {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1)\n        };\n    } else {\n        return {\n            version: tableVersion,\n            scripts: p.parseScriptList(),\n            features: p.parseFeatureList(),\n            lookups: p.parseLookupList(subtableParsers$1),\n            variations: p.parseFeatureVariationsList()\n        };\n    }\n}\nvar gsub = {\n    parse: parseGsubTable\n};\nfunction parseHeadTable(data, start) {\n    var head2 = {};\n    var p = new parse.Parser(data, start);\n    head2.version = p.parseVersion();\n    head2.fontRevision = Math.round(p.parseFixed() * 1e3) / 1e3;\n    head2.checkSumAdjustment = p.parseULong();\n    head2.magicNumber = p.parseULong();\n    check.argument(head2.magicNumber === 1594834165, \"Font header has wrong magic number.\");\n    head2.flags = p.parseUShort();\n    head2.unitsPerEm = p.parseUShort();\n    head2.created = p.parseLongDateTime();\n    head2.modified = p.parseLongDateTime();\n    head2.xMin = p.parseShort();\n    head2.yMin = p.parseShort();\n    head2.xMax = p.parseShort();\n    head2.yMax = p.parseShort();\n    head2.macStyle = p.parseUShort();\n    head2.lowestRecPPEM = p.parseUShort();\n    head2.fontDirectionHint = p.parseShort();\n    head2.indexToLocFormat = p.parseShort();\n    head2.glyphDataFormat = p.parseShort();\n    return head2;\n}\nvar head = {\n    parse: parseHeadTable\n};\nfunction parseHheaTable(data, start) {\n    var hhea2 = {};\n    var p = new parse.Parser(data, start);\n    hhea2.version = p.parseVersion();\n    hhea2.ascender = p.parseShort();\n    hhea2.descender = p.parseShort();\n    hhea2.lineGap = p.parseShort();\n    hhea2.advanceWidthMax = p.parseUShort();\n    hhea2.minLeftSideBearing = p.parseShort();\n    hhea2.minRightSideBearing = p.parseShort();\n    hhea2.xMaxExtent = p.parseShort();\n    hhea2.caretSlopeRise = p.parseShort();\n    hhea2.caretSlopeRun = p.parseShort();\n    hhea2.caretOffset = p.parseShort();\n    p.relativeOffset += 8;\n    hhea2.metricDataFormat = p.parseShort();\n    hhea2.numberOfHMetrics = p.parseUShort();\n    return hhea2;\n}\nvar hhea = {\n    parse: parseHheaTable\n};\nfunction parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs) {\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for(var i = 0; i < numGlyphs; i += 1){\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n        var glyph = glyphs.get(i);\n        glyph.advanceWidth = advanceWidth;\n        glyph.leftSideBearing = leftSideBearing;\n    }\n}\nfunction parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs) {\n    font._hmtxTableData = {};\n    var advanceWidth;\n    var leftSideBearing;\n    var p = new parse.Parser(data, start);\n    for(var i = 0; i < numGlyphs; i += 1){\n        if (i < numMetrics) {\n            advanceWidth = p.parseUShort();\n            leftSideBearing = p.parseShort();\n        }\n        font._hmtxTableData[i] = {\n            advanceWidth,\n            leftSideBearing\n        };\n    }\n}\nfunction parseHmtxTable(font, data, start, numMetrics, numGlyphs, glyphs, opt) {\n    if (opt.lowMemory) {\n        parseHmtxTableOnLowMemory(font, data, start, numMetrics, numGlyphs);\n    } else {\n        parseHmtxTableAll(data, start, numMetrics, numGlyphs, glyphs);\n    }\n}\nvar hmtx = {\n    parse: parseHmtxTable\n};\nfunction parseWindowsKernTable(p) {\n    var pairs = {};\n    p.skip(\"uShort\");\n    var subtableVersion = p.parseUShort();\n    check.argument(subtableVersion === 0, \"Unsupported kern sub-table version.\");\n    p.skip(\"uShort\", 2);\n    var nPairs = p.parseUShort();\n    p.skip(\"uShort\", 3);\n    for(var i = 0; i < nPairs; i += 1){\n        var leftIndex = p.parseUShort();\n        var rightIndex = p.parseUShort();\n        var value = p.parseShort();\n        pairs[leftIndex + \",\" + rightIndex] = value;\n    }\n    return pairs;\n}\nfunction parseMacKernTable(p) {\n    var pairs = {};\n    p.skip(\"uShort\");\n    var nTables = p.parseULong();\n    if (nTables > 1) {\n        console.warn(\"Only the first kern subtable is supported.\");\n    }\n    p.skip(\"uLong\");\n    var coverage = p.parseUShort();\n    var subtableVersion = coverage & 255;\n    p.skip(\"uShort\");\n    if (subtableVersion === 0) {\n        var nPairs = p.parseUShort();\n        p.skip(\"uShort\", 3);\n        for(var i = 0; i < nPairs; i += 1){\n            var leftIndex = p.parseUShort();\n            var rightIndex = p.parseUShort();\n            var value = p.parseShort();\n            pairs[leftIndex + \",\" + rightIndex] = value;\n        }\n    }\n    return pairs;\n}\nfunction parseKernTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseUShort();\n    if (tableVersion === 0) {\n        return parseWindowsKernTable(p);\n    } else if (tableVersion === 1) {\n        return parseMacKernTable(p);\n    } else {\n        throw new Error(\"Unsupported kern table version (\" + tableVersion + \").\");\n    }\n}\nvar kern = {\n    parse: parseKernTable\n};\nfunction parseLtagTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, \"Unsupported ltag table version.\");\n    p.skip(\"uLong\", 1);\n    var numTags = p.parseULong();\n    var tags = [];\n    for(var i = 0; i < numTags; i++){\n        var tag = \"\";\n        var offset = start + p.parseUShort();\n        var length = p.parseUShort();\n        for(var j2 = offset; j2 < offset + length; ++j2){\n            tag += String.fromCharCode(data.getInt8(j2));\n        }\n        tags.push(tag);\n    }\n    return tags;\n}\nvar ltag = {\n    parse: parseLtagTable\n};\nfunction parseLocaTable(data, start, numGlyphs, shortVersion) {\n    var p = new parse.Parser(data, start);\n    var parseFn = shortVersion ? p.parseUShort : p.parseULong;\n    var glyphOffsets = [];\n    for(var i = 0; i < numGlyphs + 1; i += 1){\n        var glyphOffset = parseFn.call(p);\n        if (shortVersion) {\n            glyphOffset *= 2;\n        }\n        glyphOffsets.push(glyphOffset);\n    }\n    return glyphOffsets;\n}\nvar loca = {\n    parse: parseLocaTable\n};\nfunction parseMaxpTable(data, start) {\n    var maxp2 = {};\n    var p = new parse.Parser(data, start);\n    maxp2.version = p.parseVersion();\n    maxp2.numGlyphs = p.parseUShort();\n    if (maxp2.version === 1) {\n        maxp2.maxPoints = p.parseUShort();\n        maxp2.maxContours = p.parseUShort();\n        maxp2.maxCompositePoints = p.parseUShort();\n        maxp2.maxCompositeContours = p.parseUShort();\n        maxp2.maxZones = p.parseUShort();\n        maxp2.maxTwilightPoints = p.parseUShort();\n        maxp2.maxStorage = p.parseUShort();\n        maxp2.maxFunctionDefs = p.parseUShort();\n        maxp2.maxInstructionDefs = p.parseUShort();\n        maxp2.maxStackElements = p.parseUShort();\n        maxp2.maxSizeOfInstructions = p.parseUShort();\n        maxp2.maxComponentElements = p.parseUShort();\n        maxp2.maxComponentDepth = p.parseUShort();\n    }\n    return maxp2;\n}\nvar maxp = {\n    parse: parseMaxpTable\n};\nfunction parseOS2Table(data, start) {\n    var os22 = {};\n    var p = new parse.Parser(data, start);\n    os22.version = p.parseUShort();\n    os22.xAvgCharWidth = p.parseShort();\n    os22.usWeightClass = p.parseUShort();\n    os22.usWidthClass = p.parseUShort();\n    os22.fsType = p.parseUShort();\n    os22.ySubscriptXSize = p.parseShort();\n    os22.ySubscriptYSize = p.parseShort();\n    os22.ySubscriptXOffset = p.parseShort();\n    os22.ySubscriptYOffset = p.parseShort();\n    os22.ySuperscriptXSize = p.parseShort();\n    os22.ySuperscriptYSize = p.parseShort();\n    os22.ySuperscriptXOffset = p.parseShort();\n    os22.ySuperscriptYOffset = p.parseShort();\n    os22.yStrikeoutSize = p.parseShort();\n    os22.yStrikeoutPosition = p.parseShort();\n    os22.sFamilyClass = p.parseShort();\n    os22.panose = [];\n    for(var i = 0; i < 10; i++){\n        os22.panose[i] = p.parseByte();\n    }\n    os22.ulUnicodeRange1 = p.parseULong();\n    os22.ulUnicodeRange2 = p.parseULong();\n    os22.ulUnicodeRange3 = p.parseULong();\n    os22.ulUnicodeRange4 = p.parseULong();\n    os22.achVendID = String.fromCharCode(p.parseByte(), p.parseByte(), p.parseByte(), p.parseByte());\n    os22.fsSelection = p.parseUShort();\n    os22.usFirstCharIndex = p.parseUShort();\n    os22.usLastCharIndex = p.parseUShort();\n    os22.sTypoAscender = p.parseShort();\n    os22.sTypoDescender = p.parseShort();\n    os22.sTypoLineGap = p.parseShort();\n    os22.usWinAscent = p.parseUShort();\n    os22.usWinDescent = p.parseUShort();\n    if (os22.version >= 1) {\n        os22.ulCodePageRange1 = p.parseULong();\n        os22.ulCodePageRange2 = p.parseULong();\n    }\n    if (os22.version >= 2) {\n        os22.sxHeight = p.parseShort();\n        os22.sCapHeight = p.parseShort();\n        os22.usDefaultChar = p.parseUShort();\n        os22.usBreakChar = p.parseUShort();\n        os22.usMaxContent = p.parseUShort();\n    }\n    return os22;\n}\nvar os2 = {\n    parse: parseOS2Table\n};\nfunction parsePostTable(data, start) {\n    var post2 = {};\n    var p = new parse.Parser(data, start);\n    post2.version = p.parseVersion();\n    post2.italicAngle = p.parseFixed();\n    post2.underlinePosition = p.parseShort();\n    post2.underlineThickness = p.parseShort();\n    post2.isFixedPitch = p.parseULong();\n    post2.minMemType42 = p.parseULong();\n    post2.maxMemType42 = p.parseULong();\n    post2.minMemType1 = p.parseULong();\n    post2.maxMemType1 = p.parseULong();\n    post2.names = [];\n    switch(post2.version){\n        case 1:\n            break;\n        case 2:\n            post2.numberOfGlyphs = p.parseUShort();\n            post2.glyphNameIndex = new Array(post2.numberOfGlyphs);\n            for(var i = 0; i < post2.numberOfGlyphs; i++){\n                post2.glyphNameIndex[i] = p.parseUShort();\n            }\n            break;\n        case 2.5:\n            post2.numberOfGlyphs = p.parseUShort();\n            post2.offset = new Array(post2.numberOfGlyphs);\n            for(var i$1 = 0; i$1 < post2.numberOfGlyphs; i$1++){\n                post2.offset[i$1] = p.parseChar();\n            }\n            break;\n    }\n    return post2;\n}\nvar post = {\n    parse: parsePostTable\n};\nvar decode = {};\ndecode.UTF8 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes;\n    for(var j2 = 0; j2 < numChars; j2++, offset += 1){\n        codePoints[j2] = data.getUint8(offset);\n    }\n    return String.fromCharCode.apply(null, codePoints);\n};\ndecode.UTF16 = function(data, offset, numBytes) {\n    var codePoints = [];\n    var numChars = numBytes / 2;\n    for(var j2 = 0; j2 < numChars; j2++, offset += 2){\n        codePoints[j2] = data.getUint16(offset);\n    }\n    return String.fromCharCode.apply(null, codePoints);\n};\nvar eightBitMacEncodings = {\n    \"x-mac-croatian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xaeŠ™\\xb4\\xa8≠Ž\\xd8∞\\xb1≤≥∆\\xb5∂∑∏š∫\\xaa\\xbaΩž\\xf8\\xbf\\xa1\\xac√ƒ≈Ć\\xabČ…\\xa0\\xc0\\xc3\\xd5ŒœĐ—“”‘’\\xf7◊\\xa9⁄€‹›\\xc6\\xbb–\\xb7‚„‰\\xc2ć\\xc1č\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4đ\\xd2\\xda\\xdb\\xd9ıˆ˜\\xafπ\\xcb˚\\xb8\\xca\\xe6ˇ\",\n    \"x-mac-cyrillic\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†\\xb0Ґ\\xa3\\xa7•\\xb6І\\xae\\xa9™Ђђ≠Ѓѓ∞\\xb1≤≥і\\xb5ґЈЄєЇїЉљЊњјЅ\\xac√ƒ≈∆\\xab\\xbb…\\xa0ЋћЌќѕ–—“”‘’\\xf7„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\",\n    \"x-mac-gaelic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8Ḃ\\xb1≤≥ḃĊċḊḋḞḟĠġṀ\\xe6\\xf8ṁṖṗɼƒſṠ\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’ṡẛ\\xffŸṪ€‹›Ŷŷṫ\\xb7Ỳỳ⁊\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4♣\\xd2\\xda\\xdb\\xd9ı\\xdd\\xfdŴŵẄẅẀẁẂẃ\",\n    \"x-mac-greek\": \"\\xc4\\xb9\\xb2\\xc9\\xb3\\xd6\\xdc΅\\xe0\\xe2\\xe4΄\\xa8\\xe7\\xe9\\xe8\\xea\\xeb\\xa3™\\xee\\xef•\\xbd‰\\xf4\\xf6\\xa6€\\xf9\\xfb\\xfc†ΓΔΘΛΞΠ\\xdf\\xae\\xa9ΣΪ\\xa7≠\\xb0\\xb7Α\\xb1≤≥\\xa5ΒΕΖΗΙΚΜΦΫΨΩάΝ\\xacΟΡ≈Τ\\xab\\xbb…\\xa0ΥΧΆΈœ–―“”‘’\\xf7ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ\\xad\",\n    \"x-mac-icelandic\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc\\xdd\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€\\xd0\\xf0\\xde\\xfe\\xfd\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-inuit\": \"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ\\xb0ᒡᒥᒦ•\\xb6ᒧ\\xae\\xa9™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ…\\xa0ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł\",\n    \"x-mac-ce\": \"\\xc4Āā\\xc9Ą\\xd6\\xdc\\xe1ąČ\\xe4čĆć\\xe9ŹźĎ\\xedďĒēĖ\\xf3ė\\xf4\\xf6\\xf5\\xfaĚě\\xfc†\\xb0Ę\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™ę\\xa8≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ\\xac√ńŇ∆\\xab\\xbb…\\xa0ňŐ\\xd5őŌ–—“”‘’\\xf7◊ōŔŕŘ‹›řŖŗŠ‚„šŚś\\xc1Ťť\\xcdŽžŪ\\xd3\\xd4ūŮ\\xdaůŰűŲų\\xdd\\xfdķŻŁżĢˇ\",\n    macintosh: \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›ﬁﬂ‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-romanian\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠ĂȘ∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩăș\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸ⁄€‹›Țț‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ıˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\",\n    \"x-mac-turkish\": \"\\xc4\\xc5\\xc7\\xc9\\xd1\\xd6\\xdc\\xe1\\xe0\\xe2\\xe4\\xe3\\xe5\\xe7\\xe9\\xe8\\xea\\xeb\\xed\\xec\\xee\\xef\\xf1\\xf3\\xf2\\xf4\\xf6\\xf5\\xfa\\xf9\\xfb\\xfc†\\xb0\\xa2\\xa3\\xa7•\\xb6\\xdf\\xae\\xa9™\\xb4\\xa8≠\\xc6\\xd8∞\\xb1≤≥\\xa5\\xb5∂∑∏π∫\\xaa\\xbaΩ\\xe6\\xf8\\xbf\\xa1\\xac√ƒ≈∆\\xab\\xbb…\\xa0\\xc0\\xc3\\xd5Œœ–—“”‘’\\xf7◊\\xffŸĞğİıŞş‡\\xb7‚„‰\\xc2\\xca\\xc1\\xcb\\xc8\\xcd\\xce\\xcf\\xcc\\xd3\\xd4\\xd2\\xda\\xdb\\xd9ˆ˜\\xaf˘˙˚\\xb8˝˛ˇ\"\n};\ndecode.MACSTRING = function(dataView, offset, dataLength, encoding) {\n    var table = eightBitMacEncodings[encoding];\n    if (table === void 0) {\n        return void 0;\n    }\n    var result = \"\";\n    for(var i = 0; i < dataLength; i++){\n        var c2 = dataView.getUint8(offset + i);\n        if (c2 <= 127) {\n            result += String.fromCharCode(c2);\n        } else {\n            result += table[c2 & 127];\n        }\n    }\n    return result;\n};\nfunction parseMetaTable(data, start) {\n    var p = new parse.Parser(data, start);\n    var tableVersion = p.parseULong();\n    check.argument(tableVersion === 1, \"Unsupported META table version.\");\n    p.parseULong();\n    p.parseULong();\n    var numDataMaps = p.parseULong();\n    var tags = {};\n    for(var i = 0; i < numDataMaps; i++){\n        var tag = p.parseTag();\n        var dataOffset = p.parseULong();\n        var dataLength = p.parseULong();\n        var text = decode.UTF8(data, start + dataOffset, dataLength);\n        tags[tag] = text;\n    }\n    return tags;\n}\nvar meta = {\n    parse: parseMetaTable\n};\nfunction parseOpenTypeTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 12;\n    for(var i = 0; i < numTables; i += 1){\n        var tag = parse.getTag(data, p);\n        var checksum = parse.getULong(data, p + 4);\n        var offset = parse.getULong(data, p + 8);\n        var length = parse.getULong(data, p + 12);\n        tableEntries.push({\n            tag,\n            checksum,\n            offset,\n            length,\n            compression: false\n        });\n        p += 16;\n    }\n    return tableEntries;\n}\nfunction parseWOFFTableEntries(data, numTables) {\n    var tableEntries = [];\n    var p = 44;\n    for(var i = 0; i < numTables; i += 1){\n        var tag = parse.getTag(data, p);\n        var offset = parse.getULong(data, p + 4);\n        var compLength = parse.getULong(data, p + 8);\n        var origLength = parse.getULong(data, p + 12);\n        var compression = void 0;\n        if (compLength < origLength) {\n            compression = \"WOFF\";\n        } else {\n            compression = false;\n        }\n        tableEntries.push({\n            tag,\n            offset,\n            compression,\n            compressedLength: compLength,\n            length: origLength\n        });\n        p += 20;\n    }\n    return tableEntries;\n}\nfunction uncompressTable(data, tableEntry) {\n    if (tableEntry.compression === \"WOFF\") {\n        var inBuffer = new Uint8Array(data.buffer, tableEntry.offset + 2, tableEntry.compressedLength - 2);\n        var outBuffer = new Uint8Array(tableEntry.length);\n        inflateSync(inBuffer, outBuffer);\n        if (outBuffer.byteLength !== tableEntry.length) {\n            throw new Error(\"Decompression error: \" + tableEntry.tag + \" decompressed length doesn't match recorded length\");\n        }\n        var view = new DataView(outBuffer.buffer, 0);\n        return {\n            data: view,\n            offset: 0\n        };\n    } else {\n        return {\n            data,\n            offset: tableEntry.offset\n        };\n    }\n}\nfunction parseBuffer(buffer, opt) {\n    opt = opt === void 0 || opt === null ? {} : opt;\n    var indexToLocFormat;\n    var font = new Font({\n        empty: true\n    });\n    var data = new DataView(buffer, 0);\n    var numTables;\n    var tableEntries = [];\n    var signature = parse.getTag(data, 0);\n    if (signature === String.fromCharCode(0, 1, 0, 0) || signature === \"true\" || signature === \"typ1\") {\n        font.outlinesFormat = \"truetype\";\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === \"OTTO\") {\n        font.outlinesFormat = \"cff\";\n        numTables = parse.getUShort(data, 4);\n        tableEntries = parseOpenTypeTableEntries(data, numTables);\n    } else if (signature === \"wOFF\") {\n        var flavor = parse.getTag(data, 4);\n        if (flavor === String.fromCharCode(0, 1, 0, 0)) {\n            font.outlinesFormat = \"truetype\";\n        } else if (flavor === \"OTTO\") {\n            font.outlinesFormat = \"cff\";\n        } else {\n            throw new Error(\"Unsupported OpenType flavor \" + signature);\n        }\n        numTables = parse.getUShort(data, 12);\n        tableEntries = parseWOFFTableEntries(data, numTables);\n    } else {\n        throw new Error(\"Unsupported OpenType signature \" + signature);\n    }\n    var cffTableEntry;\n    var fvarTableEntry;\n    var glyfTableEntry;\n    var gdefTableEntry;\n    var gposTableEntry;\n    var gsubTableEntry;\n    var hmtxTableEntry;\n    var kernTableEntry;\n    var locaTableEntry;\n    var metaTableEntry;\n    var p;\n    for(var i = 0; i < numTables; i += 1){\n        var tableEntry = tableEntries[i];\n        var table = void 0;\n        switch(tableEntry.tag){\n            case \"cmap\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.cmap = cmap.parse(table.data, table.offset);\n                font.encoding = new CmapEncoding(font.tables.cmap);\n                break;\n            case \"cvt \":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.cvt = p.parseShortList(tableEntry.length / 2);\n                break;\n            case \"fvar\":\n                fvarTableEntry = tableEntry;\n                break;\n            case \"fpgm\":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.fpgm = p.parseByteList(tableEntry.length);\n                break;\n            case \"head\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.head = head.parse(table.data, table.offset);\n                font.unitsPerEm = font.tables.head.unitsPerEm;\n                indexToLocFormat = font.tables.head.indexToLocFormat;\n                break;\n            case \"hhea\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.hhea = hhea.parse(table.data, table.offset);\n                font.ascender = font.tables.hhea.ascender;\n                font.descender = font.tables.hhea.descender;\n                font.numberOfHMetrics = font.tables.hhea.numberOfHMetrics;\n                break;\n            case \"hmtx\":\n                hmtxTableEntry = tableEntry;\n                break;\n            case \"ltag\":\n                table = uncompressTable(data, tableEntry);\n                ltagTable = ltag.parse(table.data, table.offset);\n                break;\n            case \"maxp\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.maxp = maxp.parse(table.data, table.offset);\n                font.numGlyphs = font.tables.maxp.numGlyphs;\n                break;\n            case \"OS/2\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.os2 = os2.parse(table.data, table.offset);\n                break;\n            case \"post\":\n                table = uncompressTable(data, tableEntry);\n                font.tables.post = post.parse(table.data, table.offset);\n                break;\n            case \"prep\":\n                table = uncompressTable(data, tableEntry);\n                p = new parse.Parser(table.data, table.offset);\n                font.tables.prep = p.parseByteList(tableEntry.length);\n                break;\n            case \"glyf\":\n                glyfTableEntry = tableEntry;\n                break;\n            case \"loca\":\n                locaTableEntry = tableEntry;\n                break;\n            case \"CFF \":\n                cffTableEntry = tableEntry;\n                break;\n            case \"kern\":\n                kernTableEntry = tableEntry;\n                break;\n            case \"GDEF\":\n                gdefTableEntry = tableEntry;\n                break;\n            case \"GPOS\":\n                gposTableEntry = tableEntry;\n                break;\n            case \"GSUB\":\n                gsubTableEntry = tableEntry;\n                break;\n            case \"meta\":\n                metaTableEntry = tableEntry;\n                break;\n        }\n    }\n    if (glyfTableEntry && locaTableEntry) {\n        var shortVersion = indexToLocFormat === 0;\n        var locaTable = uncompressTable(data, locaTableEntry);\n        var locaOffsets = loca.parse(locaTable.data, locaTable.offset, font.numGlyphs, shortVersion);\n        var glyfTable = uncompressTable(data, glyfTableEntry);\n        font.glyphs = glyf.parse(glyfTable.data, glyfTable.offset, locaOffsets, font, opt);\n    } else if (cffTableEntry) {\n        var cffTable = uncompressTable(data, cffTableEntry);\n        cff.parse(cffTable.data, cffTable.offset, font, opt);\n    } else {\n        throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n    }\n    var hmtxTable = uncompressTable(data, hmtxTableEntry);\n    hmtx.parse(font, hmtxTable.data, hmtxTable.offset, font.numberOfHMetrics, font.numGlyphs, font.glyphs, opt);\n    addGlyphNames(font, opt);\n    if (kernTableEntry) {\n        var kernTable = uncompressTable(data, kernTableEntry);\n        font.kerningPairs = kern.parse(kernTable.data, kernTable.offset);\n    } else {\n        font.kerningPairs = {};\n    }\n    if (gdefTableEntry) {\n        var gdefTable = uncompressTable(data, gdefTableEntry);\n        font.tables.gdef = gdef.parse(gdefTable.data, gdefTable.offset);\n    }\n    if (gposTableEntry) {\n        var gposTable = uncompressTable(data, gposTableEntry);\n        font.tables.gpos = gpos.parse(gposTable.data, gposTable.offset);\n        font.position.init();\n    }\n    if (gsubTableEntry) {\n        var gsubTable = uncompressTable(data, gsubTableEntry);\n        font.tables.gsub = gsub.parse(gsubTable.data, gsubTable.offset);\n    }\n    if (fvarTableEntry) {\n        var fvarTable = uncompressTable(data, fvarTableEntry);\n        font.tables.fvar = fvar.parse(fvarTable.data, fvarTable.offset, font.names);\n    }\n    if (metaTableEntry) {\n        var metaTable = uncompressTable(data, metaTableEntry);\n        font.tables.meta = meta.parse(metaTable.data, metaTable.offset);\n        font.metas = font.tables.meta;\n    }\n    return font;\n}\nfunction load() {}\nfunction loadSync() {}\nvar opentype = /* @__PURE__ */ Object.freeze({\n    __proto__: null,\n    Font,\n    Glyph,\n    Path,\n    _parse: parse,\n    parse: parseBuffer,\n    load,\n    loadSync\n});\nvar opentype_module_default = opentype;\n// node_modules/.pnpm/satori@0.4.4/node_modules/satori/dist/index.wasm.js\nvar Qu = Object.create;\nvar gr = Object.defineProperty;\nvar Ku = Object.getOwnPropertyDescriptor;\nvar Ju = Object.getOwnPropertyNames;\nvar Zu = Object.getPrototypeOf;\nvar el = Object.prototype.hasOwnProperty;\nvar vr = (e, t)=>()=>(e && (t = e(e = 0)), t);\nvar R = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports);\nvar nn = (e, t)=>{\n    for(var n in t)gr(e, n, {\n        get: t[n],\n        enumerable: true\n    });\n};\nvar Eo = (e, t, n, r)=>{\n    if (t && typeof t == \"object\" || typeof t == \"function\") for (let i of Ju(t))!el.call(e, i) && i !== n && gr(e, i, {\n        get: ()=>t[i],\n        enumerable: !(r = Ku(t, i)) || r.enumerable\n    });\n    return e;\n};\nvar tl = (e, t, n)=>(n = e != null ? Qu(Zu(e)) : {}, Eo(t || !e || !e.__esModule ? gr(n, \"default\", {\n        value: e,\n        enumerable: true\n    }) : n, e));\nvar br = (e)=>Eo(gr({}, \"__esModule\", {\n        value: true\n    }), e);\nvar c = vr(()=>{});\nvar Po = {};\nnn(Po, {\n    getYogaModule: ()=>rl\n});\nasync function rl() {\n    return {};\n}\nvar Ao = vr(()=>{\n    c();\n});\nvar In = R((An)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(An, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(An, \"default\", {\n        enumerable: true,\n        get: ()=>Hl\n    });\n    function Hl(e) {\n        if (e = `${e}`, e === \"0\") return \"0\";\n        if (/^[+-]?(\\d+|\\d*\\.\\d+)(e[+-]?\\d+)?(%|\\w+)?$/.test(e)) return e.replace(/^[+-]?/, (t)=>t === \"-\" ? \"\" : \"-\");\n        if (e.includes(\"var(\") || e.includes(\"calc(\")) return `calc(${e} * -1)`;\n    }\n});\nvar cs = R((Rn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Rn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Rn, \"default\", {\n        enumerable: true,\n        get: ()=>Vl\n    });\n    var Vl = [\n        \"preflight\",\n        \"container\",\n        \"accessibility\",\n        \"pointerEvents\",\n        \"visibility\",\n        \"position\",\n        \"inset\",\n        \"isolation\",\n        \"zIndex\",\n        \"order\",\n        \"gridColumn\",\n        \"gridColumnStart\",\n        \"gridColumnEnd\",\n        \"gridRow\",\n        \"gridRowStart\",\n        \"gridRowEnd\",\n        \"float\",\n        \"clear\",\n        \"margin\",\n        \"boxSizing\",\n        \"display\",\n        \"aspectRatio\",\n        \"height\",\n        \"maxHeight\",\n        \"minHeight\",\n        \"width\",\n        \"minWidth\",\n        \"maxWidth\",\n        \"flex\",\n        \"flexShrink\",\n        \"flexGrow\",\n        \"flexBasis\",\n        \"tableLayout\",\n        \"borderCollapse\",\n        \"borderSpacing\",\n        \"transformOrigin\",\n        \"translate\",\n        \"rotate\",\n        \"skew\",\n        \"scale\",\n        \"transform\",\n        \"animation\",\n        \"cursor\",\n        \"touchAction\",\n        \"userSelect\",\n        \"resize\",\n        \"scrollSnapType\",\n        \"scrollSnapAlign\",\n        \"scrollSnapStop\",\n        \"scrollMargin\",\n        \"scrollPadding\",\n        \"listStylePosition\",\n        \"listStyleType\",\n        \"appearance\",\n        \"columns\",\n        \"breakBefore\",\n        \"breakInside\",\n        \"breakAfter\",\n        \"gridAutoColumns\",\n        \"gridAutoFlow\",\n        \"gridAutoRows\",\n        \"gridTemplateColumns\",\n        \"gridTemplateRows\",\n        \"flexDirection\",\n        \"flexWrap\",\n        \"placeContent\",\n        \"placeItems\",\n        \"alignContent\",\n        \"alignItems\",\n        \"justifyContent\",\n        \"justifyItems\",\n        \"gap\",\n        \"space\",\n        \"divideWidth\",\n        \"divideStyle\",\n        \"divideColor\",\n        \"divideOpacity\",\n        \"placeSelf\",\n        \"alignSelf\",\n        \"justifySelf\",\n        \"overflow\",\n        \"overscrollBehavior\",\n        \"scrollBehavior\",\n        \"textOverflow\",\n        \"whitespace\",\n        \"wordBreak\",\n        \"borderRadius\",\n        \"borderWidth\",\n        \"borderStyle\",\n        \"borderColor\",\n        \"borderOpacity\",\n        \"backgroundColor\",\n        \"backgroundOpacity\",\n        \"backgroundImage\",\n        \"gradientColorStops\",\n        \"boxDecorationBreak\",\n        \"backgroundSize\",\n        \"backgroundAttachment\",\n        \"backgroundClip\",\n        \"backgroundPosition\",\n        \"backgroundRepeat\",\n        \"backgroundOrigin\",\n        \"fill\",\n        \"stroke\",\n        \"strokeWidth\",\n        \"objectFit\",\n        \"objectPosition\",\n        \"padding\",\n        \"textAlign\",\n        \"textIndent\",\n        \"verticalAlign\",\n        \"fontFamily\",\n        \"fontSize\",\n        \"fontWeight\",\n        \"textTransform\",\n        \"fontStyle\",\n        \"fontVariantNumeric\",\n        \"lineHeight\",\n        \"letterSpacing\",\n        \"textColor\",\n        \"textOpacity\",\n        \"textDecoration\",\n        \"textDecorationColor\",\n        \"textDecorationStyle\",\n        \"textDecorationThickness\",\n        \"textUnderlineOffset\",\n        \"fontSmoothing\",\n        \"placeholderColor\",\n        \"placeholderOpacity\",\n        \"caretColor\",\n        \"accentColor\",\n        \"opacity\",\n        \"backgroundBlendMode\",\n        \"mixBlendMode\",\n        \"boxShadow\",\n        \"boxShadowColor\",\n        \"outlineStyle\",\n        \"outlineWidth\",\n        \"outlineOffset\",\n        \"outlineColor\",\n        \"ringWidth\",\n        \"ringColor\",\n        \"ringOpacity\",\n        \"ringOffsetWidth\",\n        \"ringOffsetColor\",\n        \"blur\",\n        \"brightness\",\n        \"contrast\",\n        \"dropShadow\",\n        \"grayscale\",\n        \"hueRotate\",\n        \"invert\",\n        \"saturate\",\n        \"sepia\",\n        \"filter\",\n        \"backdropBlur\",\n        \"backdropBrightness\",\n        \"backdropContrast\",\n        \"backdropGrayscale\",\n        \"backdropHueRotate\",\n        \"backdropInvert\",\n        \"backdropOpacity\",\n        \"backdropSaturate\",\n        \"backdropSepia\",\n        \"backdropFilter\",\n        \"transitionProperty\",\n        \"transitionDelay\",\n        \"transitionDuration\",\n        \"transitionTimingFunction\",\n        \"willChange\",\n        \"content\"\n    ];\n});\nvar ds = R((Ln)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Ln, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Ln, \"default\", {\n        enumerable: true,\n        get: ()=>Yl\n    });\n    function Yl(e, t) {\n        return e === void 0 ? t : Array.isArray(e) ? e : [\n            ...new Set(t.filter((r)=>e !== false && e[r] !== false).concat(Object.keys(e).filter((r)=>e[r] !== false)))\n        ];\n    }\n});\nvar Cn = R((Ig, ps)=>{\n    c();\n    ps.exports = {\n        content: [],\n        presets: [],\n        darkMode: \"media\",\n        theme: {\n            screens: {\n                sm: \"640px\",\n                md: \"768px\",\n                lg: \"1024px\",\n                xl: \"1280px\",\n                \"2xl\": \"1536px\"\n            },\n            colors: ({ colors: e  })=>({\n                    inherit: e.inherit,\n                    current: e.current,\n                    transparent: e.transparent,\n                    black: e.black,\n                    white: e.white,\n                    slate: e.slate,\n                    gray: e.gray,\n                    zinc: e.zinc,\n                    neutral: e.neutral,\n                    stone: e.stone,\n                    red: e.red,\n                    orange: e.orange,\n                    amber: e.amber,\n                    yellow: e.yellow,\n                    lime: e.lime,\n                    green: e.green,\n                    emerald: e.emerald,\n                    teal: e.teal,\n                    cyan: e.cyan,\n                    sky: e.sky,\n                    blue: e.blue,\n                    indigo: e.indigo,\n                    violet: e.violet,\n                    purple: e.purple,\n                    fuchsia: e.fuchsia,\n                    pink: e.pink,\n                    rose: e.rose\n                }),\n            columns: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                \"3xs\": \"16rem\",\n                \"2xs\": \"18rem\",\n                xs: \"20rem\",\n                sm: \"24rem\",\n                md: \"28rem\",\n                lg: \"32rem\",\n                xl: \"36rem\",\n                \"2xl\": \"42rem\",\n                \"3xl\": \"48rem\",\n                \"4xl\": \"56rem\",\n                \"5xl\": \"64rem\",\n                \"6xl\": \"72rem\",\n                \"7xl\": \"80rem\"\n            },\n            spacing: {\n                px: \"1px\",\n                0: \"0px\",\n                0.5: \"0.125rem\",\n                1: \"0.25rem\",\n                1.5: \"0.375rem\",\n                2: \"0.5rem\",\n                2.5: \"0.625rem\",\n                3: \"0.75rem\",\n                3.5: \"0.875rem\",\n                4: \"1rem\",\n                5: \"1.25rem\",\n                6: \"1.5rem\",\n                7: \"1.75rem\",\n                8: \"2rem\",\n                9: \"2.25rem\",\n                10: \"2.5rem\",\n                11: \"2.75rem\",\n                12: \"3rem\",\n                14: \"3.5rem\",\n                16: \"4rem\",\n                20: \"5rem\",\n                24: \"6rem\",\n                28: \"7rem\",\n                32: \"8rem\",\n                36: \"9rem\",\n                40: \"10rem\",\n                44: \"11rem\",\n                48: \"12rem\",\n                52: \"13rem\",\n                56: \"14rem\",\n                60: \"15rem\",\n                64: \"16rem\",\n                72: \"18rem\",\n                80: \"20rem\",\n                96: \"24rem\"\n            },\n            animation: {\n                none: \"none\",\n                spin: \"spin 1s linear infinite\",\n                ping: \"ping 1s cubic-bezier(0, 0, 0.2, 1) infinite\",\n                pulse: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                bounce: \"bounce 1s infinite\"\n            },\n            aspectRatio: {\n                auto: \"auto\",\n                square: \"1 / 1\",\n                video: \"16 / 9\"\n            },\n            backdropBlur: ({ theme: e  })=>e(\"blur\"),\n            backdropBrightness: ({ theme: e  })=>e(\"brightness\"),\n            backdropContrast: ({ theme: e  })=>e(\"contrast\"),\n            backdropGrayscale: ({ theme: e  })=>e(\"grayscale\"),\n            backdropHueRotate: ({ theme: e  })=>e(\"hueRotate\"),\n            backdropInvert: ({ theme: e  })=>e(\"invert\"),\n            backdropOpacity: ({ theme: e  })=>e(\"opacity\"),\n            backdropSaturate: ({ theme: e  })=>e(\"saturate\"),\n            backdropSepia: ({ theme: e  })=>e(\"sepia\"),\n            backgroundColor: ({ theme: e  })=>e(\"colors\"),\n            backgroundImage: {\n                none: \"none\",\n                \"gradient-to-t\": \"linear-gradient(to top, var(--tw-gradient-stops))\",\n                \"gradient-to-tr\": \"linear-gradient(to top right, var(--tw-gradient-stops))\",\n                \"gradient-to-r\": \"linear-gradient(to right, var(--tw-gradient-stops))\",\n                \"gradient-to-br\": \"linear-gradient(to bottom right, var(--tw-gradient-stops))\",\n                \"gradient-to-b\": \"linear-gradient(to bottom, var(--tw-gradient-stops))\",\n                \"gradient-to-bl\": \"linear-gradient(to bottom left, var(--tw-gradient-stops))\",\n                \"gradient-to-l\": \"linear-gradient(to left, var(--tw-gradient-stops))\",\n                \"gradient-to-tl\": \"linear-gradient(to top left, var(--tw-gradient-stops))\"\n            },\n            backgroundOpacity: ({ theme: e  })=>e(\"opacity\"),\n            backgroundPosition: {\n                bottom: \"bottom\",\n                center: \"center\",\n                left: \"left\",\n                \"left-bottom\": \"left bottom\",\n                \"left-top\": \"left top\",\n                right: \"right\",\n                \"right-bottom\": \"right bottom\",\n                \"right-top\": \"right top\",\n                top: \"top\"\n            },\n            backgroundSize: {\n                auto: \"auto\",\n                cover: \"cover\",\n                contain: \"contain\"\n            },\n            blur: {\n                0: \"0\",\n                none: \"0\",\n                sm: \"4px\",\n                DEFAULT: \"8px\",\n                md: \"12px\",\n                lg: \"16px\",\n                xl: \"24px\",\n                \"2xl\": \"40px\",\n                \"3xl\": \"64px\"\n            },\n            brightness: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                90: \".9\",\n                95: \".95\",\n                100: \"1\",\n                105: \"1.05\",\n                110: \"1.1\",\n                125: \"1.25\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            borderColor: ({ theme: e  })=>({\n                    ...e(\"colors\"),\n                    DEFAULT: e(\"colors.gray.200\", \"currentColor\")\n                }),\n            borderOpacity: ({ theme: e  })=>e(\"opacity\"),\n            borderRadius: {\n                none: \"0px\",\n                sm: \"0.125rem\",\n                DEFAULT: \"0.25rem\",\n                md: \"0.375rem\",\n                lg: \"0.5rem\",\n                xl: \"0.75rem\",\n                \"2xl\": \"1rem\",\n                \"3xl\": \"1.5rem\",\n                full: \"9999px\"\n            },\n            borderSpacing: ({ theme: e  })=>({\n                    ...e(\"spacing\")\n                }),\n            borderWidth: {\n                DEFAULT: \"1px\",\n                0: \"0px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            boxShadow: {\n                sm: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n                DEFAULT: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\",\n                md: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\",\n                lg: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\",\n                xl: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\",\n                \"2xl\": \"0 25px 50px -12px rgb(0 0 0 / 0.25)\",\n                inner: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\",\n                none: \"none\"\n            },\n            boxShadowColor: ({ theme: e  })=>e(\"colors\"),\n            caretColor: ({ theme: e  })=>e(\"colors\"),\n            accentColor: ({ theme: e  })=>({\n                    ...e(\"colors\"),\n                    auto: \"auto\"\n                }),\n            contrast: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                100: \"1\",\n                125: \"1.25\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            container: {},\n            content: {\n                none: \"none\"\n            },\n            cursor: {\n                auto: \"auto\",\n                default: \"default\",\n                pointer: \"pointer\",\n                wait: \"wait\",\n                text: \"text\",\n                move: \"move\",\n                help: \"help\",\n                \"not-allowed\": \"not-allowed\",\n                none: \"none\",\n                \"context-menu\": \"context-menu\",\n                progress: \"progress\",\n                cell: \"cell\",\n                crosshair: \"crosshair\",\n                \"vertical-text\": \"vertical-text\",\n                alias: \"alias\",\n                copy: \"copy\",\n                \"no-drop\": \"no-drop\",\n                grab: \"grab\",\n                grabbing: \"grabbing\",\n                \"all-scroll\": \"all-scroll\",\n                \"col-resize\": \"col-resize\",\n                \"row-resize\": \"row-resize\",\n                \"n-resize\": \"n-resize\",\n                \"e-resize\": \"e-resize\",\n                \"s-resize\": \"s-resize\",\n                \"w-resize\": \"w-resize\",\n                \"ne-resize\": \"ne-resize\",\n                \"nw-resize\": \"nw-resize\",\n                \"se-resize\": \"se-resize\",\n                \"sw-resize\": \"sw-resize\",\n                \"ew-resize\": \"ew-resize\",\n                \"ns-resize\": \"ns-resize\",\n                \"nesw-resize\": \"nesw-resize\",\n                \"nwse-resize\": \"nwse-resize\",\n                \"zoom-in\": \"zoom-in\",\n                \"zoom-out\": \"zoom-out\"\n            },\n            divideColor: ({ theme: e  })=>e(\"borderColor\"),\n            divideOpacity: ({ theme: e  })=>e(\"borderOpacity\"),\n            divideWidth: ({ theme: e  })=>e(\"borderWidth\"),\n            dropShadow: {\n                sm: \"0 1px 1px rgb(0 0 0 / 0.05)\",\n                DEFAULT: [\n                    \"0 1px 2px rgb(0 0 0 / 0.1)\",\n                    \"0 1px 1px rgb(0 0 0 / 0.06)\"\n                ],\n                md: [\n                    \"0 4px 3px rgb(0 0 0 / 0.07)\",\n                    \"0 2px 2px rgb(0 0 0 / 0.06)\"\n                ],\n                lg: [\n                    \"0 10px 8px rgb(0 0 0 / 0.04)\",\n                    \"0 4px 3px rgb(0 0 0 / 0.1)\"\n                ],\n                xl: [\n                    \"0 20px 13px rgb(0 0 0 / 0.03)\",\n                    \"0 8px 5px rgb(0 0 0 / 0.08)\"\n                ],\n                \"2xl\": \"0 25px 25px rgb(0 0 0 / 0.15)\",\n                none: \"0 0 #0000\"\n            },\n            fill: ({ theme: e  })=>e(\"colors\"),\n            grayscale: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            hueRotate: {\n                0: \"0deg\",\n                15: \"15deg\",\n                30: \"30deg\",\n                60: \"60deg\",\n                90: \"90deg\",\n                180: \"180deg\"\n            },\n            invert: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            flex: {\n                1: \"1 1 0%\",\n                auto: \"1 1 auto\",\n                initial: \"0 1 auto\",\n                none: \"none\"\n            },\n            flexBasis: ({ theme: e  })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    \"1/12\": \"8.333333%\",\n                    \"2/12\": \"16.666667%\",\n                    \"3/12\": \"25%\",\n                    \"4/12\": \"33.333333%\",\n                    \"5/12\": \"41.666667%\",\n                    \"6/12\": \"50%\",\n                    \"7/12\": \"58.333333%\",\n                    \"8/12\": \"66.666667%\",\n                    \"9/12\": \"75%\",\n                    \"10/12\": \"83.333333%\",\n                    \"11/12\": \"91.666667%\",\n                    full: \"100%\"\n                }),\n            flexGrow: {\n                0: \"0\",\n                DEFAULT: \"1\"\n            },\n            flexShrink: {\n                0: \"0\",\n                DEFAULT: \"1\"\n            },\n            fontFamily: {\n                sans: [\n                    \"ui-sans-serif\",\n                    \"system-ui\",\n                    \"-apple-system\",\n                    \"BlinkMacSystemFont\",\n                    '\"Segoe UI\"',\n                    \"Roboto\",\n                    '\"Helvetica Neue\"',\n                    \"Arial\",\n                    '\"Noto Sans\"',\n                    \"sans-serif\",\n                    '\"Apple Color Emoji\"',\n                    '\"Segoe UI Emoji\"',\n                    '\"Segoe UI Symbol\"',\n                    '\"Noto Color Emoji\"'\n                ],\n                serif: [\n                    \"ui-serif\",\n                    \"Georgia\",\n                    \"Cambria\",\n                    '\"Times New Roman\"',\n                    \"Times\",\n                    \"serif\"\n                ],\n                mono: [\n                    \"ui-monospace\",\n                    \"SFMono-Regular\",\n                    \"Menlo\",\n                    \"Monaco\",\n                    \"Consolas\",\n                    '\"Liberation Mono\"',\n                    '\"Courier New\"',\n                    \"monospace\"\n                ]\n            },\n            fontSize: {\n                xs: [\n                    \"0.75rem\",\n                    {\n                        lineHeight: \"1rem\"\n                    }\n                ],\n                sm: [\n                    \"0.875rem\",\n                    {\n                        lineHeight: \"1.25rem\"\n                    }\n                ],\n                base: [\n                    \"1rem\",\n                    {\n                        lineHeight: \"1.5rem\"\n                    }\n                ],\n                lg: [\n                    \"1.125rem\",\n                    {\n                        lineHeight: \"1.75rem\"\n                    }\n                ],\n                xl: [\n                    \"1.25rem\",\n                    {\n                        lineHeight: \"1.75rem\"\n                    }\n                ],\n                \"2xl\": [\n                    \"1.5rem\",\n                    {\n                        lineHeight: \"2rem\"\n                    }\n                ],\n                \"3xl\": [\n                    \"1.875rem\",\n                    {\n                        lineHeight: \"2.25rem\"\n                    }\n                ],\n                \"4xl\": [\n                    \"2.25rem\",\n                    {\n                        lineHeight: \"2.5rem\"\n                    }\n                ],\n                \"5xl\": [\n                    \"3rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"6xl\": [\n                    \"3.75rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"7xl\": [\n                    \"4.5rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"8xl\": [\n                    \"6rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ],\n                \"9xl\": [\n                    \"8rem\",\n                    {\n                        lineHeight: \"1\"\n                    }\n                ]\n            },\n            fontWeight: {\n                thin: \"100\",\n                extralight: \"200\",\n                light: \"300\",\n                normal: \"400\",\n                medium: \"500\",\n                semibold: \"600\",\n                bold: \"700\",\n                extrabold: \"800\",\n                black: \"900\"\n            },\n            gap: ({ theme: e  })=>e(\"spacing\"),\n            gradientColorStops: ({ theme: e  })=>e(\"colors\"),\n            gridAutoColumns: {\n                auto: \"auto\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fr: \"minmax(0, 1fr)\"\n            },\n            gridAutoRows: {\n                auto: \"auto\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fr: \"minmax(0, 1fr)\"\n            },\n            gridColumn: {\n                auto: \"auto\",\n                \"span-1\": \"span 1 / span 1\",\n                \"span-2\": \"span 2 / span 2\",\n                \"span-3\": \"span 3 / span 3\",\n                \"span-4\": \"span 4 / span 4\",\n                \"span-5\": \"span 5 / span 5\",\n                \"span-6\": \"span 6 / span 6\",\n                \"span-7\": \"span 7 / span 7\",\n                \"span-8\": \"span 8 / span 8\",\n                \"span-9\": \"span 9 / span 9\",\n                \"span-10\": \"span 10 / span 10\",\n                \"span-11\": \"span 11 / span 11\",\n                \"span-12\": \"span 12 / span 12\",\n                \"span-full\": \"1 / -1\"\n            },\n            gridColumnEnd: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                13: \"13\"\n            },\n            gridColumnStart: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\",\n                13: \"13\"\n            },\n            gridRow: {\n                auto: \"auto\",\n                \"span-1\": \"span 1 / span 1\",\n                \"span-2\": \"span 2 / span 2\",\n                \"span-3\": \"span 3 / span 3\",\n                \"span-4\": \"span 4 / span 4\",\n                \"span-5\": \"span 5 / span 5\",\n                \"span-6\": \"span 6 / span 6\",\n                \"span-full\": \"1 / -1\"\n            },\n            gridRowStart: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\"\n            },\n            gridRowEnd: {\n                auto: \"auto\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\"\n            },\n            gridTemplateColumns: {\n                none: \"none\",\n                1: \"repeat(1, minmax(0, 1fr))\",\n                2: \"repeat(2, minmax(0, 1fr))\",\n                3: \"repeat(3, minmax(0, 1fr))\",\n                4: \"repeat(4, minmax(0, 1fr))\",\n                5: \"repeat(5, minmax(0, 1fr))\",\n                6: \"repeat(6, minmax(0, 1fr))\",\n                7: \"repeat(7, minmax(0, 1fr))\",\n                8: \"repeat(8, minmax(0, 1fr))\",\n                9: \"repeat(9, minmax(0, 1fr))\",\n                10: \"repeat(10, minmax(0, 1fr))\",\n                11: \"repeat(11, minmax(0, 1fr))\",\n                12: \"repeat(12, minmax(0, 1fr))\"\n            },\n            gridTemplateRows: {\n                none: \"none\",\n                1: \"repeat(1, minmax(0, 1fr))\",\n                2: \"repeat(2, minmax(0, 1fr))\",\n                3: \"repeat(3, minmax(0, 1fr))\",\n                4: \"repeat(4, minmax(0, 1fr))\",\n                5: \"repeat(5, minmax(0, 1fr))\",\n                6: \"repeat(6, minmax(0, 1fr))\"\n            },\n            height: ({ theme: e  })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    full: \"100%\",\n                    screen: \"100vh\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            inset: ({ theme: e  })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    full: \"100%\"\n                }),\n            keyframes: {\n                spin: {\n                    to: {\n                        transform: \"rotate(360deg)\"\n                    }\n                },\n                ping: {\n                    \"75%, 100%\": {\n                        transform: \"scale(2)\",\n                        opacity: \"0\"\n                    }\n                },\n                pulse: {\n                    \"50%\": {\n                        opacity: \".5\"\n                    }\n                },\n                bounce: {\n                    \"0%, 100%\": {\n                        transform: \"translateY(-25%)\",\n                        animationTimingFunction: \"cubic-bezier(0.8,0,1,1)\"\n                    },\n                    \"50%\": {\n                        transform: \"none\",\n                        animationTimingFunction: \"cubic-bezier(0,0,0.2,1)\"\n                    }\n                }\n            },\n            letterSpacing: {\n                tighter: \"-0.05em\",\n                tight: \"-0.025em\",\n                normal: \"0em\",\n                wide: \"0.025em\",\n                wider: \"0.05em\",\n                widest: \"0.1em\"\n            },\n            lineHeight: {\n                none: \"1\",\n                tight: \"1.25\",\n                snug: \"1.375\",\n                normal: \"1.5\",\n                relaxed: \"1.625\",\n                loose: \"2\",\n                3: \".75rem\",\n                4: \"1rem\",\n                5: \"1.25rem\",\n                6: \"1.5rem\",\n                7: \"1.75rem\",\n                8: \"2rem\",\n                9: \"2.25rem\",\n                10: \"2.5rem\"\n            },\n            listStyleType: {\n                none: \"none\",\n                disc: \"disc\",\n                decimal: \"decimal\"\n            },\n            margin: ({ theme: e  })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\")\n                }),\n            maxHeight: ({ theme: e  })=>({\n                    ...e(\"spacing\"),\n                    full: \"100%\",\n                    screen: \"100vh\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            maxWidth: ({ theme: e , breakpoints: t  })=>({\n                    none: \"none\",\n                    0: \"0rem\",\n                    xs: \"20rem\",\n                    sm: \"24rem\",\n                    md: \"28rem\",\n                    lg: \"32rem\",\n                    xl: \"36rem\",\n                    \"2xl\": \"42rem\",\n                    \"3xl\": \"48rem\",\n                    \"4xl\": \"56rem\",\n                    \"5xl\": \"64rem\",\n                    \"6xl\": \"72rem\",\n                    \"7xl\": \"80rem\",\n                    full: \"100%\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\",\n                    prose: \"65ch\",\n                    ...t(e(\"screens\"))\n                }),\n            minHeight: {\n                0: \"0px\",\n                full: \"100%\",\n                screen: \"100vh\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fit: \"fit-content\"\n            },\n            minWidth: {\n                0: \"0px\",\n                full: \"100%\",\n                min: \"min-content\",\n                max: \"max-content\",\n                fit: \"fit-content\"\n            },\n            objectPosition: {\n                bottom: \"bottom\",\n                center: \"center\",\n                left: \"left\",\n                \"left-bottom\": \"left bottom\",\n                \"left-top\": \"left top\",\n                right: \"right\",\n                \"right-bottom\": \"right bottom\",\n                \"right-top\": \"right top\",\n                top: \"top\"\n            },\n            opacity: {\n                0: \"0\",\n                5: \"0.05\",\n                10: \"0.1\",\n                20: \"0.2\",\n                25: \"0.25\",\n                30: \"0.3\",\n                40: \"0.4\",\n                50: \"0.5\",\n                60: \"0.6\",\n                70: \"0.7\",\n                75: \"0.75\",\n                80: \"0.8\",\n                90: \"0.9\",\n                95: \"0.95\",\n                100: \"1\"\n            },\n            order: {\n                first: \"-9999\",\n                last: \"9999\",\n                none: \"0\",\n                1: \"1\",\n                2: \"2\",\n                3: \"3\",\n                4: \"4\",\n                5: \"5\",\n                6: \"6\",\n                7: \"7\",\n                8: \"8\",\n                9: \"9\",\n                10: \"10\",\n                11: \"11\",\n                12: \"12\"\n            },\n            padding: ({ theme: e  })=>e(\"spacing\"),\n            placeholderColor: ({ theme: e  })=>e(\"colors\"),\n            placeholderOpacity: ({ theme: e  })=>e(\"opacity\"),\n            outlineColor: ({ theme: e  })=>e(\"colors\"),\n            outlineOffset: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            outlineWidth: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            ringColor: ({ theme: e  })=>({\n                    DEFAULT: e(\"colors.blue.500\", \"#3b82f6\"),\n                    ...e(\"colors\")\n                }),\n            ringOffsetColor: ({ theme: e  })=>e(\"colors\"),\n            ringOffsetWidth: {\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            ringOpacity: ({ theme: e  })=>({\n                    DEFAULT: \"0.5\",\n                    ...e(\"opacity\")\n                }),\n            ringWidth: {\n                DEFAULT: \"3px\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            rotate: {\n                0: \"0deg\",\n                1: \"1deg\",\n                2: \"2deg\",\n                3: \"3deg\",\n                6: \"6deg\",\n                12: \"12deg\",\n                45: \"45deg\",\n                90: \"90deg\",\n                180: \"180deg\"\n            },\n            saturate: {\n                0: \"0\",\n                50: \".5\",\n                100: \"1\",\n                150: \"1.5\",\n                200: \"2\"\n            },\n            scale: {\n                0: \"0\",\n                50: \".5\",\n                75: \".75\",\n                90: \".9\",\n                95: \".95\",\n                100: \"1\",\n                105: \"1.05\",\n                110: \"1.1\",\n                125: \"1.25\",\n                150: \"1.5\"\n            },\n            scrollMargin: ({ theme: e  })=>({\n                    ...e(\"spacing\")\n                }),\n            scrollPadding: ({ theme: e  })=>e(\"spacing\"),\n            sepia: {\n                0: \"0\",\n                DEFAULT: \"100%\"\n            },\n            skew: {\n                0: \"0deg\",\n                1: \"1deg\",\n                2: \"2deg\",\n                3: \"3deg\",\n                6: \"6deg\",\n                12: \"12deg\"\n            },\n            space: ({ theme: e  })=>({\n                    ...e(\"spacing\")\n                }),\n            stroke: ({ theme: e  })=>e(\"colors\"),\n            strokeWidth: {\n                0: \"0\",\n                1: \"1\",\n                2: \"2\"\n            },\n            textColor: ({ theme: e  })=>e(\"colors\"),\n            textDecorationColor: ({ theme: e  })=>e(\"colors\"),\n            textDecorationThickness: {\n                auto: \"auto\",\n                \"from-font\": \"from-font\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            textUnderlineOffset: {\n                auto: \"auto\",\n                0: \"0px\",\n                1: \"1px\",\n                2: \"2px\",\n                4: \"4px\",\n                8: \"8px\"\n            },\n            textIndent: ({ theme: e  })=>({\n                    ...e(\"spacing\")\n                }),\n            textOpacity: ({ theme: e  })=>e(\"opacity\"),\n            transformOrigin: {\n                center: \"center\",\n                top: \"top\",\n                \"top-right\": \"top right\",\n                right: \"right\",\n                \"bottom-right\": \"bottom right\",\n                bottom: \"bottom\",\n                \"bottom-left\": \"bottom left\",\n                left: \"left\",\n                \"top-left\": \"top left\"\n            },\n            transitionDelay: {\n                75: \"75ms\",\n                100: \"100ms\",\n                150: \"150ms\",\n                200: \"200ms\",\n                300: \"300ms\",\n                500: \"500ms\",\n                700: \"700ms\",\n                1e3: \"1000ms\"\n            },\n            transitionDuration: {\n                DEFAULT: \"150ms\",\n                75: \"75ms\",\n                100: \"100ms\",\n                150: \"150ms\",\n                200: \"200ms\",\n                300: \"300ms\",\n                500: \"500ms\",\n                700: \"700ms\",\n                1e3: \"1000ms\"\n            },\n            transitionProperty: {\n                none: \"none\",\n                all: \"all\",\n                DEFAULT: \"color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter\",\n                colors: \"color, background-color, border-color, text-decoration-color, fill, stroke\",\n                opacity: \"opacity\",\n                shadow: \"box-shadow\",\n                transform: \"transform\"\n            },\n            transitionTimingFunction: {\n                DEFAULT: \"cubic-bezier(0.4, 0, 0.2, 1)\",\n                linear: \"linear\",\n                in: \"cubic-bezier(0.4, 0, 1, 1)\",\n                out: \"cubic-bezier(0, 0, 0.2, 1)\",\n                \"in-out\": \"cubic-bezier(0.4, 0, 0.2, 1)\"\n            },\n            translate: ({ theme: e  })=>({\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    full: \"100%\"\n                }),\n            width: ({ theme: e  })=>({\n                    auto: \"auto\",\n                    ...e(\"spacing\"),\n                    \"1/2\": \"50%\",\n                    \"1/3\": \"33.333333%\",\n                    \"2/3\": \"66.666667%\",\n                    \"1/4\": \"25%\",\n                    \"2/4\": \"50%\",\n                    \"3/4\": \"75%\",\n                    \"1/5\": \"20%\",\n                    \"2/5\": \"40%\",\n                    \"3/5\": \"60%\",\n                    \"4/5\": \"80%\",\n                    \"1/6\": \"16.666667%\",\n                    \"2/6\": \"33.333333%\",\n                    \"3/6\": \"50%\",\n                    \"4/6\": \"66.666667%\",\n                    \"5/6\": \"83.333333%\",\n                    \"1/12\": \"8.333333%\",\n                    \"2/12\": \"16.666667%\",\n                    \"3/12\": \"25%\",\n                    \"4/12\": \"33.333333%\",\n                    \"5/12\": \"41.666667%\",\n                    \"6/12\": \"50%\",\n                    \"7/12\": \"58.333333%\",\n                    \"8/12\": \"66.666667%\",\n                    \"9/12\": \"75%\",\n                    \"10/12\": \"83.333333%\",\n                    \"11/12\": \"91.666667%\",\n                    full: \"100%\",\n                    screen: \"100vw\",\n                    min: \"min-content\",\n                    max: \"max-content\",\n                    fit: \"fit-content\"\n                }),\n            willChange: {\n                auto: \"auto\",\n                scroll: \"scroll-position\",\n                contents: \"contents\",\n                transform: \"transform\"\n            },\n            zIndex: {\n                auto: \"auto\",\n                0: \"0\",\n                10: \"10\",\n                20: \"20\",\n                30: \"30\",\n                40: \"40\",\n                50: \"50\"\n            }\n        },\n        variantOrder: [\n            \"first\",\n            \"last\",\n            \"odd\",\n            \"even\",\n            \"visited\",\n            \"checked\",\n            \"empty\",\n            \"read-only\",\n            \"group-hover\",\n            \"group-focus\",\n            \"focus-within\",\n            \"hover\",\n            \"focus\",\n            \"focus-visible\",\n            \"active\",\n            \"disabled\"\n        ],\n        plugins: []\n    };\n});\nvar Ir = {};\nnn(Ir, {\n    default: ()=>Xl\n});\nvar Xl;\nvar Rr = vr(()=>{\n    c();\n    Xl = {\n        info (e, t) {\n            console.info(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        },\n        warn (e, t) {\n            console.warn(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        },\n        risk (e, t) {\n            console.error(...Array.isArray(e) ? [\n                e\n            ] : [\n                t,\n                e\n            ]);\n        }\n    };\n});\nvar hs = R((Dn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Dn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Dn, \"default\", {\n        enumerable: true,\n        get: ()=>Jl\n    });\n    var Ql = Kl((Rr(), br(Ir)));\n    function Kl(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Pt({ version: e , from: t , to: n  }) {\n        Ql.default.warn(`${t}-color-renamed`, [\n            `As of Tailwind CSS ${e}, \\`${t}\\` has been renamed to \\`${n}\\`.`,\n            \"Update your configuration file to silence this warning.\"\n        ]);\n    }\n    var Jl = {\n        inherit: \"inherit\",\n        current: \"currentColor\",\n        transparent: \"transparent\",\n        black: \"#000\",\n        white: \"#fff\",\n        slate: {\n            50: \"#f8fafc\",\n            100: \"#f1f5f9\",\n            200: \"#e2e8f0\",\n            300: \"#cbd5e1\",\n            400: \"#94a3b8\",\n            500: \"#64748b\",\n            600: \"#475569\",\n            700: \"#334155\",\n            800: \"#1e293b\",\n            900: \"#0f172a\"\n        },\n        gray: {\n            50: \"#f9fafb\",\n            100: \"#f3f4f6\",\n            200: \"#e5e7eb\",\n            300: \"#d1d5db\",\n            400: \"#9ca3af\",\n            500: \"#6b7280\",\n            600: \"#4b5563\",\n            700: \"#374151\",\n            800: \"#1f2937\",\n            900: \"#111827\"\n        },\n        zinc: {\n            50: \"#fafafa\",\n            100: \"#f4f4f5\",\n            200: \"#e4e4e7\",\n            300: \"#d4d4d8\",\n            400: \"#a1a1aa\",\n            500: \"#71717a\",\n            600: \"#52525b\",\n            700: \"#3f3f46\",\n            800: \"#27272a\",\n            900: \"#18181b\"\n        },\n        neutral: {\n            50: \"#fafafa\",\n            100: \"#f5f5f5\",\n            200: \"#e5e5e5\",\n            300: \"#d4d4d4\",\n            400: \"#a3a3a3\",\n            500: \"#737373\",\n            600: \"#525252\",\n            700: \"#404040\",\n            800: \"#262626\",\n            900: \"#171717\"\n        },\n        stone: {\n            50: \"#fafaf9\",\n            100: \"#f5f5f4\",\n            200: \"#e7e5e4\",\n            300: \"#d6d3d1\",\n            400: \"#a8a29e\",\n            500: \"#78716c\",\n            600: \"#57534e\",\n            700: \"#44403c\",\n            800: \"#292524\",\n            900: \"#1c1917\"\n        },\n        red: {\n            50: \"#fef2f2\",\n            100: \"#fee2e2\",\n            200: \"#fecaca\",\n            300: \"#fca5a5\",\n            400: \"#f87171\",\n            500: \"#ef4444\",\n            600: \"#dc2626\",\n            700: \"#b91c1c\",\n            800: \"#991b1b\",\n            900: \"#7f1d1d\"\n        },\n        orange: {\n            50: \"#fff7ed\",\n            100: \"#ffedd5\",\n            200: \"#fed7aa\",\n            300: \"#fdba74\",\n            400: \"#fb923c\",\n            500: \"#f97316\",\n            600: \"#ea580c\",\n            700: \"#c2410c\",\n            800: \"#9a3412\",\n            900: \"#7c2d12\"\n        },\n        amber: {\n            50: \"#fffbeb\",\n            100: \"#fef3c7\",\n            200: \"#fde68a\",\n            300: \"#fcd34d\",\n            400: \"#fbbf24\",\n            500: \"#f59e0b\",\n            600: \"#d97706\",\n            700: \"#b45309\",\n            800: \"#92400e\",\n            900: \"#78350f\"\n        },\n        yellow: {\n            50: \"#fefce8\",\n            100: \"#fef9c3\",\n            200: \"#fef08a\",\n            300: \"#fde047\",\n            400: \"#facc15\",\n            500: \"#eab308\",\n            600: \"#ca8a04\",\n            700: \"#a16207\",\n            800: \"#854d0e\",\n            900: \"#713f12\"\n        },\n        lime: {\n            50: \"#f7fee7\",\n            100: \"#ecfccb\",\n            200: \"#d9f99d\",\n            300: \"#bef264\",\n            400: \"#a3e635\",\n            500: \"#84cc16\",\n            600: \"#65a30d\",\n            700: \"#4d7c0f\",\n            800: \"#3f6212\",\n            900: \"#365314\"\n        },\n        green: {\n            50: \"#f0fdf4\",\n            100: \"#dcfce7\",\n            200: \"#bbf7d0\",\n            300: \"#86efac\",\n            400: \"#4ade80\",\n            500: \"#22c55e\",\n            600: \"#16a34a\",\n            700: \"#15803d\",\n            800: \"#166534\",\n            900: \"#14532d\"\n        },\n        emerald: {\n            50: \"#ecfdf5\",\n            100: \"#d1fae5\",\n            200: \"#a7f3d0\",\n            300: \"#6ee7b7\",\n            400: \"#34d399\",\n            500: \"#10b981\",\n            600: \"#059669\",\n            700: \"#047857\",\n            800: \"#065f46\",\n            900: \"#064e3b\"\n        },\n        teal: {\n            50: \"#f0fdfa\",\n            100: \"#ccfbf1\",\n            200: \"#99f6e4\",\n            300: \"#5eead4\",\n            400: \"#2dd4bf\",\n            500: \"#14b8a6\",\n            600: \"#0d9488\",\n            700: \"#0f766e\",\n            800: \"#115e59\",\n            900: \"#134e4a\"\n        },\n        cyan: {\n            50: \"#ecfeff\",\n            100: \"#cffafe\",\n            200: \"#a5f3fc\",\n            300: \"#67e8f9\",\n            400: \"#22d3ee\",\n            500: \"#06b6d4\",\n            600: \"#0891b2\",\n            700: \"#0e7490\",\n            800: \"#155e75\",\n            900: \"#164e63\"\n        },\n        sky: {\n            50: \"#f0f9ff\",\n            100: \"#e0f2fe\",\n            200: \"#bae6fd\",\n            300: \"#7dd3fc\",\n            400: \"#38bdf8\",\n            500: \"#0ea5e9\",\n            600: \"#0284c7\",\n            700: \"#0369a1\",\n            800: \"#075985\",\n            900: \"#0c4a6e\"\n        },\n        blue: {\n            50: \"#eff6ff\",\n            100: \"#dbeafe\",\n            200: \"#bfdbfe\",\n            300: \"#93c5fd\",\n            400: \"#60a5fa\",\n            500: \"#3b82f6\",\n            600: \"#2563eb\",\n            700: \"#1d4ed8\",\n            800: \"#1e40af\",\n            900: \"#1e3a8a\"\n        },\n        indigo: {\n            50: \"#eef2ff\",\n            100: \"#e0e7ff\",\n            200: \"#c7d2fe\",\n            300: \"#a5b4fc\",\n            400: \"#818cf8\",\n            500: \"#6366f1\",\n            600: \"#4f46e5\",\n            700: \"#4338ca\",\n            800: \"#3730a3\",\n            900: \"#312e81\"\n        },\n        violet: {\n            50: \"#f5f3ff\",\n            100: \"#ede9fe\",\n            200: \"#ddd6fe\",\n            300: \"#c4b5fd\",\n            400: \"#a78bfa\",\n            500: \"#8b5cf6\",\n            600: \"#7c3aed\",\n            700: \"#6d28d9\",\n            800: \"#5b21b6\",\n            900: \"#4c1d95\"\n        },\n        purple: {\n            50: \"#faf5ff\",\n            100: \"#f3e8ff\",\n            200: \"#e9d5ff\",\n            300: \"#d8b4fe\",\n            400: \"#c084fc\",\n            500: \"#a855f7\",\n            600: \"#9333ea\",\n            700: \"#7e22ce\",\n            800: \"#6b21a8\",\n            900: \"#581c87\"\n        },\n        fuchsia: {\n            50: \"#fdf4ff\",\n            100: \"#fae8ff\",\n            200: \"#f5d0fe\",\n            300: \"#f0abfc\",\n            400: \"#e879f9\",\n            500: \"#d946ef\",\n            600: \"#c026d3\",\n            700: \"#a21caf\",\n            800: \"#86198f\",\n            900: \"#701a75\"\n        },\n        pink: {\n            50: \"#fdf2f8\",\n            100: \"#fce7f3\",\n            200: \"#fbcfe8\",\n            300: \"#f9a8d4\",\n            400: \"#f472b6\",\n            500: \"#ec4899\",\n            600: \"#db2777\",\n            700: \"#be185d\",\n            800: \"#9d174d\",\n            900: \"#831843\"\n        },\n        rose: {\n            50: \"#fff1f2\",\n            100: \"#ffe4e6\",\n            200: \"#fecdd3\",\n            300: \"#fda4af\",\n            400: \"#fb7185\",\n            500: \"#f43f5e\",\n            600: \"#e11d48\",\n            700: \"#be123c\",\n            800: \"#9f1239\",\n            900: \"#881337\"\n        },\n        get lightBlue () {\n            return Pt({\n                version: \"v2.2\",\n                from: \"lightBlue\",\n                to: \"sky\"\n            }), this.sky;\n        },\n        get warmGray () {\n            return Pt({\n                version: \"v3.0\",\n                from: \"warmGray\",\n                to: \"stone\"\n            }), this.stone;\n        },\n        get trueGray () {\n            return Pt({\n                version: \"v3.0\",\n                from: \"trueGray\",\n                to: \"neutral\"\n            }), this.neutral;\n        },\n        get coolGray () {\n            return Pt({\n                version: \"v3.0\",\n                from: \"coolGray\",\n                to: \"gray\"\n            }), this.gray;\n        },\n        get blueGray () {\n            return Pt({\n                version: \"v3.0\",\n                from: \"blueGray\",\n                to: \"slate\"\n            }), this.slate;\n        }\n    };\n});\nvar ms = R((Fn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Fn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Fn, \"defaults\", {\n        enumerable: true,\n        get: ()=>Zl\n    });\n    function Zl(e, ...t) {\n        for (let i of t){\n            for(let s in i){\n                var n;\n                !(e == null || (n = e.hasOwnProperty) === null || n === void 0) && n.call(e, s) || (e[s] = i[s]);\n            }\n            for (let s of Object.getOwnPropertySymbols(i)){\n                var r;\n                !(e == null || (r = e.hasOwnProperty) === null || r === void 0) && r.call(e, s) || (e[s] = i[s]);\n            }\n        }\n        return e;\n    }\n});\nvar gs = R((Nn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Nn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Nn, \"toPath\", {\n        enumerable: true,\n        get: ()=>ef\n    });\n    function ef(e) {\n        if (Array.isArray(e)) return e;\n        let t = e.split(\"[\").length - 1, n = e.split(\"]\").length - 1;\n        if (t !== n) throw new Error(`Path is invalid. Has unbalanced brackets: ${e}`);\n        return e.split(/\\.(?![^\\[]*\\])|[\\[\\]]/g).filter(Boolean);\n    }\n});\nvar bs = R((Mn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Mn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Mn, \"normalizeConfig\", {\n        enumerable: true,\n        get: ()=>rf\n    });\n    var At = tf((Rr(), br(Ir)));\n    function vs(e) {\n        if (typeof WeakMap != \"function\") return null;\n        var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n        return (vs = function(r) {\n            return r ? n : t;\n        })(e);\n    }\n    function tf(e, t) {\n        if (!t && e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var n = vs(t);\n        if (n && n.has(e)) return n.get(e);\n        var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var s in e)if (s !== \"default\" && Object.prototype.hasOwnProperty.call(e, s)) {\n            var o = i ? Object.getOwnPropertyDescriptor(e, s) : null;\n            o && (o.get || o.set) ? Object.defineProperty(r, s, o) : r[s] = e[s];\n        }\n        return r.default = e, n && n.set(e, r), r;\n    }\n    function rf(e) {\n        if ((()=>{\n            if (e.purge || !e.content || !Array.isArray(e.content) && !(typeof e.content == \"object\" && e.content !== null)) return false;\n            if (Array.isArray(e.content)) return e.content.every((r)=>typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || (r == null ? void 0 : r.extension) && typeof (r == null ? void 0 : r.extension) != \"string\"));\n            if (typeof e.content == \"object\" && e.content !== null) {\n                if (Object.keys(e.content).some((r)=>![\n                        \"files\",\n                        \"extract\",\n                        \"transform\"\n                    ].includes(r))) return false;\n                if (Array.isArray(e.content.files)) {\n                    if (!e.content.files.every((r)=>typeof r == \"string\" ? true : !(typeof (r == null ? void 0 : r.raw) != \"string\" || (r == null ? void 0 : r.extension) && typeof (r == null ? void 0 : r.extension) != \"string\"))) return false;\n                    if (typeof e.content.extract == \"object\") {\n                        for (let r of Object.values(e.content.extract))if (typeof r != \"function\") return false;\n                    } else if (!(e.content.extract === void 0 || typeof e.content.extract == \"function\")) return false;\n                    if (typeof e.content.transform == \"object\") {\n                        for (let r of Object.values(e.content.transform))if (typeof r != \"function\") return false;\n                    } else if (!(e.content.transform === void 0 || typeof e.content.transform == \"function\")) return false;\n                }\n                return true;\n            }\n            return false;\n        })() || At.default.warn(\"purge-deprecation\", [\n            \"The `purge`/`content` options have changed in Tailwind CSS v3.0.\",\n            \"Update your configuration file to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#configure-content-sources\"\n        ]), e.safelist = (()=>{\n            var r;\n            let { content: i , purge: s , safelist: o  } = e;\n            return Array.isArray(o) ? o : Array.isArray(i == null ? void 0 : i.safelist) ? i.safelist : Array.isArray(s == null ? void 0 : s.safelist) ? s.safelist : Array.isArray(s == null || (r = s.options) === null || r === void 0 ? void 0 : r.safelist) ? s.options.safelist : [];\n        })(), typeof e.prefix == \"function\") At.default.warn(\"prefix-function\", [\n            \"As of Tailwind CSS v3.0, `prefix` cannot be a function.\",\n            \"Update `prefix` in your configuration to be a string to eliminate this warning.\",\n            \"https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function\"\n        ]), e.prefix = \"\";\n        else {\n            var n;\n            e.prefix = (n = e.prefix) !== null && n !== void 0 ? n : \"\";\n        }\n        e.content = {\n            files: (()=>{\n                let { content: r , purge: i  } = e;\n                return Array.isArray(i) ? i : Array.isArray(i == null ? void 0 : i.content) ? i.content : Array.isArray(r) ? r : Array.isArray(r == null ? void 0 : r.content) ? r.content : Array.isArray(r == null ? void 0 : r.files) ? r.files : [];\n            })(),\n            extract: (()=>{\n                let r = (()=>{\n                    var o, a, u, l, f, d, g, h, p, v;\n                    return !((o = e.purge) === null || o === void 0) && o.extract ? e.purge.extract : !((a = e.content) === null || a === void 0) && a.extract ? e.content.extract : !((u = e.purge) === null || u === void 0 || (l = u.extract) === null || l === void 0) && l.DEFAULT ? e.purge.extract.DEFAULT : !((f = e.content) === null || f === void 0 || (d = f.extract) === null || d === void 0) && d.DEFAULT ? e.content.extract.DEFAULT : !((g = e.purge) === null || g === void 0 || (h = g.options) === null || h === void 0) && h.extractors ? e.purge.options.extractors : !((p = e.content) === null || p === void 0 || (v = p.options) === null || v === void 0) && v.extractors ? e.content.options.extractors : {};\n                })(), i = {}, s = (()=>{\n                    var o, a, u, l;\n                    if (!((o = e.purge) === null || o === void 0 || (a = o.options) === null || a === void 0) && a.defaultExtractor) return e.purge.options.defaultExtractor;\n                    if (!((u = e.content) === null || u === void 0 || (l = u.options) === null || l === void 0) && l.defaultExtractor) return e.content.options.defaultExtractor;\n                })();\n                if (s !== void 0 && (i.DEFAULT = s), typeof r == \"function\") i.DEFAULT = r;\n                else if (Array.isArray(r)) for (let { extensions: o , extractor: a  } of r ?? [])for (let u of o)i[u] = a;\n                else typeof r == \"object\" && r !== null && Object.assign(i, r);\n                return i;\n            })(),\n            transform: (()=>{\n                let r = (()=>{\n                    var s, o, a, u, l, f;\n                    return !((s = e.purge) === null || s === void 0) && s.transform ? e.purge.transform : !((o = e.content) === null || o === void 0) && o.transform ? e.content.transform : !((a = e.purge) === null || a === void 0 || (u = a.transform) === null || u === void 0) && u.DEFAULT ? e.purge.transform.DEFAULT : !((l = e.content) === null || l === void 0 || (f = l.transform) === null || f === void 0) && f.DEFAULT ? e.content.transform.DEFAULT : {};\n                })(), i = {};\n                return typeof r == \"function\" && (i.DEFAULT = r), typeof r == \"object\" && r !== null && Object.assign(i, r), i;\n            })()\n        };\n        for (let r of e.content.files)if (typeof r == \"string\" && /{([^,]*?)}/g.test(r)) {\n            At.default.warn(\"invalid-glob-braces\", [\n                `The glob pattern ${(0, At.dim)(r)} in your Tailwind CSS configuration is invalid.`,\n                `Update it to ${(0, At.dim)(r.replace(/{([^,]*?)}/g, \"$1\"))} to silence this warning.`\n            ]);\n            break;\n        }\n        return e;\n    }\n});\nvar ys = R(($n)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty($n, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty($n, \"default\", {\n        enumerable: true,\n        get: ()=>nf\n    });\n    function nf(e) {\n        if (Object.prototype.toString.call(e) !== \"[object Object]\") return false;\n        let t = Object.getPrototypeOf(e);\n        return t === null || t === Object.prototype;\n    }\n});\nvar xs = R((qn)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(qn, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(qn, \"cloneDeep\", {\n        enumerable: true,\n        get: ()=>Wn\n    });\n    function Wn(e) {\n        return Array.isArray(e) ? e.map((t)=>Wn(t)) : typeof e == \"object\" && e !== null ? Object.fromEntries(Object.entries(e).map(([t, n])=>[\n                t,\n                Wn(n)\n            ])) : e;\n    }\n});\nvar Bn = R((Lr, ws)=>{\n    \"use strict\";\n    c();\n    Lr.__esModule = true;\n    Lr.default = af;\n    function of(e) {\n        for(var t = e.toLowerCase(), n = \"\", r = false, i = 0; i < 6 && t[i] !== void 0; i++){\n            var s = t.charCodeAt(i), o = s >= 97 && s <= 102 || s >= 48 && s <= 57;\n            if (r = s === 32, !o) break;\n            n += t[i];\n        }\n        if (n.length !== 0) {\n            var a = parseInt(n, 16), u = a >= 55296 && a <= 57343;\n            return u || a === 0 || a > 1114111 ? [\n                \"�\",\n                n.length + (r ? 1 : 0)\n            ] : [\n                String.fromCodePoint(a),\n                n.length + (r ? 1 : 0)\n            ];\n        }\n    }\n    var sf = /\\\\/;\n    function af(e) {\n        var t = sf.test(e);\n        if (!t) return e;\n        for(var n = \"\", r = 0; r < e.length; r++){\n            if (e[r] === \"\\\\\") {\n                var i = of(e.slice(r + 1, r + 7));\n                if (i !== void 0) {\n                    n += i[0], r += i[1];\n                    continue;\n                }\n                if (e[r + 1] === \"\\\\\") {\n                    n += \"\\\\\", r++;\n                    continue;\n                }\n                e.length === r + 1 && (n += e[r]);\n                continue;\n            }\n            n += e[r];\n        }\n        return n;\n    }\n    ws.exports = Lr.default;\n});\nvar Ss = R((Cr, _s)=>{\n    \"use strict\";\n    c();\n    Cr.__esModule = true;\n    Cr.default = uf;\n    function uf(e) {\n        for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];\n        for(; n.length > 0;){\n            var i = n.shift();\n            if (!e[i]) return;\n            e = e[i];\n        }\n        return e;\n    }\n    _s.exports = Cr.default;\n});\nvar Ts = R((Dr, ks)=>{\n    \"use strict\";\n    c();\n    Dr.__esModule = true;\n    Dr.default = lf;\n    function lf(e) {\n        for(var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++)n[r - 1] = arguments[r];\n        for(; n.length > 0;){\n            var i = n.shift();\n            e[i] || (e[i] = {}), e = e[i];\n        }\n    }\n    ks.exports = Dr.default;\n});\nvar Es = R((Fr, Os)=>{\n    \"use strict\";\n    c();\n    Fr.__esModule = true;\n    Fr.default = ff;\n    function ff(e) {\n        for(var t = \"\", n = e.indexOf(\"/*\"), r = 0; n >= 0;){\n            t = t + e.slice(r, n);\n            var i = e.indexOf(\"*/\", n + 2);\n            if (i < 0) return t;\n            r = i + 2, n = e.indexOf(\"/*\", r);\n        }\n        return t = t + e.slice(r), t;\n    }\n    Os.exports = Fr.default;\n});\nvar It = R((Ie)=>{\n    \"use strict\";\n    c();\n    Ie.__esModule = true;\n    Ie.stripComments = Ie.ensureObject = Ie.getProp = Ie.unesc = void 0;\n    var cf = Nr(Bn());\n    Ie.unesc = cf.default;\n    var df = Nr(Ss());\n    Ie.getProp = df.default;\n    var pf = Nr(Ts());\n    Ie.ensureObject = pf.default;\n    var hf = Nr(Es());\n    Ie.stripComments = hf.default;\n    function Nr(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n});\nvar Ne = R((Rt, Is)=>{\n    \"use strict\";\n    c();\n    Rt.__esModule = true;\n    Rt.default = void 0;\n    var Ps = It();\n    function As(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function mf(e, t, n) {\n        return t && As(e.prototype, t), n && As(e, n), e;\n    }\n    var gf = function e(t, n) {\n        if (typeof t != \"object\" || t === null) return t;\n        var r = new t.constructor();\n        for(var i in t)if (!!t.hasOwnProperty(i)) {\n            var s = t[i], o = typeof s;\n            i === \"parent\" && o === \"object\" ? n && (r[i] = n) : s instanceof Array ? r[i] = s.map(function(a) {\n                return e(a, r);\n            }) : r[i] = e(s, r);\n        }\n        return r;\n    }, vf = function() {\n        function e(n) {\n            n === void 0 && (n = {}), Object.assign(this, n), this.spaces = this.spaces || {}, this.spaces.before = this.spaces.before || \"\", this.spaces.after = this.spaces.after || \"\";\n        }\n        var t = e.prototype;\n        return t.remove = function() {\n            return this.parent && this.parent.removeChild(this), this.parent = void 0, this;\n        }, t.replaceWith = function() {\n            if (this.parent) {\n                for(var r in arguments)this.parent.insertBefore(this, arguments[r]);\n                this.remove();\n            }\n            return this;\n        }, t.next = function() {\n            return this.parent.at(this.parent.index(this) + 1);\n        }, t.prev = function() {\n            return this.parent.at(this.parent.index(this) - 1);\n        }, t.clone = function(r) {\n            r === void 0 && (r = {});\n            var i = gf(this);\n            for(var s in r)i[s] = r[s];\n            return i;\n        }, t.appendToPropertyAndEscape = function(r, i, s) {\n            this.raws || (this.raws = {});\n            var o = this[r], a = this.raws[r];\n            this[r] = o + i, a || s !== i ? this.raws[r] = (a || o) + s : delete this.raws[r];\n        }, t.setPropertyAndEscape = function(r, i, s) {\n            this.raws || (this.raws = {}), this[r] = i, this.raws[r] = s;\n        }, t.setPropertyWithoutEscape = function(r, i) {\n            this[r] = i, this.raws && delete this.raws[r];\n        }, t.isAtPosition = function(r, i) {\n            if (this.source && this.source.start && this.source.end) return !(this.source.start.line > r || this.source.end.line < r || this.source.start.line === r && this.source.start.column > i || this.source.end.line === r && this.source.end.column < i);\n        }, t.stringifyProperty = function(r) {\n            return this.raws && this.raws[r] || this[r];\n        }, t.valueToString = function() {\n            return String(this.stringifyProperty(\"value\"));\n        }, t.toString = function() {\n            return [\n                this.rawSpaceBefore,\n                this.valueToString(),\n                this.rawSpaceAfter\n            ].join(\"\");\n        }, mf(e, [\n            {\n                key: \"rawSpaceBefore\",\n                get: function() {\n                    var r = this.raws && this.raws.spaces && this.raws.spaces.before;\n                    return r === void 0 && (r = this.spaces && this.spaces.before), r || \"\";\n                },\n                set: function(r) {\n                    (0, Ps.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.before = r;\n                }\n            },\n            {\n                key: \"rawSpaceAfter\",\n                get: function() {\n                    var r = this.raws && this.raws.spaces && this.raws.spaces.after;\n                    return r === void 0 && (r = this.spaces.after), r || \"\";\n                },\n                set: function(r) {\n                    (0, Ps.ensureObject)(this, \"raws\", \"spaces\"), this.raws.spaces.after = r;\n                }\n            }\n        ]), e;\n    }();\n    Rt.default = vf;\n    Is.exports = Rt.default;\n});\nvar ae = R((Q)=>{\n    \"use strict\";\n    c();\n    Q.__esModule = true;\n    Q.UNIVERSAL = Q.ATTRIBUTE = Q.CLASS = Q.COMBINATOR = Q.COMMENT = Q.ID = Q.NESTING = Q.PSEUDO = Q.ROOT = Q.SELECTOR = Q.STRING = Q.TAG = void 0;\n    var bf = \"tag\";\n    Q.TAG = bf;\n    var yf = \"string\";\n    Q.STRING = yf;\n    var xf = \"selector\";\n    Q.SELECTOR = xf;\n    var wf = \"root\";\n    Q.ROOT = wf;\n    var _f = \"pseudo\";\n    Q.PSEUDO = _f;\n    var Sf = \"nesting\";\n    Q.NESTING = Sf;\n    var kf = \"id\";\n    Q.ID = kf;\n    var Tf = \"comment\";\n    Q.COMMENT = Tf;\n    var Of = \"combinator\";\n    Q.COMBINATOR = Of;\n    var Ef = \"class\";\n    Q.CLASS = Ef;\n    var Pf = \"attribute\";\n    Q.ATTRIBUTE = Pf;\n    var Af = \"universal\";\n    Q.UNIVERSAL = Af;\n});\nvar Mr = R((Lt, Ds)=>{\n    \"use strict\";\n    c();\n    Lt.__esModule = true;\n    Lt.default = void 0;\n    var If = Lf(Ne()), Me = Rf(ae());\n    function Cs() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return Cs = function() {\n            return e;\n        }, e;\n    }\n    function Rf(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = Cs();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var s = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            s && (s.get || s.set) ? Object.defineProperty(n, i, s) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function Lf(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Cf(e, t) {\n        var n;\n        if (typeof Symbol > \"u\" || e[Symbol.iterator] == null) {\n            if (Array.isArray(e) || (n = Df(e)) || t && e && typeof e.length == \"number\") {\n                n && (e = n);\n                var r = 0;\n                return function() {\n                    return r >= e.length ? {\n                        done: true\n                    } : {\n                        done: false,\n                        value: e[r++]\n                    };\n                };\n            }\n            throw new TypeError(`Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);\n        }\n        return n = e[Symbol.iterator](), n.next.bind(n);\n    }\n    function Df(e, t) {\n        if (!!e) {\n            if (typeof e == \"string\") return Rs(e, t);\n            var n = Object.prototype.toString.call(e).slice(8, -1);\n            if (n === \"Object\" && e.constructor && (n = e.constructor.name), n === \"Map\" || n === \"Set\") return Array.from(e);\n            if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Rs(e, t);\n        }\n    }\n    function Rs(e, t) {\n        (t == null || t > e.length) && (t = e.length);\n        for(var n = 0, r = new Array(t); n < t; n++)r[n] = e[n];\n        return r;\n    }\n    function Ls(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Ff(e, t, n) {\n        return t && Ls(e.prototype, t), n && Ls(e, n), e;\n    }\n    function Nf(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Un(e, t);\n    }\n    function Un(e, t) {\n        return Un = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Un(e, t);\n    }\n    var Mf = function(e) {\n        Nf(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.nodes || (i.nodes = []), i;\n        }\n        var n = t.prototype;\n        return n.append = function(i) {\n            return i.parent = this, this.nodes.push(i), this;\n        }, n.prepend = function(i) {\n            return i.parent = this, this.nodes.unshift(i), this;\n        }, n.at = function(i) {\n            return this.nodes[i];\n        }, n.index = function(i) {\n            return typeof i == \"number\" ? i : this.nodes.indexOf(i);\n        }, n.removeChild = function(i) {\n            i = this.index(i), this.at(i).parent = void 0, this.nodes.splice(i, 1);\n            var s;\n            for(var o in this.indexes)s = this.indexes[o], s >= i && (this.indexes[o] = s - 1);\n            return this;\n        }, n.removeAll = function() {\n            for(var i = Cf(this.nodes), s; !(s = i()).done;){\n                var o = s.value;\n                o.parent = void 0;\n            }\n            return this.nodes = [], this;\n        }, n.empty = function() {\n            return this.removeAll();\n        }, n.insertAfter = function(i, s) {\n            s.parent = this;\n            var o = this.index(i);\n            this.nodes.splice(o + 1, 0, s), s.parent = this;\n            var a;\n            for(var u in this.indexes)a = this.indexes[u], o <= a && (this.indexes[u] = a + 1);\n            return this;\n        }, n.insertBefore = function(i, s) {\n            s.parent = this;\n            var o = this.index(i);\n            this.nodes.splice(o, 0, s), s.parent = this;\n            var a;\n            for(var u in this.indexes)a = this.indexes[u], a <= o && (this.indexes[u] = a + 1);\n            return this;\n        }, n._findChildAtPosition = function(i, s) {\n            var o = void 0;\n            return this.each(function(a) {\n                if (a.atPosition) {\n                    var u = a.atPosition(i, s);\n                    if (u) return o = u, false;\n                } else if (a.isAtPosition(i, s)) return o = a, false;\n            }), o;\n        }, n.atPosition = function(i, s) {\n            if (this.isAtPosition(i, s)) return this._findChildAtPosition(i, s) || this;\n        }, n._inferEndPosition = function() {\n            this.last && this.last.source && this.last.source.end && (this.source = this.source || {}, this.source.end = this.source.end || {}, Object.assign(this.source.end, this.last.source.end));\n        }, n.each = function(i) {\n            this.lastEach || (this.lastEach = 0), this.indexes || (this.indexes = {}), this.lastEach++;\n            var s = this.lastEach;\n            if (this.indexes[s] = 0, !!this.length) {\n                for(var o, a; this.indexes[s] < this.length && (o = this.indexes[s], a = i(this.at(o), o), a !== false);)this.indexes[s] += 1;\n                if (delete this.indexes[s], a === false) return false;\n            }\n        }, n.walk = function(i) {\n            return this.each(function(s, o) {\n                var a = i(s, o);\n                if (a !== false && s.length && (a = s.walk(i)), a === false) return false;\n            });\n        }, n.walkAttributes = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.ATTRIBUTE) return i.call(s, o);\n            });\n        }, n.walkClasses = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.CLASS) return i.call(s, o);\n            });\n        }, n.walkCombinators = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.COMBINATOR) return i.call(s, o);\n            });\n        }, n.walkComments = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.COMMENT) return i.call(s, o);\n            });\n        }, n.walkIds = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.ID) return i.call(s, o);\n            });\n        }, n.walkNesting = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.NESTING) return i.call(s, o);\n            });\n        }, n.walkPseudos = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.PSEUDO) return i.call(s, o);\n            });\n        }, n.walkTags = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.TAG) return i.call(s, o);\n            });\n        }, n.walkUniversals = function(i) {\n            var s = this;\n            return this.walk(function(o) {\n                if (o.type === Me.UNIVERSAL) return i.call(s, o);\n            });\n        }, n.split = function(i) {\n            var s = this, o = [];\n            return this.reduce(function(a, u, l) {\n                var f = i.call(s, u);\n                return o.push(u), f ? (a.push(o), o = []) : l === s.length - 1 && a.push(o), a;\n            }, []);\n        }, n.map = function(i) {\n            return this.nodes.map(i);\n        }, n.reduce = function(i, s) {\n            return this.nodes.reduce(i, s);\n        }, n.every = function(i) {\n            return this.nodes.every(i);\n        }, n.some = function(i) {\n            return this.nodes.some(i);\n        }, n.filter = function(i) {\n            return this.nodes.filter(i);\n        }, n.sort = function(i) {\n            return this.nodes.sort(i);\n        }, n.toString = function() {\n            return this.map(String).join(\"\");\n        }, Ff(t, [\n            {\n                key: \"first\",\n                get: function() {\n                    return this.at(0);\n                }\n            },\n            {\n                key: \"last\",\n                get: function() {\n                    return this.at(this.length - 1);\n                }\n            },\n            {\n                key: \"length\",\n                get: function() {\n                    return this.nodes.length;\n                }\n            }\n        ]), t;\n    }(If.default);\n    Lt.default = Mf;\n    Ds.exports = Lt.default;\n});\nvar Gn = R((Ct, Ns)=>{\n    \"use strict\";\n    c();\n    Ct.__esModule = true;\n    Ct.default = void 0;\n    var $f = qf(Mr()), Wf = ae();\n    function qf(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Fs(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Bf(e, t, n) {\n        return t && Fs(e.prototype, t), n && Fs(e, n), e;\n    }\n    function Uf(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, zn(e, t);\n    }\n    function zn(e, t) {\n        return zn = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, zn(e, t);\n    }\n    var zf = function(e) {\n        Uf(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = Wf.ROOT, i;\n        }\n        var n = t.prototype;\n        return n.toString = function() {\n            var i = this.reduce(function(s, o) {\n                return s.push(String(o)), s;\n            }, []).join(\",\");\n            return this.trailingComma ? i + \",\" : i;\n        }, n.error = function(i, s) {\n            return this._error ? this._error(i, s) : new Error(i);\n        }, Bf(t, [\n            {\n                key: \"errorGenerator\",\n                set: function(i) {\n                    this._error = i;\n                }\n            }\n        ]), t;\n    }($f.default);\n    Ct.default = zf;\n    Ns.exports = Ct.default;\n});\nvar Hn = R((Dt, Ms)=>{\n    \"use strict\";\n    c();\n    Dt.__esModule = true;\n    Dt.default = void 0;\n    var Gf = Hf(Mr()), jf = ae();\n    function Hf(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Vf(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, jn(e, t);\n    }\n    function jn(e, t) {\n        return jn = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, jn(e, t);\n    }\n    var Yf = function(e) {\n        Vf(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = jf.SELECTOR, r;\n        }\n        return t;\n    }(Gf.default);\n    Dt.default = Yf;\n    Ms.exports = Dt.default;\n});\nvar $r = R((Wg, $s)=>{\n    \"use strict\";\n    c();\n    var Xf = {}, Qf = Xf.hasOwnProperty, Kf = function(t, n) {\n        if (!t) return n;\n        var r = {};\n        for(var i in n)r[i] = Qf.call(t, i) ? t[i] : n[i];\n        return r;\n    }, Jf = /[ -,\\.\\/:-@\\[-\\^`\\{-~]/, Zf = /[ -,\\.\\/:-@\\[\\]\\^`\\{-~]/, ec2 = /(^|\\\\+)?(\\\\[A-F0-9]{1,6})\\x20(?![a-fA-F0-9\\x20])/g, Vn = function e(t, n) {\n        n = Kf(n, e.options), n.quotes != \"single\" && n.quotes != \"double\" && (n.quotes = \"single\");\n        for(var r = n.quotes == \"double\" ? '\"' : \"'\", i = n.isIdentifier, s = t.charAt(0), o = \"\", a = 0, u = t.length; a < u;){\n            var l = t.charAt(a++), f = l.charCodeAt(), d = void 0;\n            if (f < 32 || f > 126) {\n                if (f >= 55296 && f <= 56319 && a < u) {\n                    var g = t.charCodeAt(a++);\n                    (g & 64512) == 56320 ? f = ((f & 1023) << 10) + (g & 1023) + 65536 : a--;\n                }\n                d = \"\\\\\" + f.toString(16).toUpperCase() + \" \";\n            } else n.escapeEverything ? Jf.test(l) ? d = \"\\\\\" + l : d = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : /[\\t\\n\\f\\r\\x0B]/.test(l) ? d = \"\\\\\" + f.toString(16).toUpperCase() + \" \" : l == \"\\\\\" || !i && (l == '\"' && r == l || l == \"'\" && r == l) || i && Zf.test(l) ? d = \"\\\\\" + l : d = l;\n            o += d;\n        }\n        return i && (/^-[-\\d]/.test(o) ? o = \"\\\\-\" + o.slice(1) : /\\d/.test(s) && (o = \"\\\\3\" + s + \" \" + o.slice(1))), o = o.replace(ec2, function(h, p, v) {\n            return p && p.length % 2 ? h : (p || \"\") + v;\n        }), !i && n.wrap ? r + o + r : o;\n    };\n    Vn.options = {\n        escapeEverything: false,\n        isIdentifier: false,\n        quotes: \"single\",\n        wrap: false\n    };\n    Vn.version = \"3.0.0\";\n    $s.exports = Vn;\n});\nvar Xn = R((Ft, Bs)=>{\n    \"use strict\";\n    c();\n    Ft.__esModule = true;\n    Ft.default = void 0;\n    var tc = qs($r()), rc = It(), nc = qs(Ne()), ic = ae();\n    function qs(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ws(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function oc(e, t, n) {\n        return t && Ws(e.prototype, t), n && Ws(e, n), e;\n    }\n    function sc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Yn(e, t);\n    }\n    function Yn(e, t) {\n        return Yn = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Yn(e, t);\n    }\n    var ac = function(e) {\n        sc(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = ic.CLASS, i._constructed = true, i;\n        }\n        var n = t.prototype;\n        return n.valueToString = function() {\n            return \".\" + e.prototype.valueToString.call(this);\n        }, oc(t, [\n            {\n                key: \"value\",\n                get: function() {\n                    return this._value;\n                },\n                set: function(i) {\n                    if (this._constructed) {\n                        var s = (0, tc.default)(i, {\n                            isIdentifier: true\n                        });\n                        s !== i ? ((0, rc.ensureObject)(this, \"raws\"), this.raws.value = s) : this.raws && delete this.raws.value;\n                    }\n                    this._value = i;\n                }\n            }\n        ]), t;\n    }(nc.default);\n    Ft.default = ac;\n    Bs.exports = Ft.default;\n});\nvar Kn = R((Nt, Us)=>{\n    \"use strict\";\n    c();\n    Nt.__esModule = true;\n    Nt.default = void 0;\n    var uc = fc(Ne()), lc = ae();\n    function fc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function cc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Qn(e, t);\n    }\n    function Qn(e, t) {\n        return Qn = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Qn(e, t);\n    }\n    var dc = function(e) {\n        cc(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = lc.COMMENT, r;\n        }\n        return t;\n    }(uc.default);\n    Nt.default = dc;\n    Us.exports = Nt.default;\n});\nvar Zn = R((Mt, zs)=>{\n    \"use strict\";\n    c();\n    Mt.__esModule = true;\n    Mt.default = void 0;\n    var pc = mc(Ne()), hc = ae();\n    function mc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function gc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, Jn(e, t);\n    }\n    function Jn(e, t) {\n        return Jn = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, Jn(e, t);\n    }\n    var vc = function(e) {\n        gc(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = hc.ID, i;\n        }\n        var n = t.prototype;\n        return n.valueToString = function() {\n            return \"#\" + e.prototype.valueToString.call(this);\n        }, t;\n    }(pc.default);\n    Mt.default = vc;\n    zs.exports = Mt.default;\n});\nvar Wr = R(($t, Hs)=>{\n    \"use strict\";\n    c();\n    $t.__esModule = true;\n    $t.default = void 0;\n    var bc = js($r()), yc = It(), xc = js(Ne());\n    function js(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Gs(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function wc(e, t, n) {\n        return t && Gs(e.prototype, t), n && Gs(e, n), e;\n    }\n    function _c(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, ei(e, t);\n    }\n    function ei(e, t) {\n        return ei = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, ei(e, t);\n    }\n    var Sc = function(e) {\n        _c(t, e);\n        function t() {\n            return e.apply(this, arguments) || this;\n        }\n        var n = t.prototype;\n        return n.qualifiedName = function(i) {\n            return this.namespace ? this.namespaceString + \"|\" + i : i;\n        }, n.valueToString = function() {\n            return this.qualifiedName(e.prototype.valueToString.call(this));\n        }, wc(t, [\n            {\n                key: \"namespace\",\n                get: function() {\n                    return this._namespace;\n                },\n                set: function(i) {\n                    if (i === true || i === \"*\" || i === \"&\") {\n                        this._namespace = i, this.raws && delete this.raws.namespace;\n                        return;\n                    }\n                    var s = (0, bc.default)(i, {\n                        isIdentifier: true\n                    });\n                    this._namespace = i, s !== i ? ((0, yc.ensureObject)(this, \"raws\"), this.raws.namespace = s) : this.raws && delete this.raws.namespace;\n                }\n            },\n            {\n                key: \"ns\",\n                get: function() {\n                    return this._namespace;\n                },\n                set: function(i) {\n                    this.namespace = i;\n                }\n            },\n            {\n                key: \"namespaceString\",\n                get: function() {\n                    if (this.namespace) {\n                        var i = this.stringifyProperty(\"namespace\");\n                        return i === true ? \"\" : i;\n                    } else return \"\";\n                }\n            }\n        ]), t;\n    }(xc.default);\n    $t.default = Sc;\n    Hs.exports = $t.default;\n});\nvar ri = R((Wt, Vs)=>{\n    \"use strict\";\n    c();\n    Wt.__esModule = true;\n    Wt.default = void 0;\n    var kc = Oc(Wr()), Tc = ae();\n    function Oc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Ec(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, ti(e, t);\n    }\n    function ti(e, t) {\n        return ti = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, ti(e, t);\n    }\n    var Pc = function(e) {\n        Ec(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = Tc.TAG, r;\n        }\n        return t;\n    }(kc.default);\n    Wt.default = Pc;\n    Vs.exports = Wt.default;\n});\nvar ii = R((qt, Ys)=>{\n    \"use strict\";\n    c();\n    qt.__esModule = true;\n    qt.default = void 0;\n    var Ac = Rc(Ne()), Ic = ae();\n    function Rc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Lc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, ni(e, t);\n    }\n    function ni(e, t) {\n        return ni = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, ni(e, t);\n    }\n    var Cc = function(e) {\n        Lc(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = Ic.STRING, r;\n        }\n        return t;\n    }(Ac.default);\n    qt.default = Cc;\n    Ys.exports = qt.default;\n});\nvar si = R((Bt, Xs)=>{\n    \"use strict\";\n    c();\n    Bt.__esModule = true;\n    Bt.default = void 0;\n    var Dc = Nc(Mr()), Fc = ae();\n    function Nc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Mc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, oi(e, t);\n    }\n    function oi(e, t) {\n        return oi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, oi(e, t);\n    }\n    var $c = function(e) {\n        Mc(t, e);\n        function t(r) {\n            var i;\n            return i = e.call(this, r) || this, i.type = Fc.PSEUDO, i;\n        }\n        var n = t.prototype;\n        return n.toString = function() {\n            var i = this.length ? \"(\" + this.map(String).join(\",\") + \")\" : \"\";\n            return [\n                this.rawSpaceBefore,\n                this.stringifyProperty(\"value\"),\n                i,\n                this.rawSpaceAfter\n            ].join(\"\");\n        }, t;\n    }(Dc.default);\n    Bt.default = $c;\n    Xs.exports = Bt.default;\n});\nvar Ks = R((qg, Qs)=>{\n    c();\n    Qs.exports = function(t, n) {\n        return function(...r) {\n            return console.warn(n), t(...r);\n        };\n    };\n});\nvar di = R((Gt)=>{\n    \"use strict\";\n    c();\n    Gt.__esModule = true;\n    Gt.unescapeValue = ci;\n    Gt.default = void 0;\n    var Ut = fi($r()), Wc = fi(Bn()), qc = fi(Wr()), Bc = ae(), ai;\n    function fi(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Js(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function Uc(e, t, n) {\n        return t && Js(e.prototype, t), n && Js(e, n), e;\n    }\n    function zc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, li(e, t);\n    }\n    function li(e, t) {\n        return li = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, li(e, t);\n    }\n    var zt = Ks(), Gc = /^('|\")([^]*)\\1$/, jc = zt(function() {}, \"Assigning an attribute a value containing characters that might need to be escaped is deprecated. Call attribute.setValue() instead.\"), Hc = zt(function() {}, \"Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.\"), Vc = zt(function() {}, \"Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.\");\n    function ci(e) {\n        var t = false, n = null, r = e, i = r.match(Gc);\n        return i && (n = i[1], r = i[2]), r = (0, Wc.default)(r), r !== e && (t = true), {\n            deprecatedUsage: t,\n            unescaped: r,\n            quoteMark: n\n        };\n    }\n    function Yc(e) {\n        if (e.quoteMark !== void 0 || e.value === void 0) return e;\n        Vc();\n        var t = ci(e.value), n = t.quoteMark, r = t.unescaped;\n        return e.raws || (e.raws = {}), e.raws.value === void 0 && (e.raws.value = e.value), e.value = r, e.quoteMark = n, e;\n    }\n    var qr = function(e) {\n        zc(t, e);\n        function t(r) {\n            var i;\n            return r === void 0 && (r = {}), i = e.call(this, Yc(r)) || this, i.type = Bc.ATTRIBUTE, i.raws = i.raws || {}, Object.defineProperty(i.raws, \"unquoted\", {\n                get: zt(function() {\n                    return i.value;\n                }, \"attr.raws.unquoted is deprecated. Call attr.value instead.\"),\n                set: zt(function() {\n                    return i.value;\n                }, \"Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.\")\n            }), i._constructed = true, i;\n        }\n        var n = t.prototype;\n        return n.getQuotedValue = function(i) {\n            i === void 0 && (i = {});\n            var s = this._determineQuoteMark(i), o = ui[s], a = (0, Ut.default)(this._value, o);\n            return a;\n        }, n._determineQuoteMark = function(i) {\n            return i.smart ? this.smartQuoteMark(i) : this.preferredQuoteMark(i);\n        }, n.setValue = function(i, s) {\n            s === void 0 && (s = {}), this._value = i, this._quoteMark = this._determineQuoteMark(s), this._syncRawValue();\n        }, n.smartQuoteMark = function(i) {\n            var s = this.value, o = s.replace(/[^']/g, \"\").length, a = s.replace(/[^\"]/g, \"\").length;\n            if (o + a === 0) {\n                var u = (0, Ut.default)(s, {\n                    isIdentifier: true\n                });\n                if (u === s) return t.NO_QUOTE;\n                var l = this.preferredQuoteMark(i);\n                if (l === t.NO_QUOTE) {\n                    var f = this.quoteMark || i.quoteMark || t.DOUBLE_QUOTE, d = ui[f], g = (0, Ut.default)(s, d);\n                    if (g.length < u.length) return f;\n                }\n                return l;\n            } else return a === o ? this.preferredQuoteMark(i) : a < o ? t.DOUBLE_QUOTE : t.SINGLE_QUOTE;\n        }, n.preferredQuoteMark = function(i) {\n            var s = i.preferCurrentQuoteMark ? this.quoteMark : i.quoteMark;\n            return s === void 0 && (s = i.preferCurrentQuoteMark ? i.quoteMark : this.quoteMark), s === void 0 && (s = t.DOUBLE_QUOTE), s;\n        }, n._syncRawValue = function() {\n            var i = (0, Ut.default)(this._value, ui[this.quoteMark]);\n            i === this._value ? this.raws && delete this.raws.value : this.raws.value = i;\n        }, n._handleEscapes = function(i, s) {\n            if (this._constructed) {\n                var o = (0, Ut.default)(s, {\n                    isIdentifier: true\n                });\n                o !== s ? this.raws[i] = o : delete this.raws[i];\n            }\n        }, n._spacesFor = function(i) {\n            var s = {\n                before: \"\",\n                after: \"\"\n            }, o = this.spaces[i] || {}, a = this.raws.spaces && this.raws.spaces[i] || {};\n            return Object.assign(s, o, a);\n        }, n._stringFor = function(i, s, o) {\n            s === void 0 && (s = i), o === void 0 && (o = Zs);\n            var a = this._spacesFor(s);\n            return o(this.stringifyProperty(i), a);\n        }, n.offsetOf = function(i) {\n            var s = 1, o = this._spacesFor(\"attribute\");\n            if (s += o.before.length, i === \"namespace\" || i === \"ns\") return this.namespace ? s : -1;\n            if (i === \"attributeNS\" || (s += this.namespaceString.length, this.namespace && (s += 1), i === \"attribute\")) return s;\n            s += this.stringifyProperty(\"attribute\").length, s += o.after.length;\n            var a = this._spacesFor(\"operator\");\n            s += a.before.length;\n            var u = this.stringifyProperty(\"operator\");\n            if (i === \"operator\") return u ? s : -1;\n            s += u.length, s += a.after.length;\n            var l = this._spacesFor(\"value\");\n            s += l.before.length;\n            var f = this.stringifyProperty(\"value\");\n            if (i === \"value\") return f ? s : -1;\n            s += f.length, s += l.after.length;\n            var d = this._spacesFor(\"insensitive\");\n            return s += d.before.length, i === \"insensitive\" && this.insensitive ? s : -1;\n        }, n.toString = function() {\n            var i = this, s = [\n                this.rawSpaceBefore,\n                \"[\"\n            ];\n            return s.push(this._stringFor(\"qualifiedAttribute\", \"attribute\")), this.operator && (this.value || this.value === \"\") && (s.push(this._stringFor(\"operator\")), s.push(this._stringFor(\"value\")), s.push(this._stringFor(\"insensitiveFlag\", \"insensitive\", function(o, a) {\n                return o.length > 0 && !i.quoted && a.before.length === 0 && !(i.spaces.value && i.spaces.value.after) && (a.before = \" \"), Zs(o, a);\n            }))), s.push(\"]\"), s.push(this.rawSpaceAfter), s.join(\"\");\n        }, Uc(t, [\n            {\n                key: \"quoted\",\n                get: function() {\n                    var i = this.quoteMark;\n                    return i === \"'\" || i === '\"';\n                },\n                set: function(i) {\n                    Hc();\n                }\n            },\n            {\n                key: \"quoteMark\",\n                get: function() {\n                    return this._quoteMark;\n                },\n                set: function(i) {\n                    if (!this._constructed) {\n                        this._quoteMark = i;\n                        return;\n                    }\n                    this._quoteMark !== i && (this._quoteMark = i, this._syncRawValue());\n                }\n            },\n            {\n                key: \"qualifiedAttribute\",\n                get: function() {\n                    return this.qualifiedName(this.raws.attribute || this.attribute);\n                }\n            },\n            {\n                key: \"insensitiveFlag\",\n                get: function() {\n                    return this.insensitive ? \"i\" : \"\";\n                }\n            },\n            {\n                key: \"value\",\n                get: function() {\n                    return this._value;\n                },\n                set: function(i) {\n                    if (this._constructed) {\n                        var s = ci(i), o = s.deprecatedUsage, a = s.unescaped, u = s.quoteMark;\n                        if (o && jc(), a === this._value && u === this._quoteMark) return;\n                        this._value = a, this._quoteMark = u, this._syncRawValue();\n                    } else this._value = i;\n                }\n            },\n            {\n                key: \"attribute\",\n                get: function() {\n                    return this._attribute;\n                },\n                set: function(i) {\n                    this._handleEscapes(\"attribute\", i), this._attribute = i;\n                }\n            }\n        ]), t;\n    }(qc.default);\n    Gt.default = qr;\n    qr.NO_QUOTE = null;\n    qr.SINGLE_QUOTE = \"'\";\n    qr.DOUBLE_QUOTE = '\"';\n    var ui = (ai = {\n        \"'\": {\n            quotes: \"single\",\n            wrap: true\n        },\n        '\"': {\n            quotes: \"double\",\n            wrap: true\n        }\n    }, ai[null] = {\n        isIdentifier: true\n    }, ai);\n    function Zs(e, t) {\n        return \"\" + t.before + e + t.after;\n    }\n});\nvar hi = R((jt, ea)=>{\n    \"use strict\";\n    c();\n    jt.__esModule = true;\n    jt.default = void 0;\n    var Xc = Kc(Wr()), Qc = ae();\n    function Kc(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Jc(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, pi(e, t);\n    }\n    function pi(e, t) {\n        return pi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, pi(e, t);\n    }\n    var Zc = function(e) {\n        Jc(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = Qc.UNIVERSAL, r.value = \"*\", r;\n        }\n        return t;\n    }(Xc.default);\n    jt.default = Zc;\n    ea.exports = jt.default;\n});\nvar gi = R((Ht, ta)=>{\n    \"use strict\";\n    c();\n    Ht.__esModule = true;\n    Ht.default = void 0;\n    var ed = rd(Ne()), td2 = ae();\n    function rd(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function nd(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, mi(e, t);\n    }\n    function mi(e, t) {\n        return mi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, mi(e, t);\n    }\n    var id = function(e) {\n        nd(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = td2.COMBINATOR, r;\n        }\n        return t;\n    }(ed.default);\n    Ht.default = id;\n    ta.exports = Ht.default;\n});\nvar bi = R((Vt, ra)=>{\n    \"use strict\";\n    c();\n    Vt.__esModule = true;\n    Vt.default = void 0;\n    var od = ad(Ne()), sd = ae();\n    function ad(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function ud(e, t) {\n        e.prototype = Object.create(t.prototype), e.prototype.constructor = e, vi(e, t);\n    }\n    function vi(e, t) {\n        return vi = Object.setPrototypeOf || function(r, i) {\n            return r.__proto__ = i, r;\n        }, vi(e, t);\n    }\n    var ld = function(e) {\n        ud(t, e);\n        function t(n) {\n            var r;\n            return r = e.call(this, n) || this, r.type = sd.NESTING, r.value = \"&\", r;\n        }\n        return t;\n    }(od.default);\n    Vt.default = ld;\n    ra.exports = Vt.default;\n});\nvar ia = R((Br, na)=>{\n    \"use strict\";\n    c();\n    Br.__esModule = true;\n    Br.default = fd2;\n    function fd2(e) {\n        return e.sort(function(t, n) {\n            return t - n;\n        });\n    }\n    na.exports = Br.default;\n});\nvar yi = R((A)=>{\n    \"use strict\";\n    c();\n    A.__esModule = true;\n    A.combinator = A.word = A.comment = A.str = A.tab = A.newline = A.feed = A.cr = A.backslash = A.bang = A.slash = A.doubleQuote = A.singleQuote = A.space = A.greaterThan = A.pipe = A.equals = A.plus = A.caret = A.tilde = A.dollar = A.closeSquare = A.openSquare = A.closeParenthesis = A.openParenthesis = A.semicolon = A.colon = A.comma = A.at = A.asterisk = A.ampersand = void 0;\n    var cd = 38;\n    A.ampersand = cd;\n    var dd = 42;\n    A.asterisk = dd;\n    var pd = 64;\n    A.at = pd;\n    var hd = 44;\n    A.comma = hd;\n    var md = 58;\n    A.colon = md;\n    var gd = 59;\n    A.semicolon = gd;\n    var vd = 40;\n    A.openParenthesis = vd;\n    var bd = 41;\n    A.closeParenthesis = bd;\n    var yd = 91;\n    A.openSquare = yd;\n    var xd = 93;\n    A.closeSquare = xd;\n    var wd = 36;\n    A.dollar = wd;\n    var _d = 126;\n    A.tilde = _d;\n    var Sd = 94;\n    A.caret = Sd;\n    var kd = 43;\n    A.plus = kd;\n    var Td = 61;\n    A.equals = Td;\n    var Od = 124;\n    A.pipe = Od;\n    var Ed = 62;\n    A.greaterThan = Ed;\n    var Pd = 32;\n    A.space = Pd;\n    var oa = 39;\n    A.singleQuote = oa;\n    var Ad = 34;\n    A.doubleQuote = Ad;\n    var Id = 47;\n    A.slash = Id;\n    var Rd = 33;\n    A.bang = Rd;\n    var Ld = 92;\n    A.backslash = Ld;\n    var Cd = 13;\n    A.cr = Cd;\n    var Dd = 12;\n    A.feed = Dd;\n    var Fd = 10;\n    A.newline = Fd;\n    var Nd = 9;\n    A.tab = Nd;\n    var Md = oa;\n    A.str = Md;\n    var $d = -1;\n    A.comment = $d;\n    var Wd = -2;\n    A.word = Wd;\n    var qd = -3;\n    A.combinator = qd;\n});\nvar ua = R((Yt)=>{\n    \"use strict\";\n    c();\n    Yt.__esModule = true;\n    Yt.default = Vd;\n    Yt.FIELDS = void 0;\n    var O = Bd(yi()), lt, Y;\n    function aa() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return aa = function() {\n            return e;\n        }, e;\n    }\n    function Bd(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = aa();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var s = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            s && (s.get || s.set) ? Object.defineProperty(n, i, s) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    var Ud = (lt = {}, lt[O.tab] = true, lt[O.newline] = true, lt[O.cr] = true, lt[O.feed] = true, lt), zd = (Y = {}, Y[O.space] = true, Y[O.tab] = true, Y[O.newline] = true, Y[O.cr] = true, Y[O.feed] = true, Y[O.ampersand] = true, Y[O.asterisk] = true, Y[O.bang] = true, Y[O.comma] = true, Y[O.colon] = true, Y[O.semicolon] = true, Y[O.openParenthesis] = true, Y[O.closeParenthesis] = true, Y[O.openSquare] = true, Y[O.closeSquare] = true, Y[O.singleQuote] = true, Y[O.doubleQuote] = true, Y[O.plus] = true, Y[O.pipe] = true, Y[O.tilde] = true, Y[O.greaterThan] = true, Y[O.equals] = true, Y[O.dollar] = true, Y[O.caret] = true, Y[O.slash] = true, Y), xi = {}, sa = \"0123456789abcdefABCDEF\";\n    for(Ur = 0; Ur < sa.length; Ur++)xi[sa.charCodeAt(Ur)] = true;\n    var Ur;\n    function Gd(e, t) {\n        var n = t, r;\n        do {\n            if (r = e.charCodeAt(n), zd[r]) return n - 1;\n            r === O.backslash ? n = jd(e, n) + 1 : n++;\n        }while (n < e.length);\n        return n - 1;\n    }\n    function jd(e, t) {\n        var n = t, r = e.charCodeAt(n + 1);\n        if (!Ud[r]) if (xi[r]) {\n            var i = 0;\n            do n++, i++, r = e.charCodeAt(n + 1);\n            while (xi[r] && i < 6);\n            i < 6 && r === O.space && n++;\n        } else n++;\n        return n;\n    }\n    var Hd = {\n        TYPE: 0,\n        START_LINE: 1,\n        START_COL: 2,\n        END_LINE: 3,\n        END_COL: 4,\n        START_POS: 5,\n        END_POS: 6\n    };\n    Yt.FIELDS = Hd;\n    function Vd(e) {\n        var t = [], n = e.css.valueOf(), r = n, i = r.length, s = -1, o = 1, a = 0, u = 0, l, f, d, g, h, p, v, _, b, y, S, E, T;\n        function D(F, C) {\n            if (e.safe) n += C, b = n.length - 1;\n            else throw e.error(\"Unclosed \" + F, o, a - s, a);\n        }\n        for(; a < i;){\n            switch(l = n.charCodeAt(a), l === O.newline && (s = a, o += 1), l){\n                case O.space:\n                case O.tab:\n                case O.newline:\n                case O.cr:\n                case O.feed:\n                    b = a;\n                    do b += 1, l = n.charCodeAt(b), l === O.newline && (s = b, o += 1);\n                    while (l === O.space || l === O.newline || l === O.tab || l === O.cr || l === O.feed);\n                    T = O.space, g = o, d = b - s - 1, u = b;\n                    break;\n                case O.plus:\n                case O.greaterThan:\n                case O.tilde:\n                case O.pipe:\n                    b = a;\n                    do b += 1, l = n.charCodeAt(b);\n                    while (l === O.plus || l === O.greaterThan || l === O.tilde || l === O.pipe);\n                    T = O.combinator, g = o, d = a - s, u = b;\n                    break;\n                case O.asterisk:\n                case O.ampersand:\n                case O.bang:\n                case O.comma:\n                case O.equals:\n                case O.dollar:\n                case O.caret:\n                case O.openSquare:\n                case O.closeSquare:\n                case O.colon:\n                case O.semicolon:\n                case O.openParenthesis:\n                case O.closeParenthesis:\n                    b = a, T = l, g = o, d = a - s, u = b + 1;\n                    break;\n                case O.singleQuote:\n                case O.doubleQuote:\n                    E = l === O.singleQuote ? \"'\" : '\"', b = a;\n                    do for(h = false, b = n.indexOf(E, b + 1), b === -1 && D(\"quote\", E), p = b; n.charCodeAt(p - 1) === O.backslash;)p -= 1, h = !h;\n                    while (h);\n                    T = O.str, g = o, d = a - s, u = b + 1;\n                    break;\n                default:\n                    l === O.slash && n.charCodeAt(a + 1) === O.asterisk ? (b = n.indexOf(\"*/\", a + 2) + 1, b === 0 && D(\"comment\", \"*/\"), f = n.slice(a, b + 1), _ = f.split(`\n`), v = _.length - 1, v > 0 ? (y = o + v, S = b - _[v].length) : (y = o, S = s), T = O.comment, o = y, g = y, d = b - S) : l === O.slash ? (b = a, T = l, g = o, d = a - s, u = b + 1) : (b = Gd(n, a), T = O.word, g = o, d = b - s), u = b + 1;\n                    break;\n            }\n            t.push([\n                T,\n                o,\n                a - s,\n                g,\n                d,\n                a,\n                u\n            ]), S && (s = S, S = null), a = u;\n        }\n        return t;\n    }\n});\nvar ga = R((Xt, ma)=>{\n    \"use strict\";\n    c();\n    Xt.__esModule = true;\n    Xt.default = void 0;\n    var Yd = ke(Gn()), wi = ke(Hn()), Xd = ke(Xn()), la = ke(Kn()), Qd = ke(Zn()), Kd = ke(ri()), _i = ke(ii()), Jd = ke(si()), fa = zr(di()), Zd = ke(hi()), Si = ke(gi()), ep = ke(bi()), tp = ke(ia()), k = zr(ua()), P = zr(yi()), rp = zr(ae()), ee = It(), Je, ki;\n    function ha() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return ha = function() {\n            return e;\n        }, e;\n    }\n    function zr(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = ha();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var s = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            s && (s.get || s.set) ? Object.defineProperty(n, i, s) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function ke(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function ca(e, t) {\n        for(var n = 0; n < t.length; n++){\n            var r = t[n];\n            r.enumerable = r.enumerable || false, r.configurable = true, \"value\" in r && (r.writable = true), Object.defineProperty(e, r.key, r);\n        }\n    }\n    function np(e, t, n) {\n        return t && ca(e.prototype, t), n && ca(e, n), e;\n    }\n    var Ei = (Je = {}, Je[P.space] = true, Je[P.cr] = true, Je[P.feed] = true, Je[P.newline] = true, Je[P.tab] = true, Je), ip = Object.assign({}, Ei, (ki = {}, ki[P.comment] = true, ki));\n    function da(e) {\n        return {\n            line: e[k.FIELDS.START_LINE],\n            column: e[k.FIELDS.START_COL]\n        };\n    }\n    function pa(e) {\n        return {\n            line: e[k.FIELDS.END_LINE],\n            column: e[k.FIELDS.END_COL]\n        };\n    }\n    function Ze(e, t, n, r) {\n        return {\n            start: {\n                line: e,\n                column: t\n            },\n            end: {\n                line: n,\n                column: r\n            }\n        };\n    }\n    function ft(e) {\n        return Ze(e[k.FIELDS.START_LINE], e[k.FIELDS.START_COL], e[k.FIELDS.END_LINE], e[k.FIELDS.END_COL]);\n    }\n    function Ti(e, t) {\n        if (!!e) return Ze(e[k.FIELDS.START_LINE], e[k.FIELDS.START_COL], t[k.FIELDS.END_LINE], t[k.FIELDS.END_COL]);\n    }\n    function ct(e, t) {\n        var n = e[t];\n        if (typeof n == \"string\") return n.indexOf(\"\\\\\") !== -1 && ((0, ee.ensureObject)(e, \"raws\"), e[t] = (0, ee.unesc)(n), e.raws[t] === void 0 && (e.raws[t] = n)), e;\n    }\n    function Oi(e, t) {\n        for(var n = -1, r = []; (n = e.indexOf(t, n + 1)) !== -1;)r.push(n);\n        return r;\n    }\n    function op() {\n        var e = Array.prototype.concat.apply([], arguments);\n        return e.filter(function(t, n) {\n            return n === e.indexOf(t);\n        });\n    }\n    var sp = function() {\n        function e(n, r) {\n            r === void 0 && (r = {}), this.rule = n, this.options = Object.assign({\n                lossy: false,\n                safe: false\n            }, r), this.position = 0, this.css = typeof this.rule == \"string\" ? this.rule : this.rule.selector, this.tokens = (0, k.default)({\n                css: this.css,\n                error: this._errorGenerator(),\n                safe: this.options.safe\n            });\n            var i = Ti(this.tokens[0], this.tokens[this.tokens.length - 1]);\n            this.root = new Yd.default({\n                source: i\n            }), this.root.errorGenerator = this._errorGenerator();\n            var s = new wi.default({\n                source: {\n                    start: {\n                        line: 1,\n                        column: 1\n                    }\n                }\n            });\n            this.root.append(s), this.current = s, this.loop();\n        }\n        var t = e.prototype;\n        return t._errorGenerator = function() {\n            var r = this;\n            return function(i, s) {\n                return typeof r.rule == \"string\" ? new Error(i) : r.rule.error(i, s);\n            };\n        }, t.attribute = function() {\n            var r = [], i = this.currToken;\n            for(this.position++; this.position < this.tokens.length && this.currToken[k.FIELDS.TYPE] !== P.closeSquare;)r.push(this.currToken), this.position++;\n            if (this.currToken[k.FIELDS.TYPE] !== P.closeSquare) return this.expected(\"closing square bracket\", this.currToken[k.FIELDS.START_POS]);\n            var s = r.length, o = {\n                source: Ze(i[1], i[2], this.currToken[3], this.currToken[4]),\n                sourceIndex: i[k.FIELDS.START_POS]\n            };\n            if (s === 1 && !~[\n                P.word\n            ].indexOf(r[0][k.FIELDS.TYPE])) return this.expected(\"attribute\", r[0][k.FIELDS.START_POS]);\n            for(var a = 0, u = \"\", l = \"\", f = null, d = false; a < s;){\n                var g = r[a], h = this.content(g), p = r[a + 1];\n                switch(g[k.FIELDS.TYPE]){\n                    case P.space:\n                        if (d = true, this.options.lossy) break;\n                        if (f) {\n                            (0, ee.ensureObject)(o, \"spaces\", f);\n                            var v = o.spaces[f].after || \"\";\n                            o.spaces[f].after = v + h;\n                            var _ = (0, ee.getProp)(o, \"raws\", \"spaces\", f, \"after\") || null;\n                            _ && (o.raws.spaces[f].after = _ + h);\n                        } else u = u + h, l = l + h;\n                        break;\n                    case P.asterisk:\n                        if (p[k.FIELDS.TYPE] === P.equals) o.operator = h, f = \"operator\";\n                        else if ((!o.namespace || f === \"namespace\" && !d) && p) {\n                            u && ((0, ee.ensureObject)(o, \"spaces\", \"attribute\"), o.spaces.attribute.before = u, u = \"\"), l && ((0, ee.ensureObject)(o, \"raws\", \"spaces\", \"attribute\"), o.raws.spaces.attribute.before = u, l = \"\"), o.namespace = (o.namespace || \"\") + h;\n                            var b = (0, ee.getProp)(o, \"raws\", \"namespace\") || null;\n                            b && (o.raws.namespace += h), f = \"namespace\";\n                        }\n                        d = false;\n                        break;\n                    case P.dollar:\n                        if (f === \"value\") {\n                            var y = (0, ee.getProp)(o, \"raws\", \"value\");\n                            o.value += \"$\", y && (o.raws.value = y + \"$\");\n                            break;\n                        }\n                    case P.caret:\n                        p[k.FIELDS.TYPE] === P.equals && (o.operator = h, f = \"operator\"), d = false;\n                        break;\n                    case P.combinator:\n                        if (h === \"~\" && p[k.FIELDS.TYPE] === P.equals && (o.operator = h, f = \"operator\"), h !== \"|\") {\n                            d = false;\n                            break;\n                        }\n                        p[k.FIELDS.TYPE] === P.equals ? (o.operator = h, f = \"operator\") : !o.namespace && !o.attribute && (o.namespace = true), d = false;\n                        break;\n                    case P.word:\n                        if (p && this.content(p) === \"|\" && r[a + 2] && r[a + 2][k.FIELDS.TYPE] !== P.equals && !o.operator && !o.namespace) o.namespace = h, f = \"namespace\";\n                        else if (!o.attribute || f === \"attribute\" && !d) {\n                            u && ((0, ee.ensureObject)(o, \"spaces\", \"attribute\"), o.spaces.attribute.before = u, u = \"\"), l && ((0, ee.ensureObject)(o, \"raws\", \"spaces\", \"attribute\"), o.raws.spaces.attribute.before = l, l = \"\"), o.attribute = (o.attribute || \"\") + h;\n                            var S = (0, ee.getProp)(o, \"raws\", \"attribute\") || null;\n                            S && (o.raws.attribute += h), f = \"attribute\";\n                        } else if (!o.value && o.value !== \"\" || f === \"value\" && !d) {\n                            var E = (0, ee.unesc)(h), T = (0, ee.getProp)(o, \"raws\", \"value\") || \"\", D = o.value || \"\";\n                            o.value = D + E, o.quoteMark = null, (E !== h || T) && ((0, ee.ensureObject)(o, \"raws\"), o.raws.value = (T || D) + h), f = \"value\";\n                        } else {\n                            var F = h === \"i\" || h === \"I\";\n                            (o.value || o.value === \"\") && (o.quoteMark || d) ? (o.insensitive = F, (!F || h === \"I\") && ((0, ee.ensureObject)(o, \"raws\"), o.raws.insensitiveFlag = h), f = \"insensitive\", u && ((0, ee.ensureObject)(o, \"spaces\", \"insensitive\"), o.spaces.insensitive.before = u, u = \"\"), l && ((0, ee.ensureObject)(o, \"raws\", \"spaces\", \"insensitive\"), o.raws.spaces.insensitive.before = l, l = \"\")) : (o.value || o.value === \"\") && (f = \"value\", o.value += h, o.raws.value && (o.raws.value += h));\n                        }\n                        d = false;\n                        break;\n                    case P.str:\n                        if (!o.attribute || !o.operator) return this.error(\"Expected an attribute followed by an operator preceding the string.\", {\n                            index: g[k.FIELDS.START_POS]\n                        });\n                        var C = (0, fa.unescapeValue)(h), H = C.unescaped, U = C.quoteMark;\n                        o.value = H, o.quoteMark = U, f = \"value\", (0, ee.ensureObject)(o, \"raws\"), o.raws.value = h, d = false;\n                        break;\n                    case P.equals:\n                        if (!o.attribute) return this.expected(\"attribute\", g[k.FIELDS.START_POS], h);\n                        if (o.value) return this.error('Unexpected \"=\" found; an operator was already defined.', {\n                            index: g[k.FIELDS.START_POS]\n                        });\n                        o.operator = o.operator ? o.operator + h : h, f = \"operator\", d = false;\n                        break;\n                    case P.comment:\n                        if (f) if (d || p && p[k.FIELDS.TYPE] === P.space || f === \"insensitive\") {\n                            var J = (0, ee.getProp)(o, \"spaces\", f, \"after\") || \"\", $ = (0, ee.getProp)(o, \"raws\", \"spaces\", f, \"after\") || J;\n                            (0, ee.ensureObject)(o, \"raws\", \"spaces\", f), o.raws.spaces[f].after = $ + h;\n                        } else {\n                            var V = o[f] || \"\", ne = (0, ee.getProp)(o, \"raws\", f) || V;\n                            (0, ee.ensureObject)(o, \"raws\"), o.raws[f] = ne + h;\n                        }\n                        else l = l + h;\n                        break;\n                    default:\n                        return this.error('Unexpected \"' + h + '\" found.', {\n                            index: g[k.FIELDS.START_POS]\n                        });\n                }\n                a++;\n            }\n            ct(o, \"attribute\"), ct(o, \"namespace\"), this.newNode(new fa.default(o)), this.position++;\n        }, t.parseWhitespaceEquivalentTokens = function(r) {\n            r < 0 && (r = this.tokens.length);\n            var i = this.position, s = [], o = \"\", a = void 0;\n            do if (Ei[this.currToken[k.FIELDS.TYPE]]) this.options.lossy || (o += this.content());\n            else if (this.currToken[k.FIELDS.TYPE] === P.comment) {\n                var u = {};\n                o && (u.before = o, o = \"\"), a = new la.default({\n                    value: this.content(),\n                    source: ft(this.currToken),\n                    sourceIndex: this.currToken[k.FIELDS.START_POS],\n                    spaces: u\n                }), s.push(a);\n            }\n            while (++this.position < r);\n            if (o) {\n                if (a) a.spaces.after = o;\n                else if (!this.options.lossy) {\n                    var l = this.tokens[i], f = this.tokens[this.position - 1];\n                    s.push(new _i.default({\n                        value: \"\",\n                        source: Ze(l[k.FIELDS.START_LINE], l[k.FIELDS.START_COL], f[k.FIELDS.END_LINE], f[k.FIELDS.END_COL]),\n                        sourceIndex: l[k.FIELDS.START_POS],\n                        spaces: {\n                            before: o,\n                            after: \"\"\n                        }\n                    }));\n                }\n            }\n            return s;\n        }, t.convertWhitespaceNodesToSpace = function(r, i) {\n            var s = this;\n            i === void 0 && (i = false);\n            var o = \"\", a = \"\";\n            r.forEach(function(l) {\n                var f = s.lossySpace(l.spaces.before, i), d = s.lossySpace(l.rawSpaceBefore, i);\n                o += f + s.lossySpace(l.spaces.after, i && f.length === 0), a += f + l.value + s.lossySpace(l.rawSpaceAfter, i && d.length === 0);\n            }), a === o && (a = void 0);\n            var u = {\n                space: o,\n                rawSpace: a\n            };\n            return u;\n        }, t.isNamedCombinator = function(r) {\n            return r === void 0 && (r = this.position), this.tokens[r + 0] && this.tokens[r + 0][k.FIELDS.TYPE] === P.slash && this.tokens[r + 1] && this.tokens[r + 1][k.FIELDS.TYPE] === P.word && this.tokens[r + 2] && this.tokens[r + 2][k.FIELDS.TYPE] === P.slash;\n        }, t.namedCombinator = function() {\n            if (this.isNamedCombinator()) {\n                var r = this.content(this.tokens[this.position + 1]), i = (0, ee.unesc)(r).toLowerCase(), s = {};\n                i !== r && (s.value = \"/\" + r + \"/\");\n                var o = new Si.default({\n                    value: \"/\" + i + \"/\",\n                    source: Ze(this.currToken[k.FIELDS.START_LINE], this.currToken[k.FIELDS.START_COL], this.tokens[this.position + 2][k.FIELDS.END_LINE], this.tokens[this.position + 2][k.FIELDS.END_COL]),\n                    sourceIndex: this.currToken[k.FIELDS.START_POS],\n                    raws: s\n                });\n                return this.position = this.position + 3, o;\n            } else this.unexpected();\n        }, t.combinator = function() {\n            var r = this;\n            if (this.content() === \"|\") return this.namespace();\n            var i = this.locateNextMeaningfulToken(this.position);\n            if (i < 0 || this.tokens[i][k.FIELDS.TYPE] === P.comma) {\n                var s = this.parseWhitespaceEquivalentTokens(i);\n                if (s.length > 0) {\n                    var o = this.current.last;\n                    if (o) {\n                        var a = this.convertWhitespaceNodesToSpace(s), u = a.space, l = a.rawSpace;\n                        l !== void 0 && (o.rawSpaceAfter += l), o.spaces.after += u;\n                    } else s.forEach(function(T) {\n                        return r.newNode(T);\n                    });\n                }\n                return;\n            }\n            var f = this.currToken, d = void 0;\n            i > this.position && (d = this.parseWhitespaceEquivalentTokens(i));\n            var g;\n            if (this.isNamedCombinator() ? g = this.namedCombinator() : this.currToken[k.FIELDS.TYPE] === P.combinator ? (g = new Si.default({\n                value: this.content(),\n                source: ft(this.currToken),\n                sourceIndex: this.currToken[k.FIELDS.START_POS]\n            }), this.position++) : Ei[this.currToken[k.FIELDS.TYPE]] || d || this.unexpected(), g) {\n                if (d) {\n                    var h = this.convertWhitespaceNodesToSpace(d), p = h.space, v = h.rawSpace;\n                    g.spaces.before = p, g.rawSpaceBefore = v;\n                }\n            } else {\n                var _ = this.convertWhitespaceNodesToSpace(d, true), b = _.space, y = _.rawSpace;\n                y || (y = b);\n                var S = {}, E = {\n                    spaces: {}\n                };\n                b.endsWith(\" \") && y.endsWith(\" \") ? (S.before = b.slice(0, b.length - 1), E.spaces.before = y.slice(0, y.length - 1)) : b.startsWith(\" \") && y.startsWith(\" \") ? (S.after = b.slice(1), E.spaces.after = y.slice(1)) : E.value = y, g = new Si.default({\n                    value: \" \",\n                    source: Ti(f, this.tokens[this.position - 1]),\n                    sourceIndex: f[k.FIELDS.START_POS],\n                    spaces: S,\n                    raws: E\n                });\n            }\n            return this.currToken && this.currToken[k.FIELDS.TYPE] === P.space && (g.spaces.after = this.optionalSpace(this.content()), this.position++), this.newNode(g);\n        }, t.comma = function() {\n            if (this.position === this.tokens.length - 1) {\n                this.root.trailingComma = true, this.position++;\n                return;\n            }\n            this.current._inferEndPosition();\n            var r = new wi.default({\n                source: {\n                    start: da(this.tokens[this.position + 1])\n                }\n            });\n            this.current.parent.append(r), this.current = r, this.position++;\n        }, t.comment = function() {\n            var r = this.currToken;\n            this.newNode(new la.default({\n                value: this.content(),\n                source: ft(r),\n                sourceIndex: r[k.FIELDS.START_POS]\n            })), this.position++;\n        }, t.error = function(r, i) {\n            throw this.root.error(r, i);\n        }, t.missingBackslash = function() {\n            return this.error(\"Expected a backslash preceding the semicolon.\", {\n                index: this.currToken[k.FIELDS.START_POS]\n            });\n        }, t.missingParenthesis = function() {\n            return this.expected(\"opening parenthesis\", this.currToken[k.FIELDS.START_POS]);\n        }, t.missingSquareBracket = function() {\n            return this.expected(\"opening square bracket\", this.currToken[k.FIELDS.START_POS]);\n        }, t.unexpected = function() {\n            return this.error(\"Unexpected '\" + this.content() + \"'. Escaping special characters with \\\\ may help.\", this.currToken[k.FIELDS.START_POS]);\n        }, t.namespace = function() {\n            var r = this.prevToken && this.content(this.prevToken) || true;\n            if (this.nextToken[k.FIELDS.TYPE] === P.word) return this.position++, this.word(r);\n            if (this.nextToken[k.FIELDS.TYPE] === P.asterisk) return this.position++, this.universal(r);\n        }, t.nesting = function() {\n            if (this.nextToken) {\n                var r = this.content(this.nextToken);\n                if (r === \"|\") {\n                    this.position++;\n                    return;\n                }\n            }\n            var i = this.currToken;\n            this.newNode(new ep.default({\n                value: this.content(),\n                source: ft(i),\n                sourceIndex: i[k.FIELDS.START_POS]\n            })), this.position++;\n        }, t.parentheses = function() {\n            var r = this.current.last, i = 1;\n            if (this.position++, r && r.type === rp.PSEUDO) {\n                var s = new wi.default({\n                    source: {\n                        start: da(this.tokens[this.position - 1])\n                    }\n                }), o = this.current;\n                for(r.append(s), this.current = s; this.position < this.tokens.length && i;)this.currToken[k.FIELDS.TYPE] === P.openParenthesis && i++, this.currToken[k.FIELDS.TYPE] === P.closeParenthesis && i--, i ? this.parse() : (this.current.source.end = pa(this.currToken), this.current.parent.source.end = pa(this.currToken), this.position++);\n                this.current = o;\n            } else {\n                for(var a = this.currToken, u = \"(\", l; this.position < this.tokens.length && i;)this.currToken[k.FIELDS.TYPE] === P.openParenthesis && i++, this.currToken[k.FIELDS.TYPE] === P.closeParenthesis && i--, l = this.currToken, u += this.parseParenthesisToken(this.currToken), this.position++;\n                r ? r.appendToPropertyAndEscape(\"value\", u, u) : this.newNode(new _i.default({\n                    value: u,\n                    source: Ze(a[k.FIELDS.START_LINE], a[k.FIELDS.START_COL], l[k.FIELDS.END_LINE], l[k.FIELDS.END_COL]),\n                    sourceIndex: a[k.FIELDS.START_POS]\n                }));\n            }\n            if (i) return this.expected(\"closing parenthesis\", this.currToken[k.FIELDS.START_POS]);\n        }, t.pseudo = function() {\n            for(var r = this, i = \"\", s = this.currToken; this.currToken && this.currToken[k.FIELDS.TYPE] === P.colon;)i += this.content(), this.position++;\n            if (!this.currToken) return this.expected([\n                \"pseudo-class\",\n                \"pseudo-element\"\n            ], this.position - 1);\n            if (this.currToken[k.FIELDS.TYPE] === P.word) this.splitWord(false, function(o, a) {\n                i += o, r.newNode(new Jd.default({\n                    value: i,\n                    source: Ti(s, r.currToken),\n                    sourceIndex: s[k.FIELDS.START_POS]\n                })), a > 1 && r.nextToken && r.nextToken[k.FIELDS.TYPE] === P.openParenthesis && r.error(\"Misplaced parenthesis.\", {\n                    index: r.nextToken[k.FIELDS.START_POS]\n                });\n            });\n            else return this.expected([\n                \"pseudo-class\",\n                \"pseudo-element\"\n            ], this.currToken[k.FIELDS.START_POS]);\n        }, t.space = function() {\n            var r = this.content();\n            this.position === 0 || this.prevToken[k.FIELDS.TYPE] === P.comma || this.prevToken[k.FIELDS.TYPE] === P.openParenthesis || this.current.nodes.every(function(i) {\n                return i.type === \"comment\";\n            }) ? (this.spaces = this.optionalSpace(r), this.position++) : this.position === this.tokens.length - 1 || this.nextToken[k.FIELDS.TYPE] === P.comma || this.nextToken[k.FIELDS.TYPE] === P.closeParenthesis ? (this.current.last.spaces.after = this.optionalSpace(r), this.position++) : this.combinator();\n        }, t.string = function() {\n            var r = this.currToken;\n            this.newNode(new _i.default({\n                value: this.content(),\n                source: ft(r),\n                sourceIndex: r[k.FIELDS.START_POS]\n            })), this.position++;\n        }, t.universal = function(r) {\n            var i = this.nextToken;\n            if (i && this.content(i) === \"|\") return this.position++, this.namespace();\n            var s = this.currToken;\n            this.newNode(new Zd.default({\n                value: this.content(),\n                source: ft(s),\n                sourceIndex: s[k.FIELDS.START_POS]\n            }), r), this.position++;\n        }, t.splitWord = function(r, i) {\n            for(var s = this, o = this.nextToken, a = this.content(); o && ~[\n                P.dollar,\n                P.caret,\n                P.equals,\n                P.word\n            ].indexOf(o[k.FIELDS.TYPE]);){\n                this.position++;\n                var u = this.content();\n                if (a += u, u.lastIndexOf(\"\\\\\") === u.length - 1) {\n                    var l = this.nextToken;\n                    l && l[k.FIELDS.TYPE] === P.space && (a += this.requiredSpace(this.content(l)), this.position++);\n                }\n                o = this.nextToken;\n            }\n            var f = Oi(a, \".\").filter(function(p) {\n                var v = a[p - 1] === \"\\\\\", _ = /^\\d+\\.\\d+%$/.test(a);\n                return !v && !_;\n            }), d = Oi(a, \"#\").filter(function(p) {\n                return a[p - 1] !== \"\\\\\";\n            }), g = Oi(a, \"#{\");\n            g.length && (d = d.filter(function(p) {\n                return !~g.indexOf(p);\n            }));\n            var h = (0, tp.default)(op([\n                0\n            ].concat(f, d)));\n            h.forEach(function(p, v) {\n                var _ = h[v + 1] || a.length, b = a.slice(p, _);\n                if (v === 0 && i) return i.call(s, b, h.length);\n                var y, S = s.currToken, E = S[k.FIELDS.START_POS] + h[v], T = Ze(S[1], S[2] + p, S[3], S[2] + (_ - 1));\n                if (~f.indexOf(p)) {\n                    var D = {\n                        value: b.slice(1),\n                        source: T,\n                        sourceIndex: E\n                    };\n                    y = new Xd.default(ct(D, \"value\"));\n                } else if (~d.indexOf(p)) {\n                    var F = {\n                        value: b.slice(1),\n                        source: T,\n                        sourceIndex: E\n                    };\n                    y = new Qd.default(ct(F, \"value\"));\n                } else {\n                    var C = {\n                        value: b,\n                        source: T,\n                        sourceIndex: E\n                    };\n                    ct(C, \"value\"), y = new Kd.default(C);\n                }\n                s.newNode(y, r), r = null;\n            }), this.position++;\n        }, t.word = function(r) {\n            var i = this.nextToken;\n            return i && this.content(i) === \"|\" ? (this.position++, this.namespace()) : this.splitWord(r);\n        }, t.loop = function() {\n            for(; this.position < this.tokens.length;)this.parse(true);\n            return this.current._inferEndPosition(), this.root;\n        }, t.parse = function(r) {\n            switch(this.currToken[k.FIELDS.TYPE]){\n                case P.space:\n                    this.space();\n                    break;\n                case P.comment:\n                    this.comment();\n                    break;\n                case P.openParenthesis:\n                    this.parentheses();\n                    break;\n                case P.closeParenthesis:\n                    r && this.missingParenthesis();\n                    break;\n                case P.openSquare:\n                    this.attribute();\n                    break;\n                case P.dollar:\n                case P.caret:\n                case P.equals:\n                case P.word:\n                    this.word();\n                    break;\n                case P.colon:\n                    this.pseudo();\n                    break;\n                case P.comma:\n                    this.comma();\n                    break;\n                case P.asterisk:\n                    this.universal();\n                    break;\n                case P.ampersand:\n                    this.nesting();\n                    break;\n                case P.slash:\n                case P.combinator:\n                    this.combinator();\n                    break;\n                case P.str:\n                    this.string();\n                    break;\n                case P.closeSquare:\n                    this.missingSquareBracket();\n                case P.semicolon:\n                    this.missingBackslash();\n                default:\n                    this.unexpected();\n            }\n        }, t.expected = function(r, i, s) {\n            if (Array.isArray(r)) {\n                var o = r.pop();\n                r = r.join(\", \") + \" or \" + o;\n            }\n            var a = /^[aeiou]/.test(r[0]) ? \"an\" : \"a\";\n            return s ? this.error(\"Expected \" + a + \" \" + r + ', found \"' + s + '\" instead.', {\n                index: i\n            }) : this.error(\"Expected \" + a + \" \" + r + \".\", {\n                index: i\n            });\n        }, t.requiredSpace = function(r) {\n            return this.options.lossy ? \" \" : r;\n        }, t.optionalSpace = function(r) {\n            return this.options.lossy ? \"\" : r;\n        }, t.lossySpace = function(r, i) {\n            return this.options.lossy ? i ? \" \" : \"\" : r;\n        }, t.parseParenthesisToken = function(r) {\n            var i = this.content(r);\n            return r[k.FIELDS.TYPE] === P.space ? this.requiredSpace(i) : i;\n        }, t.newNode = function(r, i) {\n            return i && (/^ +$/.test(i) && (this.options.lossy || (this.spaces = (this.spaces || \"\") + i), i = true), r.namespace = i, ct(r, \"namespace\")), this.spaces && (r.spaces.before = this.spaces, this.spaces = \"\"), this.current.append(r);\n        }, t.content = function(r) {\n            return r === void 0 && (r = this.currToken), this.css.slice(r[k.FIELDS.START_POS], r[k.FIELDS.END_POS]);\n        }, t.locateNextMeaningfulToken = function(r) {\n            r === void 0 && (r = this.position + 1);\n            for(var i = r; i < this.tokens.length;)if (ip[this.tokens[i][k.FIELDS.TYPE]]) {\n                i++;\n                continue;\n            } else return i;\n            return -1;\n        }, np(e, [\n            {\n                key: \"currToken\",\n                get: function() {\n                    return this.tokens[this.position];\n                }\n            },\n            {\n                key: \"nextToken\",\n                get: function() {\n                    return this.tokens[this.position + 1];\n                }\n            },\n            {\n                key: \"prevToken\",\n                get: function() {\n                    return this.tokens[this.position - 1];\n                }\n            }\n        ]), e;\n    }();\n    Xt.default = sp;\n    ma.exports = Xt.default;\n});\nvar ba = R((Qt, va)=>{\n    \"use strict\";\n    c();\n    Qt.__esModule = true;\n    Qt.default = void 0;\n    var ap = up(ga());\n    function up(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var lp = function() {\n        function e(n, r) {\n            this.func = n || function() {}, this.funcRes = null, this.options = r;\n        }\n        var t = e.prototype;\n        return t._shouldUpdateSelector = function(r, i) {\n            i === void 0 && (i = {});\n            var s = Object.assign({}, this.options, i);\n            return s.updateSelector === false ? false : typeof r != \"string\";\n        }, t._isLossy = function(r) {\n            r === void 0 && (r = {});\n            var i = Object.assign({}, this.options, r);\n            return i.lossless === false;\n        }, t._root = function(r, i) {\n            i === void 0 && (i = {});\n            var s = new ap.default(r, this._parseOptions(i));\n            return s.root;\n        }, t._parseOptions = function(r) {\n            return {\n                lossy: this._isLossy(r)\n            };\n        }, t._run = function(r, i) {\n            var s = this;\n            return i === void 0 && (i = {}), new Promise(function(o, a) {\n                try {\n                    var u = s._root(r, i);\n                    Promise.resolve(s.func(u)).then(function(l) {\n                        var f = void 0;\n                        return s._shouldUpdateSelector(r, i) && (f = u.toString(), r.selector = f), {\n                            transform: l,\n                            root: u,\n                            string: f\n                        };\n                    }).then(o, a);\n                } catch (l) {\n                    a(l);\n                    return;\n                }\n            });\n        }, t._runSync = function(r, i) {\n            i === void 0 && (i = {});\n            var s = this._root(r, i), o = this.func(s);\n            if (o && typeof o.then == \"function\") throw new Error(\"Selector processor returned a promise to a synchronous call.\");\n            var a = void 0;\n            return i.updateSelector && typeof r != \"string\" && (a = s.toString(), r.selector = a), {\n                transform: o,\n                root: s,\n                string: a\n            };\n        }, t.ast = function(r, i) {\n            return this._run(r, i).then(function(s) {\n                return s.root;\n            });\n        }, t.astSync = function(r, i) {\n            return this._runSync(r, i).root;\n        }, t.transform = function(r, i) {\n            return this._run(r, i).then(function(s) {\n                return s.transform;\n            });\n        }, t.transformSync = function(r, i) {\n            return this._runSync(r, i).transform;\n        }, t.process = function(r, i) {\n            return this._run(r, i).then(function(s) {\n                return s.string || s.root.toString();\n            });\n        }, t.processSync = function(r, i) {\n            var s = this._runSync(r, i);\n            return s.string || s.root.toString();\n        }, e;\n    }();\n    Qt.default = lp;\n    va.exports = Qt.default;\n});\nvar ya = R((K)=>{\n    \"use strict\";\n    c();\n    K.__esModule = true;\n    K.universal = K.tag = K.string = K.selector = K.root = K.pseudo = K.nesting = K.id = K.comment = K.combinator = K.className = K.attribute = void 0;\n    var fp = Te(di()), cp = Te(Xn()), dp = Te(gi()), pp = Te(Kn()), hp = Te(Zn()), mp = Te(bi()), gp = Te(si()), vp = Te(Gn()), bp = Te(Hn()), yp = Te(ii()), xp = Te(ri()), wp = Te(hi());\n    function Te(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var _p = function(t) {\n        return new fp.default(t);\n    };\n    K.attribute = _p;\n    var Sp = function(t) {\n        return new cp.default(t);\n    };\n    K.className = Sp;\n    var kp = function(t) {\n        return new dp.default(t);\n    };\n    K.combinator = kp;\n    var Tp = function(t) {\n        return new pp.default(t);\n    };\n    K.comment = Tp;\n    var Op = function(t) {\n        return new hp.default(t);\n    };\n    K.id = Op;\n    var Ep = function(t) {\n        return new mp.default(t);\n    };\n    K.nesting = Ep;\n    var Pp = function(t) {\n        return new gp.default(t);\n    };\n    K.pseudo = Pp;\n    var Ap = function(t) {\n        return new vp.default(t);\n    };\n    K.root = Ap;\n    var Ip = function(t) {\n        return new bp.default(t);\n    };\n    K.selector = Ip;\n    var Rp = function(t) {\n        return new yp.default(t);\n    };\n    K.string = Rp;\n    var Lp = function(t) {\n        return new xp.default(t);\n    };\n    K.tag = Lp;\n    var Cp = function(t) {\n        return new wp.default(t);\n    };\n    K.universal = Cp;\n});\nvar Sa = R((G)=>{\n    \"use strict\";\n    c();\n    G.__esModule = true;\n    G.isNode = Pi;\n    G.isPseudoElement = _a3;\n    G.isPseudoClass = Gp;\n    G.isContainer = jp;\n    G.isNamespace = Hp;\n    G.isUniversal = G.isTag = G.isString = G.isSelector = G.isRoot = G.isPseudo = G.isNesting = G.isIdentifier = G.isComment = G.isCombinator = G.isClassName = G.isAttribute = void 0;\n    var te = ae(), me, Dp = (me = {}, me[te.ATTRIBUTE] = true, me[te.CLASS] = true, me[te.COMBINATOR] = true, me[te.COMMENT] = true, me[te.ID] = true, me[te.NESTING] = true, me[te.PSEUDO] = true, me[te.ROOT] = true, me[te.SELECTOR] = true, me[te.STRING] = true, me[te.TAG] = true, me[te.UNIVERSAL] = true, me);\n    function Pi(e) {\n        return typeof e == \"object\" && Dp[e.type];\n    }\n    function Oe(e, t) {\n        return Pi(t) && t.type === e;\n    }\n    var xa = Oe.bind(null, te.ATTRIBUTE);\n    G.isAttribute = xa;\n    var Fp = Oe.bind(null, te.CLASS);\n    G.isClassName = Fp;\n    var Np = Oe.bind(null, te.COMBINATOR);\n    G.isCombinator = Np;\n    var Mp = Oe.bind(null, te.COMMENT);\n    G.isComment = Mp;\n    var $p = Oe.bind(null, te.ID);\n    G.isIdentifier = $p;\n    var Wp = Oe.bind(null, te.NESTING);\n    G.isNesting = Wp;\n    var Ai = Oe.bind(null, te.PSEUDO);\n    G.isPseudo = Ai;\n    var qp = Oe.bind(null, te.ROOT);\n    G.isRoot = qp;\n    var Bp = Oe.bind(null, te.SELECTOR);\n    G.isSelector = Bp;\n    var Up = Oe.bind(null, te.STRING);\n    G.isString = Up;\n    var wa = Oe.bind(null, te.TAG);\n    G.isTag = wa;\n    var zp = Oe.bind(null, te.UNIVERSAL);\n    G.isUniversal = zp;\n    function _a3(e) {\n        return Ai(e) && e.value && (e.value.startsWith(\"::\") || e.value.toLowerCase() === \":before\" || e.value.toLowerCase() === \":after\" || e.value.toLowerCase() === \":first-letter\" || e.value.toLowerCase() === \":first-line\");\n    }\n    function Gp(e) {\n        return Ai(e) && !_a3(e);\n    }\n    function jp(e) {\n        return !!(Pi(e) && e.walk);\n    }\n    function Hp(e) {\n        return xa(e) || wa(e);\n    }\n});\nvar ka = R((Ae)=>{\n    \"use strict\";\n    c();\n    Ae.__esModule = true;\n    var Ii = ae();\n    Object.keys(Ii).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Ae && Ae[e] === Ii[e] || (Ae[e] = Ii[e]);\n    });\n    var Ri = ya();\n    Object.keys(Ri).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Ae && Ae[e] === Ri[e] || (Ae[e] = Ri[e]);\n    });\n    var Li = Sa();\n    Object.keys(Li).forEach(function(e) {\n        e === \"default\" || e === \"__esModule\" || e in Ae && Ae[e] === Li[e] || (Ae[e] = Li[e]);\n    });\n});\nvar Ea = R((Kt, Oa)=>{\n    \"use strict\";\n    c();\n    Kt.__esModule = true;\n    Kt.default = void 0;\n    var Vp = Qp(ba()), Yp = Xp(ka());\n    function Ta() {\n        if (typeof WeakMap != \"function\") return null;\n        var e = /* @__PURE__ */ new WeakMap();\n        return Ta = function() {\n            return e;\n        }, e;\n    }\n    function Xp(e) {\n        if (e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var t = Ta();\n        if (t && t.has(e)) return t.get(e);\n        var n = {}, r = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var i in e)if (Object.prototype.hasOwnProperty.call(e, i)) {\n            var s = r ? Object.getOwnPropertyDescriptor(e, i) : null;\n            s && (s.get || s.set) ? Object.defineProperty(n, i, s) : n[i] = e[i];\n        }\n        return n.default = e, t && t.set(e, n), n;\n    }\n    function Qp(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var Ci = function(t) {\n        return new Vp.default(t);\n    };\n    Object.assign(Ci, Yp);\n    delete Ci.__esModule;\n    var Kp = Ci;\n    Kt.default = Kp;\n    Oa.exports = Kt.default;\n});\nvar Pa = R((Di)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Di, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Di, \"default\", {\n        enumerable: true,\n        get: ()=>Jp\n    });\n    function Jp(e) {\n        return e.replace(/\\\\,/g, \"\\\\2c \");\n    }\n});\nvar Ia = R((Yg, Aa)=>{\n    \"use strict\";\n    c();\n    Aa.exports = {\n        aliceblue: [\n            240,\n            248,\n            255\n        ],\n        antiquewhite: [\n            250,\n            235,\n            215\n        ],\n        aqua: [\n            0,\n            255,\n            255\n        ],\n        aquamarine: [\n            127,\n            255,\n            212\n        ],\n        azure: [\n            240,\n            255,\n            255\n        ],\n        beige: [\n            245,\n            245,\n            220\n        ],\n        bisque: [\n            255,\n            228,\n            196\n        ],\n        black: [\n            0,\n            0,\n            0\n        ],\n        blanchedalmond: [\n            255,\n            235,\n            205\n        ],\n        blue: [\n            0,\n            0,\n            255\n        ],\n        blueviolet: [\n            138,\n            43,\n            226\n        ],\n        brown: [\n            165,\n            42,\n            42\n        ],\n        burlywood: [\n            222,\n            184,\n            135\n        ],\n        cadetblue: [\n            95,\n            158,\n            160\n        ],\n        chartreuse: [\n            127,\n            255,\n            0\n        ],\n        chocolate: [\n            210,\n            105,\n            30\n        ],\n        coral: [\n            255,\n            127,\n            80\n        ],\n        cornflowerblue: [\n            100,\n            149,\n            237\n        ],\n        cornsilk: [\n            255,\n            248,\n            220\n        ],\n        crimson: [\n            220,\n            20,\n            60\n        ],\n        cyan: [\n            0,\n            255,\n            255\n        ],\n        darkblue: [\n            0,\n            0,\n            139\n        ],\n        darkcyan: [\n            0,\n            139,\n            139\n        ],\n        darkgoldenrod: [\n            184,\n            134,\n            11\n        ],\n        darkgray: [\n            169,\n            169,\n            169\n        ],\n        darkgreen: [\n            0,\n            100,\n            0\n        ],\n        darkgrey: [\n            169,\n            169,\n            169\n        ],\n        darkkhaki: [\n            189,\n            183,\n            107\n        ],\n        darkmagenta: [\n            139,\n            0,\n            139\n        ],\n        darkolivegreen: [\n            85,\n            107,\n            47\n        ],\n        darkorange: [\n            255,\n            140,\n            0\n        ],\n        darkorchid: [\n            153,\n            50,\n            204\n        ],\n        darkred: [\n            139,\n            0,\n            0\n        ],\n        darksalmon: [\n            233,\n            150,\n            122\n        ],\n        darkseagreen: [\n            143,\n            188,\n            143\n        ],\n        darkslateblue: [\n            72,\n            61,\n            139\n        ],\n        darkslategray: [\n            47,\n            79,\n            79\n        ],\n        darkslategrey: [\n            47,\n            79,\n            79\n        ],\n        darkturquoise: [\n            0,\n            206,\n            209\n        ],\n        darkviolet: [\n            148,\n            0,\n            211\n        ],\n        deeppink: [\n            255,\n            20,\n            147\n        ],\n        deepskyblue: [\n            0,\n            191,\n            255\n        ],\n        dimgray: [\n            105,\n            105,\n            105\n        ],\n        dimgrey: [\n            105,\n            105,\n            105\n        ],\n        dodgerblue: [\n            30,\n            144,\n            255\n        ],\n        firebrick: [\n            178,\n            34,\n            34\n        ],\n        floralwhite: [\n            255,\n            250,\n            240\n        ],\n        forestgreen: [\n            34,\n            139,\n            34\n        ],\n        fuchsia: [\n            255,\n            0,\n            255\n        ],\n        gainsboro: [\n            220,\n            220,\n            220\n        ],\n        ghostwhite: [\n            248,\n            248,\n            255\n        ],\n        gold: [\n            255,\n            215,\n            0\n        ],\n        goldenrod: [\n            218,\n            165,\n            32\n        ],\n        gray: [\n            128,\n            128,\n            128\n        ],\n        green: [\n            0,\n            128,\n            0\n        ],\n        greenyellow: [\n            173,\n            255,\n            47\n        ],\n        grey: [\n            128,\n            128,\n            128\n        ],\n        honeydew: [\n            240,\n            255,\n            240\n        ],\n        hotpink: [\n            255,\n            105,\n            180\n        ],\n        indianred: [\n            205,\n            92,\n            92\n        ],\n        indigo: [\n            75,\n            0,\n            130\n        ],\n        ivory: [\n            255,\n            255,\n            240\n        ],\n        khaki: [\n            240,\n            230,\n            140\n        ],\n        lavender: [\n            230,\n            230,\n            250\n        ],\n        lavenderblush: [\n            255,\n            240,\n            245\n        ],\n        lawngreen: [\n            124,\n            252,\n            0\n        ],\n        lemonchiffon: [\n            255,\n            250,\n            205\n        ],\n        lightblue: [\n            173,\n            216,\n            230\n        ],\n        lightcoral: [\n            240,\n            128,\n            128\n        ],\n        lightcyan: [\n            224,\n            255,\n            255\n        ],\n        lightgoldenrodyellow: [\n            250,\n            250,\n            210\n        ],\n        lightgray: [\n            211,\n            211,\n            211\n        ],\n        lightgreen: [\n            144,\n            238,\n            144\n        ],\n        lightgrey: [\n            211,\n            211,\n            211\n        ],\n        lightpink: [\n            255,\n            182,\n            193\n        ],\n        lightsalmon: [\n            255,\n            160,\n            122\n        ],\n        lightseagreen: [\n            32,\n            178,\n            170\n        ],\n        lightskyblue: [\n            135,\n            206,\n            250\n        ],\n        lightslategray: [\n            119,\n            136,\n            153\n        ],\n        lightslategrey: [\n            119,\n            136,\n            153\n        ],\n        lightsteelblue: [\n            176,\n            196,\n            222\n        ],\n        lightyellow: [\n            255,\n            255,\n            224\n        ],\n        lime: [\n            0,\n            255,\n            0\n        ],\n        limegreen: [\n            50,\n            205,\n            50\n        ],\n        linen: [\n            250,\n            240,\n            230\n        ],\n        magenta: [\n            255,\n            0,\n            255\n        ],\n        maroon: [\n            128,\n            0,\n            0\n        ],\n        mediumaquamarine: [\n            102,\n            205,\n            170\n        ],\n        mediumblue: [\n            0,\n            0,\n            205\n        ],\n        mediumorchid: [\n            186,\n            85,\n            211\n        ],\n        mediumpurple: [\n            147,\n            112,\n            219\n        ],\n        mediumseagreen: [\n            60,\n            179,\n            113\n        ],\n        mediumslateblue: [\n            123,\n            104,\n            238\n        ],\n        mediumspringgreen: [\n            0,\n            250,\n            154\n        ],\n        mediumturquoise: [\n            72,\n            209,\n            204\n        ],\n        mediumvioletred: [\n            199,\n            21,\n            133\n        ],\n        midnightblue: [\n            25,\n            25,\n            112\n        ],\n        mintcream: [\n            245,\n            255,\n            250\n        ],\n        mistyrose: [\n            255,\n            228,\n            225\n        ],\n        moccasin: [\n            255,\n            228,\n            181\n        ],\n        navajowhite: [\n            255,\n            222,\n            173\n        ],\n        navy: [\n            0,\n            0,\n            128\n        ],\n        oldlace: [\n            253,\n            245,\n            230\n        ],\n        olive: [\n            128,\n            128,\n            0\n        ],\n        olivedrab: [\n            107,\n            142,\n            35\n        ],\n        orange: [\n            255,\n            165,\n            0\n        ],\n        orangered: [\n            255,\n            69,\n            0\n        ],\n        orchid: [\n            218,\n            112,\n            214\n        ],\n        palegoldenrod: [\n            238,\n            232,\n            170\n        ],\n        palegreen: [\n            152,\n            251,\n            152\n        ],\n        paleturquoise: [\n            175,\n            238,\n            238\n        ],\n        palevioletred: [\n            219,\n            112,\n            147\n        ],\n        papayawhip: [\n            255,\n            239,\n            213\n        ],\n        peachpuff: [\n            255,\n            218,\n            185\n        ],\n        peru: [\n            205,\n            133,\n            63\n        ],\n        pink: [\n            255,\n            192,\n            203\n        ],\n        plum: [\n            221,\n            160,\n            221\n        ],\n        powderblue: [\n            176,\n            224,\n            230\n        ],\n        purple: [\n            128,\n            0,\n            128\n        ],\n        rebeccapurple: [\n            102,\n            51,\n            153\n        ],\n        red: [\n            255,\n            0,\n            0\n        ],\n        rosybrown: [\n            188,\n            143,\n            143\n        ],\n        royalblue: [\n            65,\n            105,\n            225\n        ],\n        saddlebrown: [\n            139,\n            69,\n            19\n        ],\n        salmon: [\n            250,\n            128,\n            114\n        ],\n        sandybrown: [\n            244,\n            164,\n            96\n        ],\n        seagreen: [\n            46,\n            139,\n            87\n        ],\n        seashell: [\n            255,\n            245,\n            238\n        ],\n        sienna: [\n            160,\n            82,\n            45\n        ],\n        silver: [\n            192,\n            192,\n            192\n        ],\n        skyblue: [\n            135,\n            206,\n            235\n        ],\n        slateblue: [\n            106,\n            90,\n            205\n        ],\n        slategray: [\n            112,\n            128,\n            144\n        ],\n        slategrey: [\n            112,\n            128,\n            144\n        ],\n        snow: [\n            255,\n            250,\n            250\n        ],\n        springgreen: [\n            0,\n            255,\n            127\n        ],\n        steelblue: [\n            70,\n            130,\n            180\n        ],\n        tan: [\n            210,\n            180,\n            140\n        ],\n        teal: [\n            0,\n            128,\n            128\n        ],\n        thistle: [\n            216,\n            191,\n            216\n        ],\n        tomato: [\n            255,\n            99,\n            71\n        ],\n        turquoise: [\n            64,\n            224,\n            208\n        ],\n        violet: [\n            238,\n            130,\n            238\n        ],\n        wheat: [\n            245,\n            222,\n            179\n        ],\n        white: [\n            255,\n            255,\n            255\n        ],\n        whitesmoke: [\n            245,\n            245,\n            245\n        ],\n        yellow: [\n            255,\n            255,\n            0\n        ],\n        yellowgreen: [\n            154,\n            205,\n            50\n        ]\n    };\n});\nvar Ni = R((Fi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Fi, \"__esModule\", {\n        value: true\n    });\n    function Zp(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    Zp(Fi, {\n        parseColor: ()=>oh,\n        formatColor: ()=>sh\n    });\n    var Ra = eh(Ia());\n    function eh(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var th = /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, rh = /^#([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, Ge = /(?:\\d+|\\d*\\.\\d+)%?/, Gr = /(?:\\s*,\\s*|\\s+)/, La = /\\s*[,/]\\s*/, je = /var\\(--(?:[^ )]*?)\\)/, nh = new RegExp(`^(rgb)a?\\\\(\\\\s*(${Ge.source}|${je.source})(?:${Gr.source}(${Ge.source}|${je.source}))?(?:${Gr.source}(${Ge.source}|${je.source}))?(?:${La.source}(${Ge.source}|${je.source}))?\\\\s*\\\\)$`), ih = new RegExp(`^(hsl)a?\\\\(\\\\s*((?:${Ge.source})(?:deg|rad|grad|turn)?|${je.source})(?:${Gr.source}(${Ge.source}|${je.source}))?(?:${Gr.source}(${Ge.source}|${je.source}))?(?:${La.source}(${Ge.source}|${je.source}))?\\\\s*\\\\)$`);\n    function oh(e, { loose: t = false  } = {}) {\n        var n, r;\n        if (typeof e != \"string\") return null;\n        if (e = e.trim(), e === \"transparent\") return {\n            mode: \"rgb\",\n            color: [\n                \"0\",\n                \"0\",\n                \"0\"\n            ],\n            alpha: \"0\"\n        };\n        if (e in Ra.default) return {\n            mode: \"rgb\",\n            color: Ra.default[e].map((u)=>u.toString())\n        };\n        let i = e.replace(rh, (u, l, f, d, g)=>[\n                \"#\",\n                l,\n                l,\n                f,\n                f,\n                d,\n                d,\n                g ? g + g : \"\"\n            ].join(\"\")).match(th);\n        if (i !== null) return {\n            mode: \"rgb\",\n            color: [\n                parseInt(i[1], 16),\n                parseInt(i[2], 16),\n                parseInt(i[3], 16)\n            ].map((u)=>u.toString()),\n            alpha: i[4] ? (parseInt(i[4], 16) / 255).toString() : void 0\n        };\n        var s;\n        let o = (s = e.match(nh)) !== null && s !== void 0 ? s : e.match(ih);\n        if (o === null) return null;\n        let a = [\n            o[2],\n            o[3],\n            o[4]\n        ].filter(Boolean).map((u)=>u.toString());\n        return !t && a.length !== 3 || a.length < 3 && !a.some((u)=>/^var\\(.*?\\)$/.test(u)) ? null : {\n            mode: o[1],\n            color: a,\n            alpha: (n = o[5]) === null || n === void 0 || (r = n.toString) === null || r === void 0 ? void 0 : r.call(n)\n        };\n    }\n    function sh({ mode: e , color: t , alpha: n  }) {\n        let r = n !== void 0;\n        return `${e}(${t.join(\" \")}${r ? ` / ${n}` : \"\"})`;\n    }\n});\nvar $i = R((Mi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Mi, \"__esModule\", {\n        value: true\n    });\n    function ah(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    ah(Mi, {\n        withAlphaValue: ()=>uh,\n        default: ()=>lh\n    });\n    var jr = Ni();\n    function uh(e, t, n) {\n        if (typeof e == \"function\") return e({\n            opacityValue: t\n        });\n        let r = (0, jr.parseColor)(e, {\n            loose: true\n        });\n        return r === null ? n : (0, jr.formatColor)({\n            ...r,\n            alpha: t\n        });\n    }\n    function lh({ color: e , property: t , variable: n  }) {\n        let r = [].concat(t);\n        if (typeof e == \"function\") return {\n            [n]: \"1\",\n            ...Object.fromEntries(r.map((s)=>[\n                    s,\n                    e({\n                        opacityVariable: n,\n                        opacityValue: `var(${n})`\n                    })\n                ]))\n        };\n        let i = (0, jr.parseColor)(e);\n        return i === null ? Object.fromEntries(r.map((s)=>[\n                s,\n                e\n            ])) : i.alpha !== void 0 ? Object.fromEntries(r.map((s)=>[\n                s,\n                e\n            ])) : {\n            [n]: \"1\",\n            ...Object.fromEntries(r.map((s)=>[\n                    s,\n                    (0, jr.formatColor)({\n                        ...i,\n                        alpha: `var(${n})`\n                    })\n                ]))\n        };\n    }\n});\nvar Ma = R((Wi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Wi, \"__esModule\", {\n        value: true\n    });\n    function fh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    fh(Wi, {\n        pattern: ()=>dh,\n        withoutCapturing: ()=>Da,\n        any: ()=>Fa,\n        optional: ()=>ph,\n        zeroOrMore: ()=>hh,\n        nestedBrackets: ()=>Na,\n        escape: ()=>et2\n    });\n    var Ca = /[\\\\^$.*+?()[\\]{}|]/g, ch = RegExp(Ca.source);\n    function Jt(e) {\n        return e = Array.isArray(e) ? e : [\n            e\n        ], e = e.map((t)=>t instanceof RegExp ? t.source : t), e.join(\"\");\n    }\n    function dh(e) {\n        return new RegExp(Jt(e), \"g\");\n    }\n    function Da(e) {\n        return new RegExp(`(?:${Jt(e)})`, \"g\");\n    }\n    function Fa(e) {\n        return `(?:${e.map(Jt).join(\"|\")})`;\n    }\n    function ph(e) {\n        return `(?:${Jt(e)})?`;\n    }\n    function hh(e) {\n        return `(?:${Jt(e)})*`;\n    }\n    function Na(e, t, n = 1) {\n        return Da([\n            et2(e),\n            /[^\\s]*/,\n            n === 1 ? `[^${et2(e)}${et2(t)}s]*` : Fa([\n                `[^${et2(e)}${et2(t)}s]*`,\n                Na(e, t, n - 1)\n            ]),\n            /[^\\s]*/,\n            et2(t)\n        ]);\n    }\n    function et2(e) {\n        return e && ch.test(e) ? e.replace(Ca, \"\\\\$&\") : e || \"\";\n    }\n});\nvar Wa = R((qi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(qi, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(qi, \"splitAtTopLevelOnly\", {\n        enumerable: true,\n        get: ()=>vh\n    });\n    var mh = gh(Ma());\n    function $a(e) {\n        if (typeof WeakMap != \"function\") return null;\n        var t = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();\n        return ($a = function(r) {\n            return r ? n : t;\n        })(e);\n    }\n    function gh(e, t) {\n        if (!t && e && e.__esModule) return e;\n        if (e === null || typeof e != \"object\" && typeof e != \"function\") return {\n            default: e\n        };\n        var n = $a(t);\n        if (n && n.has(e)) return n.get(e);\n        var r = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for(var s in e)if (s !== \"default\" && Object.prototype.hasOwnProperty.call(e, s)) {\n            var o = i ? Object.getOwnPropertyDescriptor(e, s) : null;\n            o && (o.get || o.set) ? Object.defineProperty(r, s, o) : r[s] = e[s];\n        }\n        return r.default = e, n && n.set(e, r), r;\n    }\n    function* vh(e, t) {\n        let n = new RegExp(`[(){}\\\\[\\\\]${mh.escape(t)}]`, \"g\"), r = 0, i = 0, s = false, o = 0, a = 0, u = t.length;\n        for (let l of e.matchAll(n)){\n            let f = l[0] === t[o], d = o === u - 1, g = f && d;\n            l[0] === \"(\" && r++, l[0] === \")\" && r--, l[0] === \"[\" && r++, l[0] === \"]\" && r--, l[0] === \"{\" && r++, l[0] === \"}\" && r--, f && r === 0 && (a === 0 && (a = l.index), o++), g && r === 0 && (s = true, yield e.substring(i, a), i = a + u), o === u && (o = 0, a = 0);\n        }\n        s ? yield e.substring(i) : yield e;\n    }\n});\nvar Ba = R((Bi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Bi, \"__esModule\", {\n        value: true\n    });\n    function bh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    bh(Bi, {\n        parseBoxShadowValue: ()=>_h,\n        formatBoxShadowValue: ()=>Sh\n    });\n    var yh = Wa(), xh = /* @__PURE__ */ new Set([\n        \"inset\",\n        \"inherit\",\n        \"initial\",\n        \"revert\",\n        \"unset\"\n    ]), wh = /\\ +(?![^(]*\\))/g, qa = /^-?(\\d+|\\.\\d+)(.*?)$/g;\n    function _h(e) {\n        return Array.from((0, yh.splitAtTopLevelOnly)(e, \",\")).map((n)=>{\n            let r = n.trim(), i = {\n                raw: r\n            }, s = r.split(wh), o = /* @__PURE__ */ new Set();\n            for (let a of s)qa.lastIndex = 0, !o.has(\"KEYWORD\") && xh.has(a) ? (i.keyword = a, o.add(\"KEYWORD\")) : qa.test(a) ? o.has(\"X\") ? o.has(\"Y\") ? o.has(\"BLUR\") ? o.has(\"SPREAD\") || (i.spread = a, o.add(\"SPREAD\")) : (i.blur = a, o.add(\"BLUR\")) : (i.y = a, o.add(\"Y\")) : (i.x = a, o.add(\"X\")) : i.color ? (i.unknown || (i.unknown = []), i.unknown.push(a)) : i.color = a;\n            return i.valid = i.x !== void 0 && i.y !== void 0, i;\n        });\n    }\n    function Sh(e) {\n        return e.map((t)=>t.valid ? [\n                t.keyword,\n                t.x,\n                t.y,\n                t.blur,\n                t.spread,\n                t.color\n            ].filter(Boolean).join(\" \") : t.raw).join(\", \");\n    }\n});\nvar Ya = R((zi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(zi, \"__esModule\", {\n        value: true\n    });\n    function kh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    kh(zi, {\n        normalize: ()=>He,\n        url: ()=>Ga,\n        number: ()=>Eh,\n        percentage: ()=>ja,\n        length: ()=>Ha,\n        lineWidth: ()=>Ih,\n        shadow: ()=>Rh,\n        color: ()=>Lh,\n        image: ()=>Ch,\n        gradient: ()=>Va,\n        position: ()=>Nh,\n        familyName: ()=>Mh,\n        genericName: ()=>Wh,\n        absoluteSize: ()=>Bh,\n        relativeSize: ()=>zh\n    });\n    var Th = Ni(), Oh = Ba(), Ui = [\n        \"min\",\n        \"max\",\n        \"clamp\",\n        \"calc\"\n    ], za = /,(?![^(]*\\))/g, Hr = /_(?![^(]*\\))/g;\n    function He(e, t = true) {\n        return e.includes(\"url(\") ? e.split(/(url\\(.*?\\))/g).filter(Boolean).map((n)=>/^url\\(.*?\\)$/.test(n) ? n : He(n, false)).join(\"\") : (e = e.replace(/([^\\\\])_+/g, (n, r)=>r + \" \".repeat(n.length - 1)).replace(/^_/g, \" \").replace(/\\\\_/g, \"_\"), t && (e = e.trim()), e = e.replace(/(calc|min|max|clamp)\\(.+\\)/g, (n)=>n.replace(/(-?\\d*\\.?\\d(?!\\b-.+[,)](?![^+\\-/*])\\D)(?:%|[a-z]+)?|\\))([+\\-/*])/g, \"$1 $2 \")), e);\n    }\n    function Ga(e) {\n        return e.startsWith(\"url(\");\n    }\n    function Eh(e) {\n        return !isNaN(Number(e)) || Ui.some((t)=>new RegExp(`^${t}\\\\(.+?`).test(e));\n    }\n    function ja(e) {\n        return e.split(Hr).every((t)=>/%$/g.test(t) || Ui.some((n)=>new RegExp(`^${n}\\\\(.+?%`).test(t)));\n    }\n    var Ph = [\n        \"cm\",\n        \"mm\",\n        \"Q\",\n        \"in\",\n        \"pc\",\n        \"pt\",\n        \"px\",\n        \"em\",\n        \"ex\",\n        \"ch\",\n        \"rem\",\n        \"lh\",\n        \"vw\",\n        \"vh\",\n        \"vmin\",\n        \"vmax\"\n    ], Ua = `(?:${Ph.join(\"|\")})`;\n    function Ha(e) {\n        return e.split(Hr).every((t)=>t === \"0\" || new RegExp(`${Ua}$`).test(t) || Ui.some((n)=>new RegExp(`^${n}\\\\(.+?${Ua}`).test(t)));\n    }\n    var Ah = /* @__PURE__ */ new Set([\n        \"thin\",\n        \"medium\",\n        \"thick\"\n    ]);\n    function Ih(e) {\n        return Ah.has(e);\n    }\n    function Rh(e) {\n        let t = (0, Oh.parseBoxShadowValue)(He(e));\n        for (let n of t)if (!n.valid) return false;\n        return true;\n    }\n    function Lh(e) {\n        let t = 0;\n        return e.split(Hr).every((r)=>(r = He(r), r.startsWith(\"var(\") ? true : (0, Th.parseColor)(r, {\n                loose: true\n            }) !== null ? (t++, true) : false)) ? t > 0 : false;\n    }\n    function Ch(e) {\n        let t = 0;\n        return e.split(za).every((r)=>(r = He(r), r.startsWith(\"var(\") ? true : Ga(r) || Va(r) || [\n                \"element(\",\n                \"image(\",\n                \"cross-fade(\",\n                \"image-set(\"\n            ].some((i)=>r.startsWith(i)) ? (t++, true) : false)) ? t > 0 : false;\n    }\n    var Dh = /* @__PURE__ */ new Set([\n        \"linear-gradient\",\n        \"radial-gradient\",\n        \"repeating-linear-gradient\",\n        \"repeating-radial-gradient\",\n        \"conic-gradient\"\n    ]);\n    function Va(e) {\n        e = He(e);\n        for (let t of Dh)if (e.startsWith(`${t}(`)) return true;\n        return false;\n    }\n    var Fh = /* @__PURE__ */ new Set([\n        \"center\",\n        \"top\",\n        \"right\",\n        \"bottom\",\n        \"left\"\n    ]);\n    function Nh(e) {\n        let t = 0;\n        return e.split(Hr).every((r)=>(r = He(r), r.startsWith(\"var(\") ? true : Fh.has(r) || Ha(r) || ja(r) ? (t++, true) : false)) ? t > 0 : false;\n    }\n    function Mh(e) {\n        let t = 0;\n        return e.split(za).every((r)=>(r = He(r), r.startsWith(\"var(\") ? true : r.includes(\" \") && !/(['\"])([^\"']+)\\1/g.test(r) || /^\\d/g.test(r) ? false : (t++, true))) ? t > 0 : false;\n    }\n    var $h = /* @__PURE__ */ new Set([\n        \"serif\",\n        \"sans-serif\",\n        \"monospace\",\n        \"cursive\",\n        \"fantasy\",\n        \"system-ui\",\n        \"ui-serif\",\n        \"ui-sans-serif\",\n        \"ui-monospace\",\n        \"ui-rounded\",\n        \"math\",\n        \"emoji\",\n        \"fangsong\"\n    ]);\n    function Wh(e) {\n        return $h.has(e);\n    }\n    var qh = /* @__PURE__ */ new Set([\n        \"xx-small\",\n        \"x-small\",\n        \"small\",\n        \"medium\",\n        \"large\",\n        \"x-large\",\n        \"x-large\",\n        \"xxx-large\"\n    ]);\n    function Bh(e) {\n        return qh.has(e);\n    }\n    var Uh = /* @__PURE__ */ new Set([\n        \"larger\",\n        \"smaller\"\n    ]);\n    function zh(e) {\n        return Uh.has(e);\n    }\n});\nvar ru = R((Hi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Hi, \"__esModule\", {\n        value: true\n    });\n    function Gh(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    Gh(Hi, {\n        updateAllClasses: ()=>Vh,\n        asValue: ()=>er,\n        parseColorFormat: ()=>Gi,\n        asColor: ()=>Za,\n        asLookupValue: ()=>eu,\n        coerceValue: ()=>Kh\n    });\n    var jh = ji(Ea()), Hh = ji(Pa()), Xa = $i(), ge = Ya(), Qa = ji(In());\n    function ji(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function Vh(e, t) {\n        return (0, jh.default)((i)=>{\n            i.walkClasses((s)=>{\n                let o = t(s.value);\n                s.value = o, s.raws && s.raws.value && (s.raws.value = (0, Hh.default)(s.raws.value));\n            });\n        }).processSync(e);\n    }\n    function Ja(e, t) {\n        if (!Zt(e)) return;\n        let n = e.slice(1, -1);\n        if (!!t(n)) return (0, ge.normalize)(n);\n    }\n    function Yh(e, t = {}, n) {\n        let r = t[e];\n        if (r !== void 0) return (0, Qa.default)(r);\n        if (Zt(e)) {\n            let i = Ja(e, n);\n            return i === void 0 ? void 0 : (0, Qa.default)(i);\n        }\n    }\n    function er(e, t = {}, { validate: n = ()=>true  } = {}) {\n        var r;\n        let i = (r = t.values) === null || r === void 0 ? void 0 : r[e];\n        return i !== void 0 ? i : t.supportsNegativeValues && e.startsWith(\"-\") ? Yh(e.slice(1), t.values, n) : Ja(e, n);\n    }\n    function Zt(e) {\n        return e.startsWith(\"[\") && e.endsWith(\"]\");\n    }\n    function Xh(e) {\n        let t = e.lastIndexOf(\"/\");\n        return t === -1 || t === e.length - 1 ? [\n            e\n        ] : [\n            e.slice(0, t),\n            e.slice(t + 1)\n        ];\n    }\n    function Gi(e) {\n        if (typeof e == \"string\" && e.includes(\"<alpha-value>\")) {\n            let t = e;\n            return ({ opacityValue: n = 1  })=>t.replace(\"<alpha-value>\", n);\n        }\n        return e;\n    }\n    function Za(e, t = {}, { tailwindConfig: n = {}  } = {}) {\n        var r;\n        if (((r = t.values) === null || r === void 0 ? void 0 : r[e]) !== void 0) {\n            var i;\n            return Gi((i = t.values) === null || i === void 0 ? void 0 : i[e]);\n        }\n        let [s, o] = Xh(e);\n        if (o !== void 0) {\n            var a, u, l, f;\n            let d = (f = (a = t.values) === null || a === void 0 ? void 0 : a[s]) !== null && f !== void 0 ? f : Zt(s) ? s.slice(1, -1) : void 0;\n            return d === void 0 ? void 0 : (d = Gi(d), Zt(o) ? (0, Xa.withAlphaValue)(d, o.slice(1, -1)) : ((u = n.theme) === null || u === void 0 || (l = u.opacity) === null || l === void 0 ? void 0 : l[o]) === void 0 ? void 0 : (0, Xa.withAlphaValue)(d, n.theme.opacity[o]));\n        }\n        return er(e, t, {\n            validate: ge.color\n        });\n    }\n    function eu(e, t = {}) {\n        var n;\n        return (n = t.values) === null || n === void 0 ? void 0 : n[e];\n    }\n    function Ee(e) {\n        return (t, n)=>er(t, n, {\n                validate: e\n            });\n    }\n    var tu = {\n        any: er,\n        color: Za,\n        url: Ee(ge.url),\n        image: Ee(ge.image),\n        length: Ee(ge.length),\n        percentage: Ee(ge.percentage),\n        position: Ee(ge.position),\n        lookup: eu,\n        \"generic-name\": Ee(ge.genericName),\n        \"family-name\": Ee(ge.familyName),\n        number: Ee(ge.number),\n        \"line-width\": Ee(ge.lineWidth),\n        \"absolute-size\": Ee(ge.absoluteSize),\n        \"relative-size\": Ee(ge.relativeSize),\n        shadow: Ee(ge.shadow)\n    }, Ka = Object.keys(tu);\n    function Qh(e, t) {\n        let n = e.indexOf(t);\n        return n === -1 ? [\n            void 0,\n            e\n        ] : [\n            e.slice(0, n),\n            e.slice(n + 1)\n        ];\n    }\n    function Kh(e, t, n, r) {\n        if (Zt(t)) {\n            let i = t.slice(1, -1), [s, o] = Qh(i, \":\");\n            if (!/^[\\w-_]+$/g.test(s)) o = i;\n            else if (s !== void 0 && !Ka.includes(s)) return [];\n            if (o.length > 0 && Ka.includes(s)) return [\n                er(`[${o}]`, n),\n                s\n            ];\n        }\n        for (let i of [].concat(e)){\n            let s = tu[i](t, n, {\n                tailwindConfig: r\n            });\n            if (s !== void 0) return [\n                s,\n                i\n            ];\n        }\n        return [];\n    }\n});\nvar nu = R((Vi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Vi, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Vi, \"default\", {\n        enumerable: true,\n        get: ()=>Jh\n    });\n    function Jh(e) {\n        return typeof e == \"function\" ? e({}) : e;\n    }\n});\nvar uu = R((Xi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Xi, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Xi, \"default\", {\n        enumerable: true,\n        get: ()=>b0\n    });\n    var Zh = tt(In()), e0 = tt(cs()), t0 = tt(ds()), r0 = tt(Cn()), n0 = tt(hs()), su = ms(), iu = gs(), i0 = bs(), o0 = tt(ys()), s0 = xs(), a0 = ru(), u0 = $i(), l0 = tt(nu());\n    function tt(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function dt(e) {\n        return typeof e == \"function\";\n    }\n    function tr(e) {\n        return typeof e == \"object\" && e !== null;\n    }\n    function rr(e, ...t) {\n        let n = t.pop();\n        for (let r of t)for(let i in r){\n            let s = n(e[i], r[i]);\n            s === void 0 ? tr(e[i]) && tr(r[i]) ? e[i] = rr(e[i], r[i], n) : e[i] = r[i] : e[i] = s;\n        }\n        return e;\n    }\n    var Yi = {\n        colors: n0.default,\n        negative (e) {\n            return Object.keys(e).filter((t)=>e[t] !== \"0\").reduce((t, n)=>{\n                let r = (0, Zh.default)(e[n]);\n                return r !== void 0 && (t[`-${n}`] = r), t;\n            }, {});\n        },\n        breakpoints (e) {\n            return Object.keys(e).filter((t)=>typeof e[t] == \"string\").reduce((t, n)=>({\n                    ...t,\n                    [`screen-${n}`]: e[n]\n                }), {});\n        }\n    };\n    function f0(e, ...t) {\n        return dt(e) ? e(...t) : e;\n    }\n    function c0(e) {\n        return e.reduce((t, { extend: n  })=>rr(t, n, (r, i)=>r === void 0 ? [\n                    i\n                ] : Array.isArray(r) ? [\n                    i,\n                    ...r\n                ] : [\n                    i,\n                    r\n                ]), {});\n    }\n    function d0(e) {\n        return {\n            ...e.reduce((t, n)=>(0, su.defaults)(t, n), {}),\n            extend: c0(e)\n        };\n    }\n    function ou(e, t) {\n        if (Array.isArray(e) && tr(e[0])) return e.concat(t);\n        if (Array.isArray(t) && tr(t[0]) && tr(e)) return [\n            e,\n            ...t\n        ];\n        if (Array.isArray(t)) return t;\n    }\n    function p0({ extend: e , ...t }) {\n        return rr(t, e, (n, r)=>!dt(n) && !r.some(dt) ? rr({}, n, ...r, ou) : (i, s)=>rr({}, ...[\n                    n,\n                    ...r\n                ].map((o)=>f0(o, i, s)), ou));\n    }\n    function* h0(e) {\n        let t = (0, iu.toPath)(e);\n        if (t.length === 0 || (yield t, Array.isArray(e))) return;\n        let n = /^(.*?)\\s*\\/\\s*([^/]+)$/, r = e.match(n);\n        if (r !== null) {\n            let [, i, s] = r, o = (0, iu.toPath)(i);\n            o.alpha = s, yield o;\n        }\n    }\n    function m0(e) {\n        let t = (n, r)=>{\n            for (let i of h0(n)){\n                let s = 0, o = e;\n                for(; o != null && s < i.length;)o = o[i[s++]], o = dt(o) && (i.alpha === void 0 || s <= i.length - 1) ? o(t, Yi) : o;\n                if (o !== void 0) {\n                    if (i.alpha !== void 0) {\n                        let a = (0, a0.parseColorFormat)(o);\n                        return (0, u0.withAlphaValue)(a, i.alpha, (0, l0.default)(a));\n                    }\n                    return (0, o0.default)(o) ? (0, s0.cloneDeep)(o) : o;\n                }\n            }\n            return r;\n        };\n        return Object.assign(t, {\n            theme: t,\n            ...Yi\n        }), Object.keys(e).reduce((n, r)=>(n[r] = dt(e[r]) ? e[r](t, Yi) : e[r], n), {});\n    }\n    function au(e) {\n        let t = [];\n        return e.forEach((n)=>{\n            t = [\n                ...t,\n                n\n            ];\n            var r;\n            let i = (r = n == null ? void 0 : n.plugins) !== null && r !== void 0 ? r : [];\n            i.length !== 0 && i.forEach((s)=>{\n                s.__isOptionsFunction && (s = s());\n                var o;\n                t = [\n                    ...t,\n                    ...au([\n                        (o = s == null ? void 0 : s.config) !== null && o !== void 0 ? o : {}\n                    ])\n                ];\n            });\n        }), t;\n    }\n    function g0(e) {\n        return [\n            ...e\n        ].reduceRight((n, r)=>dt(r) ? r({\n                corePlugins: n\n            }) : (0, t0.default)(r, n), e0.default);\n    }\n    function v0(e) {\n        return [\n            ...e\n        ].reduceRight((n, r)=>[\n                ...n,\n                ...r\n            ], []);\n    }\n    function b0(e) {\n        let t = [\n            ...au(e),\n            {\n                prefix: \"\",\n                important: false,\n                separator: \":\",\n                variantOrder: r0.default.variantOrder\n            }\n        ];\n        var n, r;\n        return (0, i0.normalizeConfig)((0, su.defaults)({\n            theme: m0(p0(d0(t.map((i)=>(n = i == null ? void 0 : i.theme) !== null && n !== void 0 ? n : {})))),\n            corePlugins: g0(t.map((i)=>i.corePlugins)),\n            plugins: v0(e.map((i)=>(r = i == null ? void 0 : i.plugins) !== null && r !== void 0 ? r : []))\n        }, ...t));\n    }\n});\nvar lu = {};\nnn(lu, {\n    default: ()=>y0\n});\nvar y0;\nvar fu = vr(()=>{\n    c();\n    y0 = {\n        yellow: (e)=>e\n    };\n});\nvar hu = R((Qi)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Qi, \"__esModule\", {\n        value: true\n    });\n    function x0(e, t) {\n        for(var n in t)Object.defineProperty(e, n, {\n            enumerable: true,\n            get: t[n]\n        });\n    }\n    x0(Qi, {\n        flagEnabled: ()=>S0,\n        issueFlagNotices: ()=>k0,\n        default: ()=>T0\n    });\n    var w0 = pu((fu(), br(lu))), _0 = pu((Rr(), br(Ir)));\n    function pu(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    var cu = {\n        optimizeUniversalDefaults: false\n    }, nr = {\n        future: [\n            \"hoverOnlyWhenSupported\",\n            \"respectDefaultRingColorOpacity\"\n        ],\n        experimental: [\n            \"optimizeUniversalDefaults\",\n            \"matchVariant\"\n        ]\n    };\n    function S0(e, t) {\n        if (nr.future.includes(t)) {\n            var n, r, i;\n            return e.future === \"all\" || ((i = (r = e == null || (n = e.future) === null || n === void 0 ? void 0 : n[t]) !== null && r !== void 0 ? r : cu[t]) !== null && i !== void 0 ? i : false);\n        }\n        if (nr.experimental.includes(t)) {\n            var s, o, a;\n            return e.experimental === \"all\" || ((a = (o = e == null || (s = e.experimental) === null || s === void 0 ? void 0 : s[t]) !== null && o !== void 0 ? o : cu[t]) !== null && a !== void 0 ? a : false);\n        }\n        return false;\n    }\n    function du(e) {\n        if (e.experimental === \"all\") return nr.experimental;\n        var t;\n        return Object.keys((t = e == null ? void 0 : e.experimental) !== null && t !== void 0 ? t : {}).filter((n)=>nr.experimental.includes(n) && e.experimental[n]);\n    }\n    function k0(e) {\n        if (process.env.JEST_WORKER_ID === void 0 && du(e).length > 0) {\n            let t = du(e).map((n)=>w0.default.yellow(n)).join(\", \");\n            _0.default.warn(\"experimental-flags-enabled\", [\n                `You have enabled experimental features: ${t}`,\n                \"Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time.\"\n            ]);\n        }\n    }\n    var T0 = nr;\n});\nvar gu = R((Ki)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Ki, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Ki, \"default\", {\n        enumerable: true,\n        get: ()=>mu\n    });\n    var O0 = P0(Cn()), E0 = hu();\n    function P0(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function mu(e) {\n        var t;\n        let n = ((t = e == null ? void 0 : e.presets) !== null && t !== void 0 ? t : [\n            O0.default\n        ]).slice().reverse().flatMap((s)=>mu(typeof s == \"function\" ? s() : s)), r = {\n            respectDefaultRingColorOpacity: {\n                theme: {\n                    ringColor: {\n                        DEFAULT: \"#3b82f67f\"\n                    }\n                }\n            }\n        }, i = Object.keys(r).filter((s)=>(0, E0.flagEnabled)(e, s)).map((s)=>r[s]);\n        return [\n            e,\n            ...i,\n            ...n\n        ];\n    }\n});\nvar bu = R((Ji)=>{\n    \"use strict\";\n    c();\n    Object.defineProperty(Ji, \"__esModule\", {\n        value: true\n    });\n    Object.defineProperty(Ji, \"default\", {\n        enumerable: true,\n        get: ()=>R0\n    });\n    var A0 = vu(uu()), I0 = vu(gu());\n    function vu(e) {\n        return e && e.__esModule ? e : {\n            default: e\n        };\n    }\n    function R0(...e) {\n        let [, ...t] = (0, I0.default)(e[0]);\n        return (0, A0.default)([\n            ...e,\n            ...t\n        ]);\n    }\n});\nvar xu = R((av, yu)=>{\n    c();\n    var Zi = bu();\n    yu.exports = (Zi.__esModule ? Zi : {\n        default: Zi\n    }).default;\n});\nc();\nc();\nc();\nvar at;\nfunction nl(e) {\n    at = e;\n}\nvar vt = null;\nasync function Fe() {\n    return at || (vt ? (await vt, at) : (vt = Promise.resolve().then(()=>(Ao(), Po)).then((e)=>e.getYogaModule()).then((e)=>at = e), await vt, vt = null, at));\n}\nc();\nc();\nc();\nvar bt = (e, t)=>()=>(t || e((t = {\n            exports: {}\n        }).exports, t), t.exports);\nvar il = bt((e, t)=>{\n    t.exports = [\n        \"em\",\n        \"ex\",\n        \"ch\",\n        \"rem\",\n        \"vh\",\n        \"vw\",\n        \"vmin\",\n        \"vmax\",\n        \"px\",\n        \"mm\",\n        \"cm\",\n        \"in\",\n        \"pt\",\n        \"pc\",\n        \"mozmm\"\n    ];\n});\nvar ol = bt((e, t)=>{\n    t.exports = [\n        \"deg\",\n        \"grad\",\n        \"rad\",\n        \"turn\"\n    ];\n});\nvar sl = bt((e, t)=>{\n    t.exports = [\n        \"dpi\",\n        \"dpcm\",\n        \"dppx\"\n    ];\n});\nvar al = bt((e, t)=>{\n    t.exports = [\n        \"Hz\",\n        \"kHz\"\n    ];\n});\nvar ul = bt((e, t)=>{\n    t.exports = [\n        \"s\",\n        \"ms\"\n    ];\n});\nvar ll = il();\nvar Io = ol();\nvar Ro = sl();\nvar Lo = al();\nvar Co = ul();\nfunction sn(e) {\n    if (/\\.\\D?$/.test(e)) throw new Error(\"The dot should be followed by a number\");\n    if (/^[+-]{2}/.test(e)) throw new Error(\"Only one leading +/- is allowed\");\n    if (fl2(e) > 1) throw new Error(\"Only one dot is allowed\");\n    if (/%$/.test(e)) {\n        this.type = \"percentage\", this.value = on(e), this.unit = \"%\";\n        return;\n    }\n    var t = dl(e);\n    if (!t) {\n        this.type = \"number\", this.value = on(e);\n        return;\n    }\n    this.type = hl(t), this.value = on(e.substr(0, e.length - t.length)), this.unit = t;\n}\nsn.prototype.valueOf = function() {\n    return this.value;\n};\nsn.prototype.toString = function() {\n    return this.value + (this.unit || \"\");\n};\nfunction ze(e) {\n    return new sn(e);\n}\nfunction fl2(e) {\n    var t = e.match(/\\./g);\n    return t ? t.length : 0;\n}\nfunction on(e) {\n    var t = parseFloat(e);\n    if (isNaN(t)) throw new Error(\"Invalid number: \" + e);\n    return t;\n}\nvar cl = [].concat(Io, Lo, ll, Ro, Co);\nfunction dl(e) {\n    var t = e.match(/\\D+$/), n = t && t[0];\n    if (n && cl.indexOf(n) === -1) throw new Error(\"Invalid unit: \" + n);\n    return n;\n}\nvar pl = Object.assign(yr(Io, \"angle\"), yr(Lo, \"frequency\"), yr(Ro, \"resolution\"), yr(Co, \"time\"));\nfunction yr(e, t) {\n    return Object.fromEntries(e.map((n)=>[\n            n,\n            t\n        ]));\n}\nfunction hl(e) {\n    return pl[e] || \"length\";\n}\nfunction fn(e) {\n    let t = typeof e;\n    return !(t === \"number\" || t === \"bigint\" || t === \"string\" || t === \"boolean\");\n}\nfunction Do(e) {\n    return /^class\\s/.test(e.toString());\n}\nfunction Fo(e) {\n    return \"dangerouslySetInnerHTML\" in e;\n}\nfunction No(e) {\n    let t = typeof e > \"u\" ? [] : [].concat(e).flat(1 / 0), n = [];\n    for(let r = 0; r < t.length; r++){\n        let i = t[r];\n        typeof i > \"u\" || typeof i == \"boolean\" || i === null || (typeof i == \"number\" && (i = String(i)), typeof i == \"string\" && n.length && typeof n[n.length - 1] == \"string\" ? n[n.length - 1] += i : n.push(i));\n    }\n    return n;\n}\nfunction _e(e, t, n, r, i = false) {\n    if (typeof e == \"number\") return e;\n    try {\n        if (e = e.trim(), /[ /\\(,]/.test(e)) return;\n        if (e === String(+e)) return +e;\n        let s = new ze(e);\n        if (s.type === \"length\") switch(s.unit){\n            case \"em\":\n                return s.value * t;\n            case \"rem\":\n                return s.value * 16;\n            case \"vw\":\n                return ~~(s.value * r._viewportWidth / 100);\n            case \"vh\":\n                return ~~(s.value * r._viewportHeight / 100);\n            default:\n                return s.value;\n        }\n        else if (s.type === \"angle\") switch(s.unit){\n            case \"deg\":\n                return s.value;\n            case \"rad\":\n                return s.value * 180 / Math.PI;\n            default:\n                return s.value;\n        }\n        else if (s.type === \"percentage\" && i) return s.value / 100 * n;\n    } catch  {}\n}\nfunction yt(e, t) {\n    return [\n        e[0] * t[0] + e[2] * t[1],\n        e[1] * t[0] + e[3] * t[1],\n        e[0] * t[2] + e[2] * t[3],\n        e[1] * t[2] + e[3] * t[3],\n        e[0] * t[4] + e[2] * t[5] + e[4],\n        e[1] * t[4] + e[3] * t[5] + e[5]\n    ];\n}\nfunction he(e, t, n, r) {\n    let i = t[e];\n    if (typeof i > \"u\") {\n        if (r && typeof e < \"u\") throw new Error(`Invalid value for CSS property \"${r}\". Allowed values: ${Object.keys(t).map((s)=>`\"${s}\"`).join(\" | \")}. Received: \"${e}\".`);\n        i = n;\n    }\n    return i;\n}\nvar an;\nvar un;\nvar Mo = [\n    32,\n    160,\n    4961,\n    65792,\n    65793,\n    4153,\n    4241,\n    10\n].map((e)=>String.fromCodePoint(e));\nfunction pe(e, t, n) {\n    if (!an || !un) {\n        if (!(typeof Intl < \"u\" && \"Segmenter\" in Intl)) throw new Error(\"Intl.Segmenter does not exist, please use import a polyfill.\");\n        an = new Intl.Segmenter(n, {\n            granularity: \"word\"\n        }), un = new Intl.Segmenter(n, {\n            granularity: \"grapheme\"\n        });\n    }\n    return t === \"word\" ? [\n        ...an.segment(e)\n    ].map((r)=>r.segment) : [\n        ...un.segment(e)\n    ].map((r)=>r.segment);\n}\nfunction I(e, t, n) {\n    let r = \"\";\n    for (let [i, s] of Object.entries(t))typeof s < \"u\" && (r += ` ${i}=\"${s}\"`);\n    return n ? `<${e}${r}>${n}</${e}>` : `<${e}${r}/>`;\n}\nfunction $o(e = 20) {\n    let t = /* @__PURE__ */ new Map();\n    function n(i, s) {\n        if (t.size >= e) {\n            let o = t.keys().next().value;\n            t.delete(o);\n        }\n        t.set(i, s);\n    }\n    function r(i) {\n        if (!t.has(i)) return;\n        let o = t.get(i);\n        return t.delete(i), t.set(i, o), o;\n    }\n    return {\n        set: n,\n        get: r\n    };\n}\nvar Wo = {\n    accentHeight: \"accent-height\",\n    alignmentBaseline: \"alignment-baseline\",\n    arabicForm: \"arabic-form\",\n    baselineShift: \"baseline-shift\",\n    capHeight: \"cap-height\",\n    clipPath: \"clip-path\",\n    clipRule: \"clip-rule\",\n    colorInterpolation: \"color-interpolation\",\n    colorInterpolationFilters: \"color-interpolation-filters\",\n    colorProfile: \"color-profile\",\n    colorRendering: \"color-rendering\",\n    dominantBaseline: \"dominant-baseline\",\n    enableBackground: \"enable-background\",\n    fillOpacity: \"fill-opacity\",\n    fillRule: \"fill-rule\",\n    floodColor: \"flood-color\",\n    floodOpacity: \"flood-opacity\",\n    fontFamily: \"font-family\",\n    fontSize: \"font-size\",\n    fontSizeAdjust: \"font-size-adjust\",\n    fontStretch: \"font-stretch\",\n    fontStyle: \"font-style\",\n    fontVariant: \"font-variant\",\n    fontWeight: \"font-weight\",\n    glyphName: \"glyph-name\",\n    glyphOrientationHorizontal: \"glyph-orientation-horizontal\",\n    glyphOrientationVertical: \"glyph-orientation-vertical\",\n    horizAdvX: \"horiz-adv-x\",\n    horizOriginX: \"horiz-origin-x\",\n    imageRendering: \"image-rendering\",\n    letterSpacing: \"letter-spacing\",\n    lightingColor: \"lighting-color\",\n    markerEnd: \"marker-end\",\n    markerMid: \"marker-mid\",\n    markerStart: \"marker-start\",\n    overlinePosition: \"overline-position\",\n    overlineThickness: \"overline-thickness\",\n    paintOrder: \"paint-order\",\n    panose1: \"panose-1\",\n    pointerEvents: \"pointer-events\",\n    renderingIntent: \"rendering-intent\",\n    shapeRendering: \"shape-rendering\",\n    stopColor: \"stop-color\",\n    stopOpacity: \"stop-opacity\",\n    strikethroughPosition: \"strikethrough-position\",\n    strikethroughThickness: \"strikethrough-thickness\",\n    strokeDasharray: \"stroke-dasharray\",\n    strokeDashoffset: \"stroke-dashoffset\",\n    strokeLinecap: \"stroke-linecap\",\n    strokeLinejoin: \"stroke-linejoin\",\n    strokeMiterlimit: \"stroke-miterlimit\",\n    strokeOpacity: \"stroke-opacity\",\n    strokeWidth: \"stroke-width\",\n    textAnchor: \"text-anchor\",\n    textDecoration: \"text-decoration\",\n    textRendering: \"text-rendering\",\n    underlinePosition: \"underline-position\",\n    underlineThickness: \"underline-thickness\",\n    unicodeBidi: \"unicode-bidi\",\n    unicodeRange: \"unicode-range\",\n    unitsPerEm: \"units-per-em\",\n    vAlphabetic: \"v-alphabetic\",\n    vHanging: \"v-hanging\",\n    vIdeographic: \"v-ideographic\",\n    vMathematical: \"v-mathematical\",\n    vectorEffect: \"vector-effect\",\n    vertAdvY: \"vert-adv-y\",\n    vertOriginX: \"vert-origin-x\",\n    vertOriginY: \"vert-origin-y\",\n    wordSpacing: \"word-spacing\",\n    writingMode: \"writing-mode\",\n    xHeight: \"x-height\",\n    xlinkActuate: \"xlink:actuate\",\n    xlinkArcrole: \"xlink:arcrole\",\n    xlinkHref: \"xlink:href\",\n    xlinkRole: \"xlink:role\",\n    xlinkShow: \"xlink:show\",\n    xlinkTitle: \"xlink:title\",\n    xlinkType: \"xlink:type\",\n    xmlBase: \"xml:base\",\n    xmlLang: \"xml:lang\",\n    xmlSpace: \"xml:space\",\n    xmlnsXlink: \"xmlns:xlink\"\n};\nvar gl = /[\\r\\n%#()<>?[\\\\\\]^`{|}\"']/g;\nfunction ln(e, t) {\n    if (!e) return \"\";\n    if (Array.isArray(e)) return e.map((a)=>ln(a, t)).join(\"\");\n    if (typeof e != \"object\") return String(e);\n    let n = e.type;\n    if (n === \"text\") throw new Error(\"<text> nodes are not currently supported, please convert them to <path>\");\n    let { children: r , style: i , ...s } = e.props || {}, o = (i == null ? void 0 : i.color) || t;\n    return `<${n}${Object.entries(s).map(([a, u])=>(typeof u == \"string\" && u.toLowerCase() === \"currentcolor\" && (u = o), ` ${Wo[a] || a}=\"${u}\"`)).join(\"\")}>${ln(r, o)}</${n}>`;\n}\nfunction xt(e) {\n    return e ? e.split(/[, ]/).filter(Boolean).map(Number) : null;\n}\nfunction qo(e, t) {\n    let { viewBox: n , viewbox: r , width: i , height: s , className: o , style: a , children: u , ...l } = e.props || {};\n    n || (n = r), l.xmlns = \"http://www.w3.org/2000/svg\";\n    let f = (a == null ? void 0 : a.color) || t, d = xt(n), g = d ? d[3] / d[2] : null;\n    return i = i || g && s ? s / g : null, s = s || g && i ? i * g : null, l.width = i, l.height = s, n && (l.viewBox = n), `data:image/svg+xml;utf8,${`<svg ${Object.entries(l).map(([h, p])=>(typeof p == \"string\" && p.toLowerCase() === \"currentcolor\" && (p = f), ` ${Wo[h] || h}=\"${p}\"`)).join(\"\")}>${ln(u, f)}</svg>`.replace(gl, encodeURIComponent)}`;\n}\nfunction Bo(e) {\n    return typeof e == \"string\";\n}\nfunction Uo(e, t) {\n    if (t === \"break-all\") return {\n        words: pe(e, \"grapheme\"),\n        requiredBreaks: []\n    };\n    if (t === \"keep-all\") return {\n        words: pe(e, \"word\"),\n        requiredBreaks: []\n    };\n    let n = new $557adaaeb0c7885f$exports(e), r = 0, i = n.nextBreak(), s = [], o = [\n        false\n    ];\n    for(; i;){\n        let a = e.slice(r, i.position);\n        s.push(a), i.required ? o.push(true) : o.push(false), r = i.position, i = n.nextBreak();\n    }\n    return {\n        words: s,\n        requiredBreaks: o\n    };\n}\nc();\nc();\nvar Se = \"flex\";\nvar zo = {\n    p: {\n        display: Se,\n        marginTop: \"1em\",\n        marginBottom: \"1em\"\n    },\n    div: {\n        display: Se\n    },\n    blockquote: {\n        display: Se,\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        marginLeft: 40,\n        marginRight: 40\n    },\n    center: {\n        display: Se,\n        textAlign: \"center\"\n    },\n    hr: {\n        display: Se,\n        marginTop: \"0.5em\",\n        marginBottom: \"0.5em\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        borderWidth: 1,\n        borderStyle: \"solid\"\n    },\n    h1: {\n        display: Se,\n        fontSize: \"2em\",\n        marginTop: \"0.67em\",\n        marginBottom: \"0.67em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h2: {\n        display: Se,\n        fontSize: \"1.5em\",\n        marginTop: \"0.83em\",\n        marginBottom: \"0.83em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h3: {\n        display: Se,\n        fontSize: \"1.17em\",\n        marginTop: \"1em\",\n        marginBottom: \"1em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h4: {\n        display: Se,\n        marginTop: \"1.33em\",\n        marginBottom: \"1.33em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h5: {\n        display: Se,\n        fontSize: \"0.83em\",\n        marginTop: \"1.67em\",\n        marginBottom: \"1.67em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    h6: {\n        display: Se,\n        fontSize: \"0.67em\",\n        marginTop: \"2.33em\",\n        marginBottom: \"2.33em\",\n        marginLeft: 0,\n        marginRight: 0,\n        fontWeight: \"bold\"\n    },\n    u: {\n        textDecoration: \"underline\"\n    },\n    strong: {\n        fontWeight: \"bold\"\n    },\n    b: {\n        fontWeight: \"bold\"\n    },\n    i: {\n        fontStyle: \"italic\"\n    },\n    em: {\n        fontStyle: \"italic\"\n    },\n    code: {\n        fontFamily: \"monospace\"\n    },\n    kbd: {\n        fontFamily: \"monospace\"\n    },\n    pre: {\n        display: Se,\n        fontFamily: \"monospace\",\n        whiteSpace: \"pre\",\n        marginTop: \"1em\",\n        marginBottom: \"1em\"\n    },\n    mark: {\n        backgroundColor: \"yellow\",\n        color: \"black\"\n    },\n    big: {\n        fontSize: \"larger\"\n    },\n    small: {\n        fontSize: \"smaller\"\n    },\n    s: {\n        textDecoration: \"line-through\"\n    }\n};\nc();\nvar vl = /* @__PURE__ */ new Set([\n    \"color\",\n    \"font\",\n    \"fontFamily\",\n    \"fontSize\",\n    \"fontStyle\",\n    \"fontWeight\",\n    \"letterSpacing\",\n    \"lineHeight\",\n    \"textAlign\",\n    \"textTransform\",\n    \"textShadowOffset\",\n    \"textShadowColor\",\n    \"textShadowRadius\",\n    \"textDecorationLine\",\n    \"textDecorationStyle\",\n    \"textDecorationColor\",\n    \"whiteSpace\",\n    \"transform\",\n    \"wordBreak\",\n    \"opacity\",\n    \"filter\",\n    \"_viewportWidth\",\n    \"_viewportHeight\",\n    \"_inheritedClipPathId\",\n    \"_inheritedMaskId\",\n    \"_inheritedBackgroundClipTextPath\"\n]);\nfunction cn(e) {\n    let t = {};\n    for(let n in e)vl.has(n) && (t[n] = e[n]);\n    return t;\n}\nc();\nc();\nfunction yl(e, t) {\n    try {\n        let n = new ze(e);\n        switch(n.unit){\n            case \"px\":\n                return {\n                    absolute: n.value\n                };\n            case \"em\":\n                return {\n                    absolute: n.value * t\n                };\n            case \"rem\":\n                return {\n                    absolute: n.value * 16\n                };\n            case \"%\":\n                return {\n                    relative: n.value\n                };\n            default:\n                return {};\n        }\n    } catch  {\n        return {};\n    }\n}\nfunction dn(e, t, n) {\n    switch(e){\n        case \"top\":\n            return {\n                yRelative: 0\n            };\n        case \"left\":\n            return {\n                xRelative: 0\n            };\n        case \"right\":\n            return {\n                xRelative: 100\n            };\n        case \"bottom\":\n            return {\n                yRelative: 100\n            };\n        case \"center\":\n            return {};\n        default:\n            {\n                let r = yl(e, t);\n                return r.absolute ? {\n                    [n ? \"xAbsolute\" : \"yAbsolute\"]: r.absolute\n                } : r.relative ? {\n                    [n ? \"xRelative\" : \"yRelative\"]: r.relative\n                } : {};\n            }\n    }\n}\nfunction pn(e, t) {\n    if (typeof e == \"number\") return {\n        xAbsolute: e\n    };\n    let n;\n    try {\n        n = (0, import_postcss_value_parser.default)(e).nodes.filter((r)=>r.type === \"word\").map((r)=>r.value);\n    } catch  {\n        return {};\n    }\n    return n.length === 1 ? dn(n[0], t, true) : n.length === 2 ? ((n[0] === \"top\" || n[0] === \"bottom\" || n[1] === \"left\" || n[1] === \"right\") && n.reverse(), {\n        ...dn(n[0], t, true),\n        ...dn(n[1], t, false)\n    }) : {};\n}\nvar Sl = /* @__PURE__ */ new Set([\n    \"flex\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexBasis\",\n    \"fontWeight\",\n    \"lineHeight\",\n    \"opacity\",\n    \"scale\",\n    \"scaleX\",\n    \"scaleY\"\n]);\nvar kl = /* @__PURE__ */ new Set([\n    \"lineHeight\"\n]);\nfunction Tl(e, t, n, r) {\n    return e === \"textDecoration\" && !n.includes(t.textDecorationColor) && (t.textDecorationColor = r), t;\n}\nfunction wt(e, t) {\n    return typeof t == \"number\" ? Sl.has(e) ? kl.has(e) ? t : String(t) : t + \"px\" : t;\n}\nfunction Ol(e, t, n) {\n    if (e === \"lineHeight\") return {\n        lineHeight: wt(e, t)\n    };\n    if (e === \"fontFamily\") return {\n        fontFamily: t.split(\",\").map((r)=>r.trim().replace(/(^['\"])|(['\"]$)/g, \"\").toLocaleLowerCase())\n    };\n    if (e === \"borderRadius\") {\n        if (typeof t != \"string\" || !t.includes(\"/\")) return;\n        let [r, i] = t.split(\"/\"), s = (0, import_css_to_react_native.getStylesForProperty)(e, r, true), o = (0, import_css_to_react_native.getStylesForProperty)(e, i, true);\n        for(let a in s)o[a] = wt(e, s[a]) + \" \" + wt(e, o[a]);\n        return o;\n    }\n    if (/^border(Top|Right|Bottom|Left)?$/.test(e)) {\n        let r = (0, import_css_to_react_native.getStylesForProperty)(\"border\", t, true);\n        r.borderWidth === 1 && !String(t).includes(\"1px\") && (r.borderWidth = 3), r.borderColor === \"black\" && !String(t).includes(\"black\") && (r.borderColor = n);\n        let i = {\n            Width: wt(e + \"Width\", r.borderWidth),\n            Style: he(r.borderStyle, {\n                solid: \"solid\",\n                dashed: \"dashed\"\n            }, \"solid\", e + \"Style\"),\n            Color: r.borderColor\n        }, s = {};\n        for (let o of e === \"border\" ? [\n            \"Top\",\n            \"Right\",\n            \"Bottom\",\n            \"Left\"\n        ] : [\n            e.slice(6)\n        ])for(let a in i)s[\"border\" + o + a] = i[a];\n        return s;\n    }\n    if (e === \"boxShadow\") {\n        if (!t) throw new Error('Invalid `boxShadow` value: \"' + t + '\".');\n        return {\n            [e]: typeof t == \"string\" ? (0, import_css_box_shadow.parse)(t) : t\n        };\n    }\n    if (e === \"transform\") {\n        if (typeof t != \"string\") throw new Error(\"Invalid `transform` value.\");\n        let r = {}, i = t.replace(/(-?[\\d.]+%)/g, (o, a)=>{\n            let u = ~~(Math.random() * 1e9);\n            return r[u] = a, u + \"px\";\n        }), s = (0, import_css_to_react_native.getStylesForProperty)(\"transform\", i, true);\n        for (let o of s.transform)for(let a in o)r[o[a]] && (o[a] = r[o[a]]);\n        return s;\n    }\n    if (e === \"background\") return t = t.toString().trim(), /^(linear-gradient|radial-gradient|url)\\(/.test(t) ? (0, import_css_to_react_native.getStylesForProperty)(\"backgroundImage\", t, true) : (0, import_css_to_react_native.getStylesForProperty)(\"background\", t, true);\n}\nfunction Go(e) {\n    return e === \"transform\" ? \" Only absolute lengths such as `10px` are supported.\" : \"\";\n}\nvar jo = /rgb\\((\\d+)\\s+(\\d+)\\s+(\\d+)\\s*\\/\\s*([\\.\\d]+)\\)/;\nfunction Ho(e) {\n    if (typeof e == \"string\" && jo.test(e.trim())) return e.trim().replace(jo, (t, n, r, i, s)=>`rgba(${n}, ${r}, ${i}, ${s})`);\n    if (typeof e == \"object\" && e !== null) {\n        for(let t in e)e[t] = Ho(e[t]);\n        return e;\n    }\n    return e;\n}\nfunction xr(e, t) {\n    let n = {};\n    if (e) {\n        let i = El(e.color, t.color);\n        n.color = i;\n        for(let s in e){\n            if (s.startsWith(\"_\")) {\n                n[s] = e[s];\n                continue;\n            }\n            if (s === \"color\") continue;\n            let o = (0, import_css_to_react_native.getPropertyName)(s), a = Al(e[s], i);\n            try {\n                let u = Ol(o, a, i) || Tl(o, (0, import_css_to_react_native.getStylesForProperty)(o, wt(o, a), true), a, i);\n                Object.assign(n, u);\n            } catch (u) {\n                throw new Error(u.message + (u.message.includes(a) ? `\n  ` + Go(o) : `\n  in CSS rule \\`${o}: ${a}\\`.${Go(o)}`));\n            }\n        }\n    }\n    if (n.backgroundImage) {\n        let { backgrounds: i  } = (0, import_css_background_parser.parseElementStyle)(n);\n        n.backgroundImage = i;\n    }\n    let r = typeof n.fontSize == \"number\" ? n.fontSize : t.fontSize;\n    if (typeof r == \"string\") try {\n        let i = new ze(r);\n        switch(i.unit){\n            case \"em\":\n                r = i.value * t.fontSize;\n                break;\n            case \"rem\":\n                r = i.value * 16;\n                break;\n        }\n    } catch  {\n        r = 16;\n    }\n    typeof n.fontSize < \"u\" && (n.fontSize = r), n.transformOrigin && (n.transformOrigin = pn(n.transformOrigin, r));\n    for(let i in n){\n        let s = n[i];\n        if (i === \"lineHeight\") typeof s == \"string\" && (s = n[i] = _e(s, r, r, t, true) / r);\n        else {\n            if (typeof s == \"string\") {\n                let o = _e(s, r, r, t);\n                typeof o < \"u\" && (n[i] = o), s = n[i];\n            }\n            if (typeof s == \"string\" || typeof s == \"object\") {\n                let o = Ho(s);\n                o && (n[i] = o), s = n[i];\n            }\n        }\n        if (i === \"opacity\" && (s = n[i] = s * t.opacity), i === \"transform\") {\n            let o = s;\n            for (let a of o){\n                let u = Object.keys(a)[0], l = a[u], f = typeof l == \"string\" ? _e(l, r, r, t) ?? l : l;\n                a[u] = f;\n            }\n        }\n    }\n    return n;\n}\nfunction El(e, t) {\n    return e && e.toLowerCase() !== \"currentcolor\" ? e : t;\n}\nfunction Pl(e, t) {\n    return e.replace(/currentcolor/gi, t);\n}\nfunction Al(e, t) {\n    return Bo(e) && (e = Pl(e, t)), e;\n}\nc();\nvar Il = \"image/avif\";\nvar Rl = \"image/webp\";\nvar wr = \"image/png\";\nvar _r = \"image/jpeg\";\nvar Sr = \"image/gif\";\nvar mn = \"image/svg+xml\";\nfunction Qo(e) {\n    let t = new DataView(e), n = 4, r = t.byteLength;\n    for(; n < r;){\n        let i = t.getUint16(n, false);\n        if (i > r) throw new TypeError(\"Invalid JPEG\");\n        let s = t.getUint8(i + 1 + n);\n        if (s === 192 || s === 193 || s === 194) return [\n            t.getUint16(i + 7 + n, false),\n            t.getUint16(i + 5 + n, false)\n        ];\n        n += i + 2;\n    }\n    throw new TypeError(\"Invalid JPEG\");\n}\nfunction Ko(e) {\n    let t = new Uint8Array(e.slice(6, 10));\n    return [\n        t[0] | t[1] << 8,\n        t[2] | t[3] << 8\n    ];\n}\nfunction Jo(e) {\n    let t = new DataView(e);\n    return [\n        t.getUint16(18, false),\n        t.getUint16(22, false)\n    ];\n}\nvar Vo = $o(100);\nvar hn = /* @__PURE__ */ new Map();\nvar Ll = [\n    wr,\n    _r,\n    Sr,\n    mn\n];\nfunction Cl(e) {\n    let t = \"\", n = new Uint8Array(e);\n    for(let r = 0; r < n.byteLength; r++)t += String.fromCharCode(n[r]);\n    return btoa(t);\n}\nfunction Dl(e) {\n    let t = atob(e), n = t.length, r = new Uint8Array(n);\n    for(let i = 0; i < n; i++)r[i] = t.charCodeAt(i);\n    return r.buffer;\n}\nfunction Yo(e, t) {\n    let n = t.match(/<svg[^>]*>/)[0], r = n.match(/viewBox=['\"](.+)['\"]/), i = r ? xt(r[1]) : null, s = n.match(/width=['\"](\\d*\\.\\d+|\\d+)['\"]/), o = n.match(/height=['\"](\\d*\\.\\d+|\\d+)['\"]/);\n    if (!i && (!s || !o)) throw new Error(`Failed to parse SVG from ${e}: missing \"viewBox\"`);\n    let a = i ? [\n        i[2],\n        i[3]\n    ] : [\n        +s[1],\n        +o[1]\n    ], u = a[0] / a[1];\n    return s && o ? [\n        +s[1],\n        +o[1]\n    ] : s ? [\n        +s[1],\n        +s[1] / u\n    ] : o ? [\n        +o[1] * u,\n        +o[1]\n    ] : [\n        a[0],\n        a[1]\n    ];\n}\nfunction Xo(e) {\n    let t, n = Fl(new Uint8Array(e));\n    switch(n){\n        case wr:\n            t = Jo(e);\n            break;\n        case Sr:\n            t = Ko(e);\n            break;\n        case _r:\n            t = Qo(e);\n            break;\n    }\n    if (!Ll.includes(n)) throw new Error(`Unsupported image type: ${n || \"unknown\"}`);\n    return [\n        `data:${n};base64,${Cl(e)}`,\n        t\n    ];\n}\nasync function kr(e) {\n    if (!e) throw new Error(\"Image source is not provided.\");\n    if (typeof e == \"object\") {\n        let [i, s] = Xo(e);\n        return [\n            i,\n            ...s\n        ];\n    }\n    if ((e.startsWith('\"') && e.endsWith('\"') || e.startsWith(\"'\") && e.endsWith(\"'\")) && (e = e.slice(1, -1)), e.startsWith(\"data:\")) {\n        let i;\n        try {\n            i = /data:(?<imageType>[a-z/+]+)(;(?<encodingType>base64|utf8))?,(?<dataString>.*)/g.exec(e).groups;\n        } catch  {\n            return console.warn(\"Image data URI resolved without size:\" + e), [\n                e\n            ];\n        }\n        let { imageType: s , encodingType: o , dataString: a  } = i;\n        if (s === mn) {\n            let u = o === \"base64\" ? atob(a) : decodeURIComponent(a.replace(/ /g, \"%20\")), l = o === \"base64\" ? e : `data:image/svg+xml;base64,${btoa(u)}`, f = Yo(e, u);\n            return [\n                l,\n                ...f\n            ];\n        } else if (o === \"base64\") {\n            let u, l = Dl(a);\n            switch(s){\n                case wr:\n                    u = Jo(l);\n                    break;\n                case Sr:\n                    u = Ko(l);\n                    break;\n                case _r:\n                    u = Qo(l);\n                    break;\n            }\n            return [\n                e,\n                ...u\n            ];\n        } else return console.warn(\"Image data URI resolved without size:\" + e), [\n            e\n        ];\n    }\n    if (!globalThis.fetch) throw new Error(\"`fetch` is required to be polyfilled to load images.\");\n    if (hn.has(e)) return hn.get(e);\n    let t = Vo.get(e);\n    if (t) return t;\n    let n = e, r = fetch(n).then((i)=>{\n        let s = i.headers.get(\"content-type\");\n        return s === \"image/svg+xml\" || s === \"application/svg+xml\" ? i.text() : i.arrayBuffer();\n    }).then((i)=>{\n        if (typeof i == \"string\") try {\n            let a = `data:image/svg+xml;base64,${btoa(i)}`, u = Yo(n, i);\n            return [\n                a,\n                ...u\n            ];\n        } catch (a) {\n            throw new Error(`Failed to parse SVG image: ${a.message}`);\n        }\n        let [s, o] = Xo(i);\n        return [\n            s,\n            ...o\n        ];\n    }).then((i)=>(Vo.set(n, i), i)).catch((i)=>(console.error(`Can't load image ${n}: ` + i.message), []));\n    return hn.set(n, r), r;\n}\nfunction Fl(e) {\n    return [\n        255,\n        216,\n        255\n    ].every((t, n)=>e[n] === t) ? _r : [\n        137,\n        80,\n        78,\n        71,\n        13,\n        10,\n        26,\n        10\n    ].every((t, n)=>e[n] === t) ? wr : [\n        71,\n        73,\n        70,\n        56\n    ].every((t, n)=>e[n] === t) ? Sr : [\n        82,\n        73,\n        70,\n        70,\n        0,\n        0,\n        0,\n        0,\n        87,\n        69,\n        66,\n        80\n    ].every((t, n)=>!t || e[n] === t) ? Rl : [\n        60,\n        63,\n        120,\n        109,\n        108\n    ].every((t, n)=>e[n] === t) ? mn : [\n        0,\n        0,\n        0,\n        0,\n        102,\n        116,\n        121,\n        112,\n        97,\n        118,\n        105,\n        102\n    ].every((t, n)=>!t || e[n] === t) ? Il : null;\n}\nasync function gn(e, t, n, r, i) {\n    let s = await Fe(), o = {\n        ...n,\n        ...xr(zo[t], n),\n        ...xr(r, n)\n    };\n    if (t === \"img\") {\n        let [a, u, l] = await kr(i.src);\n        if (u === void 0 && l === void 0) {\n            if (i.width === void 0 || i.height === void 0) throw new Error(\"Image size cannot be determined. Please provide the width and height of the image.\");\n            u = parseInt(i.width), l = parseInt(i.height);\n        }\n        let f = l / u, d = (o.borderLeftWidth || 0) + (o.borderRightWidth || 0) + (o.paddingLeft || 0) + (o.paddingRight || 0), g = (o.borderTopWidth || 0) + (o.borderBottomWidth || 0) + (o.paddingTop || 0) + (o.paddingBottom || 0), h = o.width || i.width, p = o.height || i.height, v = typeof h != \"string\" && typeof p != \"string\";\n        typeof h == \"number\" && v && (h -= d), typeof p == \"number\" && v && (p -= g), h === void 0 && p === void 0 ? (h = u, p = l) : h === void 0 ? typeof p == \"number\" ? h = p / f : e.setAspectRatio(1 / f) : p === void 0 && (typeof h == \"number\" ? p = h * f : e.setAspectRatio(1 / f)), o.width = v ? h + d : h, o.height = v ? p + g : p, o.__src = a;\n    }\n    if (t === \"svg\") {\n        let a = i.viewBox || i.viewbox, u = xt(a), l = u ? u[3] / u[2] : null, { width: f , height: d  } = i;\n        typeof f > \"u\" && d ? l == null ? f = 0 : typeof d == \"string\" && d.endsWith(\"%\") ? f = parseInt(d) / l + \"%\" : (d = _e(d, n.fontSize, 1, n), f = d / l) : typeof d > \"u\" && f ? l == null ? f = 0 : typeof f == \"string\" && f.endsWith(\"%\") ? d = parseInt(f) * l + \"%\" : (f = _e(f, n.fontSize, 1, n), d = f * l) : (typeof f < \"u\" && (f = _e(f, n.fontSize, 1, n) || f), typeof d < \"u\" && (d = _e(d, n.fontSize, 1, n) || d), f || (f = u == null ? void 0 : u[2]), d || (d = u == null ? void 0 : u[3])), !o.width && f && (o.width = f), !o.height && d && (o.height = d);\n    }\n    return e.setDisplay(he(o.display, {\n        flex: s.DISPLAY_FLEX,\n        none: s.DISPLAY_NONE\n    }, s.DISPLAY_FLEX, \"display\")), e.setAlignContent(he(o.alignContent, {\n        stretch: s.ALIGN_STRETCH,\n        center: s.ALIGN_CENTER,\n        \"flex-start\": s.ALIGN_FLEX_START,\n        \"flex-end\": s.ALIGN_FLEX_END,\n        \"space-between\": s.ALIGN_SPACE_BETWEEN,\n        \"space-around\": s.ALIGN_SPACE_AROUND,\n        baseline: s.ALIGN_BASELINE,\n        normal: s.ALIGN_AUTO\n    }, s.ALIGN_AUTO, \"alignContent\")), e.setAlignItems(he(o.alignItems, {\n        stretch: s.ALIGN_STRETCH,\n        center: s.ALIGN_CENTER,\n        \"flex-start\": s.ALIGN_FLEX_START,\n        \"flex-end\": s.ALIGN_FLEX_END,\n        baseline: s.ALIGN_BASELINE,\n        normal: s.ALIGN_AUTO\n    }, s.ALIGN_STRETCH, \"alignItems\")), e.setAlignSelf(he(o.alignSelf, {\n        stretch: s.ALIGN_STRETCH,\n        center: s.ALIGN_CENTER,\n        \"flex-start\": s.ALIGN_FLEX_START,\n        \"flex-end\": s.ALIGN_FLEX_END,\n        baseline: s.ALIGN_BASELINE,\n        normal: s.ALIGN_AUTO\n    }, s.ALIGN_AUTO, \"alignSelf\")), e.setJustifyContent(he(o.justifyContent, {\n        center: s.JUSTIFY_CENTER,\n        \"flex-start\": s.JUSTIFY_FLEX_START,\n        \"flex-end\": s.JUSTIFY_FLEX_END,\n        \"space-between\": s.JUSTIFY_SPACE_BETWEEN,\n        \"space-around\": s.JUSTIFY_SPACE_AROUND\n    }, s.JUSTIFY_FLEX_START, \"justifyContent\")), e.setFlexDirection(he(o.flexDirection, {\n        row: s.FLEX_DIRECTION_ROW,\n        column: s.FLEX_DIRECTION_COLUMN,\n        \"row-reverse\": s.FLEX_DIRECTION_ROW_REVERSE,\n        \"column-reverse\": s.FLEX_DIRECTION_COLUMN_REVERSE\n    }, s.FLEX_DIRECTION_ROW, \"flexDirection\")), e.setFlexWrap(he(o.flexWrap, {\n        wrap: s.WRAP_WRAP,\n        nowrap: s.WRAP_NO_WRAP,\n        \"wrap-reverse\": s.WRAP_WRAP_REVERSE\n    }, s.WRAP_NO_WRAP, \"flexWrap\")), typeof o.gap < \"u\" && e.setGap(s.GUTTER_ALL, o.gap), typeof o.rowGap < \"u\" && e.setGap(s.GUTTER_ROW, o.rowGap), typeof o.columnGap < \"u\" && e.setGap(s.GUTTER_COLUMN, o.columnGap), typeof o.flexBasis < \"u\" && e.setFlexBasis(o.flexBasis), e.setFlexGrow(typeof o.flexGrow > \"u\" ? 0 : o.flexGrow), e.setFlexShrink(typeof o.flexShrink > \"u\" ? 0 : o.flexShrink), typeof o.maxHeight < \"u\" && e.setMaxHeight(o.maxHeight), typeof o.maxWidth < \"u\" && e.setMaxWidth(o.maxWidth), typeof o.minHeight < \"u\" && e.setMinHeight(o.minHeight), typeof o.minWidth < \"u\" && e.setMinWidth(o.minWidth), e.setOverflow(he(o.overflow, {\n        visible: s.OVERFLOW_VISIBLE,\n        hidden: s.OVERFLOW_HIDDEN\n    }, s.OVERFLOW_VISIBLE, \"overflow\")), e.setMargin(s.EDGE_TOP, o.marginTop || 0), e.setMargin(s.EDGE_BOTTOM, o.marginBottom || 0), e.setMargin(s.EDGE_LEFT, o.marginLeft || 0), e.setMargin(s.EDGE_RIGHT, o.marginRight || 0), e.setBorder(s.EDGE_TOP, o.borderTopWidth || 0), e.setBorder(s.EDGE_BOTTOM, o.borderBottomWidth || 0), e.setBorder(s.EDGE_LEFT, o.borderLeftWidth || 0), e.setBorder(s.EDGE_RIGHT, o.borderRightWidth || 0), e.setPadding(s.EDGE_TOP, o.paddingTop || 0), e.setPadding(s.EDGE_BOTTOM, o.paddingBottom || 0), e.setPadding(s.EDGE_LEFT, o.paddingLeft || 0), e.setPadding(s.EDGE_RIGHT, o.paddingRight || 0), e.setPositionType(he(o.position, {\n        absolute: s.POSITION_TYPE_ABSOLUTE,\n        relative: s.POSITION_TYPE_RELATIVE\n    }, s.POSITION_TYPE_RELATIVE, \"position\")), typeof o.top < \"u\" && e.setPosition(s.EDGE_TOP, o.top), typeof o.bottom < \"u\" && e.setPosition(s.EDGE_BOTTOM, o.bottom), typeof o.left < \"u\" && e.setPosition(s.EDGE_LEFT, o.left), typeof o.right < \"u\" && e.setPosition(s.EDGE_RIGHT, o.right), typeof o.height < \"u\" ? e.setHeight(o.height) : e.setHeightAuto(), typeof o.width < \"u\" ? e.setWidth(o.width) : e.setWidthAuto(), [\n        o,\n        cn(o)\n    ];\n}\nc();\nc();\nc();\nvar Zo = [\n    1,\n    0,\n    0,\n    1,\n    0,\n    0\n];\nfunction Nl(e, t, n) {\n    let r = [\n        ...Zo\n    ];\n    for (let i of e){\n        let s = Object.keys(i)[0], o = i[s];\n        if (typeof o == \"string\") if (s === \"translateX\") o = parseFloat(o) / 100 * t, i[s] = o;\n        else if (s === \"translateY\") o = parseFloat(o) / 100 * n, i[s] = o;\n        else throw new Error(`Invalid transform: \"${s}: ${o}\".`);\n        let a = o, u = [\n            ...Zo\n        ];\n        switch(s){\n            case \"translateX\":\n                u[4] = a;\n                break;\n            case \"translateY\":\n                u[5] = a;\n                break;\n            case \"scale\":\n                u[0] = a, u[3] = a;\n                break;\n            case \"scaleX\":\n                u[0] = a;\n                break;\n            case \"scaleY\":\n                u[3] = a;\n                break;\n            case \"rotate\":\n                {\n                    let l = a * Math.PI / 180, f = Math.cos(l), d = Math.sin(l);\n                    u[0] = f, u[1] = d, u[2] = -d, u[3] = f;\n                    break;\n                }\n            case \"skewX\":\n                u[2] = Math.tan(a * Math.PI / 180);\n                break;\n            case \"skewY\":\n                u[1] = Math.tan(a * Math.PI / 180);\n                break;\n        }\n        r = yt(u, r);\n    }\n    e.splice(0, e.length), e.push(...r), e.__resolved = true;\n}\nfunction _t({ left: e , top: t , width: n , height: r  }, i, s, o) {\n    let a;\n    i.__resolved || Nl(i, n, r);\n    let u = i;\n    if (s) a = u;\n    else {\n        let l = (o == null ? void 0 : o.xAbsolute) ?? ((o == null ? void 0 : o.xRelative) ?? 50) * n / 100, f = (o == null ? void 0 : o.yAbsolute) ?? ((o == null ? void 0 : o.yRelative) ?? 50) * r / 100, d = e + l, g = t + f;\n        a = yt([\n            1,\n            0,\n            0,\n            1,\n            d,\n            g\n        ], yt(u, [\n            1,\n            0,\n            0,\n            1,\n            -d,\n            -g\n        ])), u.__parent && (a = yt(u.__parent, a)), u.splice(0, 6, ...a);\n    }\n    return `matrix(${a.map((l)=>l.toFixed(2)).join(\",\")})`;\n}\nfunction es({ left: e , top: t , width: n , height: r , isInheritingTransform: i  }, s) {\n    let o = \"\", a = 1;\n    return s.transform && (o = _t({\n        left: e,\n        top: t,\n        width: n,\n        height: r\n    }, s.transform, i, s.transformOrigin)), s.opacity !== void 0 && (a = +s.opacity), {\n        matrix: o,\n        opacity: a\n    };\n}\nfunction vn({ id: e , content: t , filter: n , left: r , top: i , width: s , height: o , matrix: a , opacity: u , image: l , clipPathId: f , debug: d , shape: g , decorationShape: h  }, p) {\n    let v = \"\";\n    if (d && (v = I(\"rect\", {\n        x: r,\n        y: i - o,\n        width: s,\n        height: o,\n        fill: \"transparent\",\n        stroke: \"#575eff\",\n        \"stroke-width\": 1,\n        transform: a || void 0,\n        \"clip-path\": f ? `url(#${f})` : void 0\n    })), l) {\n        let b = {\n            href: l,\n            x: r,\n            y: i,\n            width: s,\n            height: o,\n            transform: a || void 0,\n            \"clip-path\": f ? `url(#${f})` : void 0,\n            style: p.filter ? `filter:${p.filter}` : void 0\n        };\n        return [\n            (n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + I(\"image\", {\n                ...b,\n                opacity: u !== 1 ? u : void 0\n            }) + (h || \"\") + (n ? \"</g>\" : \"\") + v,\n            \"\"\n        ];\n    }\n    let _ = {\n        x: r,\n        y: i,\n        width: s,\n        height: o,\n        \"font-weight\": p.fontWeight,\n        \"font-style\": p.fontStyle,\n        \"font-size\": p.fontSize,\n        \"font-family\": p.fontFamily,\n        \"letter-spacing\": p.letterSpacing || void 0,\n        transform: a || void 0,\n        \"clip-path\": f ? `url(#${f})` : void 0,\n        style: p.filter ? `filter:${p.filter}` : void 0\n    };\n    return [\n        (n ? `${n}<g filter=\"url(#satori_s-${e})\">` : \"\") + I(\"text\", {\n            ..._,\n            fill: p.color,\n            opacity: u !== 1 ? u : void 0\n        }, t) + (h || \"\") + (n ? \"</g>\" : \"\") + v,\n        g ? I(\"text\", _, t) : \"\"\n    ];\n}\nc();\nfunction Ml(e, t, n) {\n    return e.replace(/([MA])([0-9.-]+),([0-9.-]+)/g, function(r, i, s, o) {\n        return i + (parseFloat(s) + t) + \",\" + (parseFloat(o) + n);\n    });\n}\nfunction ts({ id: e , width: t , height: n  }, r) {\n    if (!r.shadowColor || !r.shadowOffset || typeof r.shadowRadius > \"u\") return \"\";\n    let i = r.shadowRadius * r.shadowRadius / 4, s = Math.min(r.shadowOffset.width - i, 0), o = Math.max(r.shadowOffset.width + i + t, t), a = Math.min(r.shadowOffset.height - i, 0), u = Math.max(r.shadowOffset.height + i + n, n);\n    return `<defs><filter id=\"satori_s-${e}\" x=\"${s / t * 100}%\" y=\"${a / n * 100}%\" width=\"${(o - s) / t * 100}%\" height=\"${(u - a) / n * 100}%\"><feDropShadow dx=\"${r.shadowOffset.width}\" dy=\"${r.shadowOffset.height}\" stdDeviation=\"${r.shadowRadius / 2}\" flood-color=\"${r.shadowColor}\" flood-opacity=\"1\"/></filter></defs>`;\n}\nfunction rs({ width: e , height: t , shape: n , opacity: r , id: i  }, s) {\n    if (!s.boxShadow) return null;\n    let o = \"\", a = \"\";\n    for(let u = s.boxShadow.length - 1; u >= 0; u--){\n        let l = \"\", f = s.boxShadow[u];\n        f.spreadRadius && f.inset && (f.spreadRadius = -f.spreadRadius);\n        let d = f.blurRadius * f.blurRadius / 4 + (f.spreadRadius || 0), g = Math.min(-d - (f.inset ? f.offsetX : 0), 0), h = Math.max(d + e - (f.inset ? f.offsetX : 0), e), p = Math.min(-d - (f.inset ? f.offsetY : 0), 0), v = Math.max(d + t - (f.inset ? f.offsetY : 0), t), _ = `satori_s-${i}-${u}`, b = `satori_ms-${i}-${u}`, y = f.spreadRadius ? n.replace('stroke-width=\"0\"', `stroke-width=\"${f.spreadRadius * 2}\"`) : n;\n        l += I(\"mask\", {\n            id: b,\n            maskUnits: \"userSpaceOnUse\"\n        }, I(\"rect\", {\n            x: 0,\n            y: 0,\n            width: s._viewportWidth,\n            height: s._viewportHeight,\n            fill: f.inset ? \"#000\" : \"#fff\"\n        }) + y.replace('fill=\"#fff\"', f.inset ? 'fill=\"#fff\"' : 'fill=\"#000\"').replace('stroke=\"#fff\"', \"\"));\n        let S = y.replace(/d=\"([^\"]+)\"/, (E, T)=>'d=\"' + Ml(T, f.offsetX, f.offsetY) + '\"').replace(/x=\"([^\"]+)\"/, (E, T)=>'x=\"' + (parseFloat(T) + f.offsetX) + '\"').replace(/y=\"([^\"]+)\"/, (E, T)=>'y=\"' + (parseFloat(T) + f.offsetY) + '\"');\n        f.spreadRadius && f.spreadRadius < 0 && (l += I(\"mask\", {\n            id: b + \"-neg\",\n            maskUnits: \"userSpaceOnUse\"\n        }, S.replace('stroke=\"#fff\"', 'stroke=\"#000\"').replace(/stroke-width=\"[^\"]+\"/, `stroke-width=\"${-f.spreadRadius * 2}\"`))), f.spreadRadius && f.spreadRadius < 0 && (S = I(\"g\", {\n            mask: `url(#${b}-neg)`\n        }, S)), l += I(\"defs\", {}, I(\"filter\", {\n            id: _,\n            x: `${g / e * 100}%`,\n            y: `${p / t * 100}%`,\n            width: `${(h - g) / e * 100}%`,\n            height: `${(v - p) / t * 100}%`\n        }, I(\"feGaussianBlur\", {\n            stdDeviation: f.blurRadius / 2,\n            result: \"b\"\n        }) + I(\"feFlood\", {\n            \"flood-color\": f.color,\n            in: \"SourceGraphic\",\n            result: \"f\"\n        }) + I(\"feComposite\", {\n            in: \"f\",\n            in2: \"b\",\n            operator: f.inset ? \"out\" : \"in\"\n        }))) + I(\"g\", {\n            mask: `url(#${b})`,\n            filter: `url(#${_})`,\n            opacity: r\n        }, S), f.inset ? a += l : o += l;\n    }\n    return [\n        o,\n        a\n    ];\n}\nc();\nfunction bn({ width: e , left: t , top: n , ascender: r , clipPathId: i  }, s) {\n    let { textDecorationColor: o , textDecorationStyle: a , textDecorationLine: u , fontSize: l  } = s;\n    if (!u || u === \"none\") return \"\";\n    let f = Math.max(1, l * 0.1), d = u === \"line-through\" ? n + r * 0.5 : u === \"underline\" ? n + r * 1.1 : n, g = a === \"dashed\" ? `${f * 1.2} ${f * 2}` : a === \"dotted\" ? `0 ${f * 2}` : void 0;\n    return I(\"line\", {\n        x1: t,\n        y1: d,\n        x2: t + e,\n        y2: d,\n        stroke: o,\n        \"stroke-width\": f,\n        \"stroke-dasharray\": g,\n        \"stroke-linecap\": a === \"dotted\" ? \"round\" : \"square\",\n        \"clip-path\": i ? `url(#${i})` : void 0\n    });\n}\nasync function* yn(e, t) {\n    var To;\n    let n = await Fe(), { parentStyle: r , inheritedStyle: i , parent: s , font: o , id: a , isInheritingTransform: u , debug: l , embedFont: f , graphemeImages: d , locale: g , canLoadAdditionalAssets: h  } = t, { textAlign: p , textOverflow: v , whiteSpace: _ , wordBreak: b , lineHeight: y , filter: S , _inheritedBackgroundClipTextPath: E  } = r;\n    r.textTransform === \"uppercase\" ? e = e.toLocaleUpperCase(g) : r.textTransform === \"lowercase\" ? e = e.toLocaleLowerCase(g) : r.textTransform === \"capitalize\" && (e = pe(e, \"word\", g).map((W)=>pe(W, \"grapheme\", g).map((B, q)=>q === 0 ? B.toLocaleUpperCase(g) : B).join(\"\")).join(\"\"));\n    let T = [\n        \"pre\",\n        \"pre-wrap\",\n        \"pre-line\"\n    ].includes(_), D = ![\n        \"pre\",\n        \"pre-wrap\"\n    ].includes(_);\n    T || (e = e.replace(/\\n/g, \" \")), D && (e = e.replace(/[ ]+/g, \" \"), e = e.trim());\n    let F = b === \"break-word\", { words: C , requiredBreaks: H  } = Uo(e, b), U = n.Node.create();\n    U.setAlignItems(n.ALIGN_BASELINE), U.setJustifyContent(he(r.textAlign, {\n        left: n.JUSTIFY_FLEX_START,\n        right: n.JUSTIFY_FLEX_END,\n        center: n.JUSTIFY_CENTER,\n        justify: n.JUSTIFY_SPACE_BETWEEN,\n        start: n.JUSTIFY_FLEX_START,\n        end: n.JUSTIFY_FLEX_END\n    }, n.JUSTIFY_FLEX_START, \"textAlign\")), s.insertChild(U, s.getChildCount());\n    let J = r.fontSize, $ = o.getEngine(J, y, r, g), V = h ? pe(e, \"grapheme\").filter((W)=>!$.has(W)) : [];\n    yield V.map((W)=>({\n            word: W,\n            locale: g\n        })), V.length && ($ = o.getEngine(J, y, r, g));\n    let ne = /* @__PURE__ */ new Map();\n    function Z(W) {\n        if (ne.has(W)) return ne.get(W);\n        let B = $.measure(W, r);\n        return ne.set(W, B), B;\n    }\n    function le(W) {\n        return !!(d && d[W]);\n    }\n    function ye(W) {\n        let B = 0;\n        for (let q of W)le(q) ? B += r.fontSize : B += Z(q);\n        return {\n            width: B\n        };\n    }\n    let L = (W)=>{\n        if (W.length === 0) return {\n            originWidth: 0,\n            endingSpacesWidth: 0\n        };\n        let { width: B  } = ye(pe(W, \"grapheme\")), q = W.trimEnd() === W ? B : ye(pe(W.trimEnd(), \"grapheme\")).width;\n        return {\n            originWidth: B,\n            endingSpacesWidth: B - q\n        };\n    };\n    typeof r.flexShrink > \"u\" && s.setFlexShrink(1);\n    let N = [], z = [], M = [], fe = [], xe = [];\n    function Qr(W) {\n        let B = 0, q = 0, be = 0, ce = -1, de = 0, re = 0, oe = 0;\n        N = [], M = [\n            0\n        ], fe = [], xe = [];\n        let De = 0;\n        for(; De < C.length;){\n            let X = C[De], Ye = T && H[De], we = 0, Be = 0, { originWidth: gt , endingSpacesWidth: Xe  } = L(X);\n            we = gt, Be = Xe, Ye && re === 0 && (re = $.height(X));\n            let se = \",.!?:-@)>]}%#\".indexOf(X[0]) < 0, ue = !q, Ue = De && se && q + we > W + Be && _ !== \"nowrap\" && _ !== \"pre\";\n            if (F && we > W && (!q || Ue || Ye)) {\n                let Qe = pe(X, \"grapheme\");\n                C.splice(De, 1, ...Qe), q > 0 && (N.push(q), z.push(oe), B++, de += re, q = 0, re = 0, oe = 0, M.push(1), ce = -1);\n                continue;\n            }\n            if (Ye || Ue) D && X === \" \" && (we = 0), N.push(q), z.push(oe), B++, de += re, q = we, re = we ? $.height(X) : 0, oe = we ? $.baseline(X) : 0, M.push(1), ce = -1, Ye || (be = Math.max(be, W));\n            else {\n                q += we;\n                let Qe = $.height(X);\n                Qe > re && (re = Qe, oe = $.baseline(X)), ue && M[M.length - 1]++;\n            }\n            ue && ce++, be = Math.max(be, q);\n            let st = q - we;\n            if (we === 0) xe.push({\n                y: de,\n                x: st,\n                width: 0,\n                line: B,\n                lineIndex: ce,\n                isImage: false\n            });\n            else {\n                let Qe = pe(X, \"word\");\n                for(let tn = 0; tn < Qe.length; tn++){\n                    let rn = Qe[tn], mr = 0, Oo = false;\n                    le(rn) ? (mr = r.fontSize, Oo = true) : mr = Z(rn), fe.push(rn), xe.push({\n                        y: de,\n                        x: st,\n                        width: mr,\n                        line: B,\n                        lineIndex: ce,\n                        isImage: Oo\n                    }), st += mr;\n                }\n            }\n            De++;\n        }\n        return q && (B++, N.push(q), z.push(oe), de += re), {\n            width: be,\n            height: de\n        };\n    }\n    U.setMeasureFunc((W)=>{\n        let { width: B , height: q  } = Qr(W);\n        if (r.textWrap === \"balance\") {\n            let be = B / 2, ce = B, de = B;\n            for(; be + 1 < ce;){\n                de = (be + ce) / 2;\n                let { height: re  } = Qr(de);\n                re > q ? be = de : ce = de;\n            }\n            return Qr(ce), {\n                width: ce,\n                height: q\n            };\n        }\n        return {\n            width: B,\n            height: q\n        };\n    });\n    let [Vu, Yu] = yield, Kr = \"\", lr = \"\", We = i._inheritedClipPathId, bo = i._inheritedMaskId, { left: yo , top: xo , width: fr , height: wo  } = U.getComputedLayout(), Jr = s.getComputedWidth() - s.getComputedPadding(n.EDGE_LEFT) - s.getComputedPadding(n.EDGE_RIGHT) - s.getComputedBorder(n.EDGE_LEFT) - s.getComputedBorder(n.EDGE_RIGHT), it = Vu + yo, ot = Yu + xo, { matrix: Ce , opacity: cr  } = es({\n        left: yo,\n        top: xo,\n        width: fr,\n        height: wo,\n        isInheritingTransform: u\n    }, r), dr = \"\";\n    r.textShadowOffset && (dr = ts({\n        width: fr,\n        height: wo,\n        id: a\n    }, {\n        shadowColor: r.textShadowColor,\n        shadowOffset: r.textShadowOffset,\n        shadowRadius: r.textShadowRadius\n    }));\n    let mt = \"\", pr = \"\", _o = \"\", Zr = -1, So = v === \"ellipsis\" ? ye([\n        \"…\"\n    ]).width : 0, Xu = v === \"ellipsis\" ? ye([\n        \" \"\n    ]).width : 0, hr = {}, qe = null, ko = 0;\n    for(let W = 0; W < fe.length; W++){\n        let B = xe[W];\n        if (!B) continue;\n        let q = fe[W], be = null, ce = false, de = d ? d[q] : null, re = B.y, oe = B.x, De = B.width, X = B.line;\n        if (X === Zr) continue;\n        let Ye = false;\n        if (N.length > 1) {\n            let se = fr - N[X];\n            if (p === \"right\" || p === \"end\") oe += se;\n            else if (p === \"center\") oe += se / 2;\n            else if (p === \"justify\" && X < N.length - 1) {\n                let ue = M[X];\n                oe += (ue > 1 ? se / (ue - 1) : 0) * B.lineIndex, Ye = true;\n            }\n        }\n        if (hr[X] || (hr[X] = [\n            oe,\n            Ye ? fr : N[X]\n        ]), v === \"ellipsis\" && N[X] > Jr && B.x + De + So + Xu > Jr) {\n            let se = pe(q, \"grapheme\", g), ue = \"\", Ue = 0;\n            for (let en of se){\n                let st = B.x + ye([\n                    ue + en\n                ]).width;\n                if (ue && st + So > Jr) break;\n                ue += en, Ue = st;\n            }\n            q = ue + \"…\", Zr = X, hr[X][1] = Ue, ce = true;\n        }\n        let we = z[X], Be = $.baseline(q), gt = $.height(q), Xe = we - Be;\n        if (de) re += 0;\n        else if (f) {\n            if (!Mo.includes(q) && fe[W + 1] && xe[W + 1] && !xe[W + 1].isImage && re === xe[W + 1].y && !ce) {\n                qe === null && (ko = oe), qe = qe === null ? q : qe + q;\n                continue;\n            }\n            let se = qe === null ? q : qe + q, ue = qe === null ? oe : ko, Ue = B.width + oe - ue;\n            be = $.getSVG(se, {\n                ...r,\n                left: it + ue,\n                top: ot + re + Be + Xe,\n                letterSpacing: r.letterSpacing\n            }), qe = null, l && (_o += I(\"rect\", {\n                x: it + ue,\n                y: ot + re + Xe,\n                width: Ue,\n                height: gt,\n                fill: \"transparent\",\n                stroke: \"#575eff\",\n                \"stroke-width\": 1,\n                transform: Ce || void 0,\n                \"clip-path\": We ? `url(#${We})` : void 0\n            }) + I(\"line\", {\n                x1: it + oe,\n                x2: it + oe + B.width,\n                y1: ot + re + Xe + Be,\n                y2: ot + re + Xe + Be,\n                stroke: \"#14c000\",\n                \"stroke-width\": 1,\n                transform: Ce || void 0,\n                \"clip-path\": We ? `url(#${We})` : void 0\n            }));\n        } else re += Be + Xe;\n        if (r.textDecorationLine && (X !== ((To = xe[W + 1]) == null ? void 0 : To.line) || Zr === X)) {\n            let se = hr[X];\n            se && !se[2] && (mt += bn({\n                left: it + se[0],\n                top: ot + gt * +X,\n                width: se[1],\n                ascender: $.baseline(q),\n                clipPathId: We\n            }, r), se[2] = 1);\n        }\n        if (be !== null) pr += be + \" \";\n        else {\n            let [se, ue] = vn({\n                content: q,\n                filter: dr,\n                id: a,\n                left: it + oe,\n                top: ot + re,\n                width: De,\n                height: gt,\n                matrix: Ce,\n                opacity: cr,\n                image: de,\n                clipPathId: We,\n                debug: l,\n                shape: !!E,\n                decorationShape: mt\n            }, r);\n            Kr += se, lr += ue, mt = \"\";\n        }\n    }\n    if (pr) {\n        let W = r.color !== \"transparent\" && cr !== 0 ? I(\"path\", {\n            fill: r.color,\n            d: pr,\n            transform: Ce || void 0,\n            opacity: cr !== 1 ? cr : void 0,\n            \"clip-path\": We ? `url(#${We})` : void 0,\n            mask: bo ? `url(#${bo})` : void 0,\n            style: S ? `filter:${S}` : void 0\n        }) : \"\";\n        E && (lr = I(\"path\", {\n            d: pr,\n            transform: Ce || void 0\n        })), Kr += (dr ? dr + I(\"g\", {\n            filter: `url(#satori_s-${a})`\n        }, W + mt) : W + mt) + _o;\n    }\n    return lr && (r._inheritedBackgroundClipTextPath.value += lr), Kr;\n}\nc();\nc();\nc();\nvar xn = xn || {};\nvar ns = {\n    type: \"directional\",\n    value: \"bottom\"\n};\nxn.parse = function() {\n    var e = {\n        linearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(linear\\-gradient)/i,\n        repeatingLinearGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-linear\\-gradient)/i,\n        radialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(radial\\-gradient)/i,\n        repeatingRadialGradient: /^(\\-(webkit|o|ms|moz)\\-)?(repeating\\-radial\\-gradient)/i,\n        sideOrCorner: /^to (left (top|bottom)|right (top|bottom)|top (left|right)|bottom (left|right)|left|right|top|bottom)/i,\n        extentKeywords: /^(closest\\-side|closest\\-corner|farthest\\-side|farthest\\-corner|contain|cover)/,\n        positionKeywords: /^(left|center|right|top|bottom)/i,\n        pixelValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))px/,\n        percentageValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))\\%/,\n        emValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))em/,\n        angleValue: /^(-?(([0-9]*\\.[0-9]+)|([0-9]+\\.?)))deg/,\n        zeroValue: /[0]/,\n        startCall: /^\\(/,\n        endCall: /^\\)/,\n        comma: /^,/,\n        hexColor: /^\\#([0-9a-fA-F]+)/,\n        literalColor: /^([a-zA-Z]+)/,\n        rgbColor: /^rgb/i,\n        rgbaColor: /^rgba/i,\n        number: /^(([0-9]*\\.[0-9]+)|([0-9]+\\.?))/\n    }, t = \"\";\n    function n(L) {\n        var N = new Error(t + \": \" + L);\n        throw N.source = t, N;\n    }\n    function r() {\n        var L = i();\n        return t.length > 0 && n(\"Invalid input not EOF\"), L;\n    }\n    function i() {\n        return E(s);\n    }\n    function s() {\n        return o(\"linear-gradient\", e.linearGradient, u, ns) || o(\"repeating-linear-gradient\", e.repeatingLinearGradient, u, ns) || o(\"radial-gradient\", e.radialGradient, g) || o(\"repeating-radial-gradient\", e.repeatingRadialGradient, g);\n    }\n    function o(L, N, z, M) {\n        return a(N, function(fe) {\n            var xe = z();\n            return xe ? le(e.comma) || n(\"Missing comma before color stops\") : xe = M, {\n                type: L,\n                orientation: xe,\n                colorStops: E(T)\n            };\n        });\n    }\n    function a(L, N) {\n        var z = le(L);\n        if (z) {\n            le(e.startCall) || n(\"Missing (\");\n            var M = N(z);\n            return le(e.endCall) || n(\"Missing )\"), M;\n        }\n    }\n    function u() {\n        return l() || f() || d();\n    }\n    function l() {\n        return Z(\"directional\", e.sideOrCorner, 1);\n    }\n    function f() {\n        return Z(\"angular\", e.angleValue, 1);\n    }\n    function d() {\n        return Z(\"directional\", e.zeroValue, 0);\n    }\n    function g() {\n        var L, N = h(), z;\n        return N && (L = [], L.push(N), z = t, le(e.comma) && (N = h(), N ? L.push(N) : t = z)), L;\n    }\n    function h() {\n        var L = p() || v();\n        if (L) L.at = b();\n        else {\n            var N = _();\n            if (N) {\n                L = N;\n                var z = b();\n                z && (L.at = z);\n            } else {\n                var z = b();\n                if (z) L = {\n                    type: \"shape\",\n                    value: \"ellipse\",\n                    at: z\n                };\n                else {\n                    var M = y();\n                    M && (L = {\n                        type: \"default-radial\",\n                        at: M\n                    });\n                }\n            }\n        }\n        return L;\n    }\n    function p() {\n        var L = Z(\"shape\", /^(circle)/i, 0);\n        return L && (L.style = ne() || _()), L;\n    }\n    function v() {\n        var L = Z(\"shape\", /^(ellipse)/i, 0);\n        return L && (L.style = $() || _()), L;\n    }\n    function _() {\n        return Z(\"extent-keyword\", e.extentKeywords, 1);\n    }\n    function b() {\n        if (Z(\"position\", /^at/, 0)) {\n            var L = y();\n            return L || n(\"Missing positioning value\"), L;\n        }\n    }\n    function y() {\n        var L = S();\n        if (L.x || L.y) return {\n            type: \"position\",\n            value: L\n        };\n    }\n    function S() {\n        return {\n            x: $(),\n            y: $()\n        };\n    }\n    function E(L) {\n        var N = L(), z = [];\n        if (N) for(z.push(N); le(e.comma);)N = L(), N ? z.push(N) : n(\"One extra comma\");\n        return z;\n    }\n    function T() {\n        var L = D();\n        return L || n(\"Expected color definition\"), L.length = $(), L;\n    }\n    function D() {\n        return C() || U() || H() || F();\n    }\n    function F() {\n        return Z(\"literal\", e.literalColor, 0);\n    }\n    function C() {\n        return Z(\"hex\", e.hexColor, 1);\n    }\n    function H() {\n        return a(e.rgbColor, function() {\n            return {\n                type: \"rgb\",\n                value: E(J)\n            };\n        });\n    }\n    function U() {\n        return a(e.rgbaColor, function() {\n            return {\n                type: \"rgba\",\n                value: E(J)\n            };\n        });\n    }\n    function J() {\n        return le(e.number)[1];\n    }\n    function $() {\n        return Z(\"%\", e.percentageValue, 1) || V() || ne();\n    }\n    function V() {\n        return Z(\"position-keyword\", e.positionKeywords, 1);\n    }\n    function ne() {\n        return Z(\"px\", e.pixelValue, 1) || Z(\"em\", e.emValue, 1);\n    }\n    function Z(L, N, z) {\n        var M = le(N);\n        if (M) return {\n            type: L,\n            value: M[z]\n        };\n    }\n    function le(L) {\n        var N, z;\n        return z = /^[\\n\\r\\t\\s]+/.exec(t), z && ye(z[0].length), N = L.exec(t), N && ye(N[0].length), N;\n    }\n    function ye(L) {\n        t = t.substr(L);\n    }\n    return function(L) {\n        return t = L.toString(), r();\n    };\n}();\nvar wn = xn;\nfunction $l(e) {\n    return e.type === \"literal\" ? e.value : e.type === \"hex\" ? `#${e.value}` : e.type === \"rgb\" ? `rgb(${e.value.join(\",\")})` : e.type === \"rgba\" ? `rgba(${e.value.join(\",\")})` : \"transparent\";\n}\nfunction Wl(e) {\n    let t = 0, n = 0, r = 0, i = 0;\n    return e.includes(\"top\") ? n = 1 : e.includes(\"bottom\") && (i = 1), e.includes(\"left\") ? t = 1 : e.includes(\"right\") && (r = 1), !t && !r && !n && !i && (n = 1), [\n        t,\n        n,\n        r,\n        i\n    ];\n}\nfunction ql(e, t) {\n    return typeof e == \"string\" && e.endsWith(\"%\") ? t * parseFloat(e) / 100 : +e;\n}\nfunction _n(e, { x: t , y: n , defaultX: r , defaultY: i  }) {\n    return (e ? e.split(\" \").map((s)=>{\n        try {\n            let o = new ze(s);\n            return o.type === \"length\" || o.type === \"number\" ? o.value : o.value + o.unit;\n        } catch  {\n            return null;\n        }\n    }).filter((s)=>s !== null) : [\n        r,\n        i\n    ]).map((s, o)=>ql(s, [\n            t,\n            n\n        ][o]));\n}\nfunction is(e, t) {\n    let n = [];\n    for (let o of t){\n        let a = $l(o);\n        if (!n.length && (n.push({\n            offset: 0,\n            color: a\n        }), typeof o.length > \"u\" || o.length.value === \"0\")) continue;\n        let u = typeof o.length > \"u\" ? void 0 : o.length.type === \"%\" ? o.length.value / 100 : o.length.value / e;\n        n.push({\n            offset: u,\n            color: a\n        });\n    }\n    n.length || n.push({\n        offset: 0,\n        color: \"transparent\"\n    });\n    let r = n[n.length - 1];\n    r.offset !== 1 && (typeof r.offset > \"u\" ? r.offset = 1 : n.push({\n        offset: 1,\n        color: r.color\n    }));\n    let i = 0, s = 1;\n    for(let o = 0; o < n.length; o++)if (typeof n[o].offset > \"u\") {\n        for(s < o && (s = o); typeof n[s].offset > \"u\";)s++;\n        n[o].offset = (n[s].offset - n[i].offset) / (s - i) * (o - i) + n[i].offset;\n    } else i = o;\n    return n;\n}\nasync function Sn({ id: e , width: t , height: n , left: r , top: i  }, { image: s , size: o , position: a , repeat: u  }) {\n    u = u || \"repeat\";\n    let l = u === \"repeat-x\" || u === \"repeat\", f = u === \"repeat-y\" || u === \"repeat\", d = _n(o, {\n        x: t,\n        y: n,\n        defaultX: t,\n        defaultY: n\n    }), g = _n(a, {\n        x: t,\n        y: n,\n        defaultX: 0,\n        defaultY: 0\n    });\n    if (s.startsWith(\"linear-gradient(\")) {\n        let h = wn.parse(s)[0], [p, v] = d, _, b, y, S;\n        if (h.orientation.type === \"directional\") [_, b, y, S] = Wl(h.orientation.value);\n        else if (h.orientation.type === \"angular\") {\n            let C = +h.orientation.value / 180 * Math.PI - Math.PI / 2, H = Math.cos(C), U = Math.sin(C);\n            _ = 0, b = 0, y = H, S = U, y < 0 && (_ -= y, y = 0), S < 0 && (b -= S, S = 0);\n        }\n        let E = is(t, h.colorStops), T = `satori_bi${e}`, D = `satori_pattern_${e}`, F = I(\"pattern\", {\n            id: D,\n            x: g[0] / t,\n            y: g[1] / n,\n            width: l ? p / t : \"1\",\n            height: f ? v / n : \"1\",\n            patternUnits: \"objectBoundingBox\"\n        }, I(\"linearGradient\", {\n            id: T,\n            x1: _,\n            y1: b,\n            x2: y,\n            y2: S\n        }, E.map((C)=>I(\"stop\", {\n                offset: C.offset * 100 + \"%\",\n                \"stop-color\": C.color\n            })).join(\"\")) + I(\"rect\", {\n            x: 0,\n            y: 0,\n            width: p,\n            height: v,\n            fill: `url(#${T})`\n        }));\n        return [\n            D,\n            F\n        ];\n    }\n    if (s.startsWith(\"radial-gradient(\")) {\n        let h = wn.parse(s)[0], p = h.orientation[0], [v, _] = d, b = \"circle\", y = v / 2, S = _ / 2;\n        if (p.type === \"shape\") {\n            if (b = p.value, p.at) if (p.at.type === \"position\") y = p.at.value.x.value, S = p.at.value.y.value;\n            else throw new Error(\"orientation.at.type not implemented: \" + p.at.type);\n        } else throw new Error(\"orientation.type not implemented: \" + p.type);\n        let E = is(t, h.colorStops), T = `satori_radial_${e}`, D = `satori_pattern_${e}`, F = `satori_mask_${e}`, C = {}, H = Math.max(Math.abs(v - y), Math.abs(y)), U = Math.max(Math.abs(_ - S), Math.abs(S));\n        if (b === \"circle\") C.r = Math.sqrt(H * H + U * U);\n        else if (b === \"ellipse\") {\n            let V = U !== 0 ? H / U : 1;\n            C.ry = Math.sqrt(H * H + U * U * V * V) / V, C.rx = C.ry * V;\n        }\n        let J = I(\"pattern\", {\n            id: D,\n            x: g[0] / t,\n            y: g[1] / n,\n            width: l ? v / t : \"1\",\n            height: f ? _ / n : \"1\",\n            patternUnits: \"objectBoundingBox\"\n        }, I(\"radialGradient\", {\n            id: T\n        }, E.map((V)=>I(\"stop\", {\n                offset: V.offset,\n                \"stop-color\": V.color\n            })).join(\"\")) + I(\"mask\", {\n            id: F\n        }, I(\"rect\", {\n            x: 0,\n            y: 0,\n            width: v,\n            height: _,\n            fill: \"#fff\"\n        })) + I(b, {\n            cx: y,\n            cy: S,\n            width: v,\n            height: _,\n            ...C,\n            fill: `url(#${T})`,\n            mask: `url(#${F})`\n        }));\n        return [\n            D,\n            J\n        ];\n    }\n    if (s.startsWith(\"url(\")) {\n        let h = _n(o, {\n            x: t,\n            y: n,\n            defaultX: 0,\n            defaultY: 0\n        }), [p, v, _] = await kr(s.slice(4, -1)), b = h[0] || v, y = h[1] || _;\n        return [\n            `satori_bi${e}`,\n            I(\"pattern\", {\n                id: `satori_bi${e}`,\n                patternContentUnits: \"userSpaceOnUse\",\n                patternUnits: \"userSpaceOnUse\",\n                x: g[0] + r,\n                y: g[1] + i,\n                width: l ? b : \"100%\",\n                height: f ? y : \"100%\"\n            }, I(\"image\", {\n                x: 0,\n                y: 0,\n                width: b,\n                height: y,\n                preserveAspectRatio: \"none\",\n                href: p\n            }))\n        ];\n    }\n    throw new Error(`Invalid background image: \"${s}\"`);\n}\nc();\nfunction Bl([e, t]) {\n    return Math.round(e * 1e3) === 0 && Math.round(t * 1e3) === 0 ? 0 : Math.round(e * t / Math.sqrt(e * e + t * t) * 1e3) / 1e3;\n}\nfunction Tr(e, t, n) {\n    return n < e + t && (n / 2 < e && n / 2 < t ? e = t = n / 2 : n / 2 < e ? e = n - t : n / 2 < t && (t = n - e)), [\n        e,\n        t\n    ];\n}\nfunction Or(e) {\n    e[0] = e[1] = Math.min(e[0], e[1]);\n}\nfunction Er(e, t, n, r, i) {\n    if (typeof e == \"string\") {\n        let s = e.split(\" \").map((a)=>a.trim()), o = !s[1] && !s[0].endsWith(\"%\");\n        return s[1] = s[1] || s[0], [\n            o,\n            [\n                Math.min(_e(s[0], r, t, i, true), t),\n                Math.min(_e(s[1], r, n, i, true), n)\n            ]\n        ];\n    }\n    return typeof e == \"number\" ? [\n        true,\n        [\n            Math.min(e, t),\n            Math.min(e, n)\n        ]\n    ] : [\n        true,\n        void 0\n    ];\n}\nvar Pr = (e)=>e && e[0] !== 0 && e[1] !== 0;\nfunction ut({ left: e , top: t , width: n , height: r  }, i, s) {\n    let { borderTopLeftRadius: o , borderTopRightRadius: a , borderBottomLeftRadius: u , borderBottomRightRadius: l , fontSize: f  } = i, d, g, h, p;\n    if ([d, o] = Er(o, n, r, f, i), [g, a] = Er(a, n, r, f, i), [h, u] = Er(u, n, r, f, i), [p, l] = Er(l, n, r, f, i), !s && !Pr(o) && !Pr(a) && !Pr(u) && !Pr(l)) return \"\";\n    o || (o = [\n        0,\n        0\n    ]), a || (a = [\n        0,\n        0\n    ]), u || (u = [\n        0,\n        0\n    ]), l || (l = [\n        0,\n        0\n    ]), [o[0], a[0]] = Tr(o[0], a[0], n), [u[0], l[0]] = Tr(u[0], l[0], n), [o[1], u[1]] = Tr(o[1], u[1], r), [a[1], l[1]] = Tr(a[1], l[1], r), d && Or(o), g && Or(a), h && Or(u), p && Or(l);\n    let v = [];\n    v[0] = [\n        a,\n        a\n    ], v[1] = [\n        l,\n        [\n            -l[0],\n            l[1]\n        ]\n    ], v[2] = [\n        u,\n        [\n            -u[0],\n            -u[1]\n        ]\n    ], v[3] = [\n        o,\n        [\n            o[0],\n            -o[1]\n        ]\n    ];\n    let _ = `h${n - o[0] - a[0]} a${v[0][0]} 0 0 1 ${v[0][1]}`, b = `v${r - a[1] - l[1]} a${v[1][0]} 0 0 1 ${v[1][1]}`, y = `h${l[0] + u[0] - n} a${v[2][0]} 0 0 1 ${v[2][1]}`, S = `v${u[1] + o[1] - r} a${v[3][0]} 0 0 1 ${v[3][1]}`;\n    if (s) {\n        let T = function($) {\n            let V = Bl([\n                o,\n                a,\n                l,\n                u\n            ][$]);\n            return $ === 0 ? [\n                [\n                    e + o[0] - V,\n                    t + o[1] - V\n                ],\n                [\n                    e + o[0],\n                    t\n                ]\n            ] : $ === 1 ? [\n                [\n                    e + n - a[0] + V,\n                    t + a[1] - V\n                ],\n                [\n                    e + n,\n                    t + a[1]\n                ]\n            ] : $ === 2 ? [\n                [\n                    e + n - l[0] + V,\n                    t + r - l[1] + V\n                ],\n                [\n                    e + n - l[0],\n                    t + r\n                ]\n            ] : [\n                [\n                    e + u[0] - V,\n                    t + r - u[1] + V\n                ],\n                [\n                    e,\n                    t + r - u[1]\n                ]\n            ];\n        }, E = s.indexOf(false);\n        if (!s.includes(true)) throw new Error(\"Invalid `partialSides`.\");\n        if (E === -1) E = 0;\n        else for(; !s[E];)E = (E + 1) % 4;\n        let D = \"\", F = T(E), C = `M${F[0]} A${v[(E + 3) % 4][0]} 0 0 1 ${F[1]}`, H = 0;\n        for(; H < 4 && s[(E + H) % 4]; H++)D += C + \" \", C = [\n            _,\n            b,\n            y,\n            S\n        ][(E + H) % 4];\n        let U = (E + H) % 4;\n        D += C.split(\" \")[0];\n        let J = T(U);\n        return D += ` A${v[(U + 3) % 4][0]} 0 0 1 ${J[0]}`, D;\n    }\n    return `M${e + o[0]},${t} ${_} ${b} ${y} ${S}`;\n}\nc();\nc();\nc();\nfunction os(e, t, n) {\n    return n[e + \"Width\"] === n[t + \"Width\"] && n[e + \"Style\"] === n[t + \"Style\"] && n[e + \"Color\"] === n[t + \"Color\"];\n}\nfunction ss({ id: e , currentClipPathId: t , borderPath: n , borderType: r , left: i , top: s , width: o , height: a  }, u) {\n    if (!(u.borderTopWidth || u.borderRightWidth || u.borderBottomWidth || u.borderLeftWidth)) return null;\n    let f = `satori_bc-${e}`;\n    return [\n        I(\"clipPath\", {\n            id: f,\n            \"clip-path\": t ? `url(#${t})` : void 0\n        }, I(r, {\n            x: i,\n            y: s,\n            width: o,\n            height: a,\n            d: n || void 0\n        })),\n        f\n    ];\n}\nfunction St({ left: e , top: t , width: n , height: r , props: i , asContentMask: s , maskBorderOnly: o  }, a) {\n    let u = [\n        \"borderTop\",\n        \"borderRight\",\n        \"borderBottom\",\n        \"borderLeft\"\n    ];\n    if (!s && !u.some((h)=>a[h + \"Width\"])) return \"\";\n    let l = \"\", f = 0;\n    for(; f > 0 && os(u[f], u[(f + 3) % 4], a);)f = (f + 3) % 4;\n    let d = [\n        false,\n        false,\n        false,\n        false\n    ], g = [];\n    for(let h = 0; h < 4; h++){\n        let p = (f + h) % 4, v = (f + h + 1) % 4, _ = u[p], b = u[v];\n        if (d[p] = true, g = [\n            a[_ + \"Width\"],\n            a[_ + \"Style\"],\n            a[_ + \"Color\"],\n            _\n        ], !os(_, b, a)) {\n            let y = (g[0] || 0) + (s && !o && a[_.replace(\"border\", \"padding\")] || 0);\n            y && (l += I(\"path\", {\n                width: n,\n                height: r,\n                ...i,\n                fill: \"none\",\n                stroke: s ? \"#000\" : g[2],\n                \"stroke-width\": y * 2,\n                \"stroke-dasharray\": !s && g[1] === \"dashed\" ? y * 2 + \" \" + y : void 0,\n                d: ut({\n                    left: e,\n                    top: t,\n                    width: n,\n                    height: r\n                }, a, d)\n            })), d = [\n                false,\n                false,\n                false,\n                false\n            ];\n        }\n    }\n    if (d.some(Boolean)) {\n        let h = (g[0] || 0) + (s && !o && a[g[3].replace(\"border\", \"padding\")] || 0);\n        h && (l += I(\"path\", {\n            width: n,\n            height: r,\n            ...i,\n            fill: \"none\",\n            stroke: s ? \"#000\" : g[2],\n            \"stroke-width\": h * 2,\n            \"stroke-dasharray\": !s && g[1] === \"dashed\" ? h * 2 + \" \" + h : void 0,\n            d: ut({\n                left: e,\n                top: t,\n                width: n,\n                height: r\n            }, a, d)\n        }));\n    }\n    return l;\n}\nfunction kn({ id: e , left: t , top: n , width: r , height: i , matrix: s , borderOnly: o  }, a) {\n    let u = (a.borderLeftWidth || 0) + (o ? 0 : a.paddingLeft || 0), l = (a.borderTopWidth || 0) + (o ? 0 : a.paddingTop || 0), f = (a.borderRightWidth || 0) + (o ? 0 : a.paddingRight || 0), d = (a.borderBottomWidth || 0) + (o ? 0 : a.paddingBottom || 0), g = {\n        x: t + u,\n        y: n + l,\n        width: r - u - f,\n        height: i - l - d\n    };\n    return I(\"mask\", {\n        id: e\n    }, I(\"rect\", {\n        ...g,\n        fill: \"#fff\",\n        mask: a._inheritedMaskId ? `url(#${a._inheritedMaskId})` : void 0\n    }) + St({\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        props: {\n            transform: s || void 0\n        },\n        asContentMask: true,\n        maskBorderOnly: o\n    }, a));\n}\nfunction Tn({ left: e , top: t , width: n , height: r , path: i , matrix: s , id: o , currentClipPath: a , src: u  }, l) {\n    if (l.overflow !== \"hidden\" && !u) return \"\";\n    let f = kn({\n        id: `satori_om-${o}`,\n        left: e,\n        top: t,\n        width: n,\n        height: r,\n        matrix: s,\n        borderOnly: !u\n    }, l);\n    return I(\"clipPath\", {\n        id: `satori_cp-${o}`,\n        \"clip-path\": a\n    }, I(i ? \"path\" : \"rect\", {\n        x: e,\n        y: t,\n        width: n,\n        height: r,\n        d: i || void 0\n    })) + f;\n}\nasync function kt({ id: e , left: t , top: n , width: r , height: i , isInheritingTransform: s , src: o , debug: a  }, u) {\n    if (u.display === \"none\") return \"\";\n    let l = !!o, f = \"rect\", d = \"\", g = \"\", h = [], p = 1, v = \"\";\n    u.backgroundColor && h.push(u.backgroundColor), u.opacity !== void 0 && (p = +u.opacity), u.transform && (d = _t({\n        left: t,\n        top: n,\n        width: r,\n        height: i\n    }, u.transform, s, u.transformOrigin));\n    let _ = \"\";\n    if (u.backgroundImage) {\n        let J = [];\n        for(let $ = 0; $ < u.backgroundImage.length; $++){\n            let V = u.backgroundImage[$], ne = await Sn({\n                id: e + \"_\" + $,\n                width: r,\n                height: i,\n                left: t,\n                top: n\n            }, V);\n            ne && J.unshift(ne);\n        }\n        for (let $ of J)h.push(`url(#${$[0]})`), g += $[1], $[2] && (_ += $[2]);\n    }\n    let b = ut({\n        left: t,\n        top: n,\n        width: r,\n        height: i\n    }, u);\n    b && (f = \"path\");\n    let y = u._inheritedClipPathId, S = u._inheritedMaskId;\n    a && (v = I(\"rect\", {\n        x: t,\n        y: n,\n        width: r,\n        height: i,\n        fill: \"transparent\",\n        stroke: \"#ff5757\",\n        \"stroke-width\": 1,\n        transform: d || void 0,\n        \"clip-path\": y ? `url(#${y})` : void 0\n    }));\n    let { backgroundClip: E , filter: T  } = u, D = E === \"text\" ? `url(#satori_bct-${e})` : y ? `url(#${y})` : void 0, F = Tn({\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        path: b,\n        id: e,\n        matrix: d,\n        currentClipPath: D,\n        src: o\n    }, u), C = h.map((J)=>I(f, {\n            x: t,\n            y: n,\n            width: r,\n            height: i,\n            fill: J,\n            d: b || void 0,\n            transform: d || void 0,\n            \"clip-path\": D,\n            style: T ? `filter:${T}` : void 0,\n            mask: S ? `url(#${S})` : void 0\n        })).join(\"\"), H = ss({\n        id: e,\n        left: t,\n        top: n,\n        width: r,\n        height: i,\n        currentClipPathId: y,\n        borderPath: b,\n        borderType: f\n    }, u);\n    if (l) {\n        let J = (u.borderLeftWidth || 0) + (u.paddingLeft || 0), $ = (u.borderTopWidth || 0) + (u.paddingTop || 0), V = (u.borderRightWidth || 0) + (u.paddingRight || 0), ne = (u.borderBottomWidth || 0) + (u.paddingBottom || 0), Z = u.objectFit === \"contain\" ? \"xMidYMid\" : u.objectFit === \"cover\" ? \"xMidYMid slice\" : \"none\";\n        C += I(\"image\", {\n            x: t + J,\n            y: n + $,\n            width: r - J - V,\n            height: i - $ - ne,\n            href: o,\n            preserveAspectRatio: Z,\n            transform: d || void 0,\n            style: T ? `filter:${T}` : void 0,\n            \"clip-path\": `url(#satori_cp-${e})`,\n            mask: `url(#satori_om-${e})`\n        });\n    }\n    if (H) {\n        g += H[0];\n        let J = H[1];\n        C += St({\n            left: t,\n            top: n,\n            width: r,\n            height: i,\n            props: {\n                transform: d || void 0,\n                \"clip-path\": `url(#${J})`\n            }\n        }, u);\n    }\n    let U = rs({\n        width: r,\n        height: i,\n        id: e,\n        opacity: p,\n        shape: I(f, {\n            x: t,\n            y: n,\n            width: r,\n            height: i,\n            fill: \"#fff\",\n            stroke: \"#fff\",\n            \"stroke-width\": 0,\n            d: b || void 0,\n            transform: d || void 0,\n            \"clip-path\": D,\n            mask: S ? `url(#${S})` : void 0\n        })\n    }, u);\n    return (g ? I(\"defs\", {}, g) : \"\") + (U ? U[0] : \"\") + F + (p !== 1 ? `<g opacity=\"${p}\">` : \"\") + (_ || C) + (p !== 1 ? \"</g>\" : \"\") + (U ? U[1] : \"\") + v;\n}\nc();\nvar zl = new RegExp(emoji_regex_default(), \"\");\nvar On = {\n    emoji: zl,\n    symbol: /\\p{Symbol}/u,\n    math: /\\p{Math}/u\n};\nvar Tt = {\n    \"ja-JP\": /\\p{scx=Hira}|\\p{scx=Kana}|\\p{scx=Han}|[\\u3000]|[\\uFF00-\\uFFEF]/u,\n    \"ko-KR\": /\\p{scx=Hangul}/u,\n    \"zh-CN\": /\\p{scx=Han}/u,\n    \"zh-TW\": /\\p{scx=Han}/u,\n    \"zh-HK\": /\\p{scx=Han}/u,\n    \"th-TH\": /\\p{scx=Thai}/u,\n    \"bn-IN\": /\\p{scx=Bengali}/u,\n    \"ar-AR\": /\\p{scx=Arabic}/u,\n    \"ta-IN\": /\\p{scx=Tamil}/u,\n    \"ml-IN\": /\\p{scx=Malayalam}/u,\n    \"he-IL\": /\\p{scx=Hebrew}/u,\n    \"te-IN\": /\\p{scx=Telugu}/u,\n    devanagari: /\\p{scx=Devanagari}/u,\n    kannada: /\\p{scx=Kannada}/u\n};\nvar Ar = Object.keys({\n    ...Tt,\n    ...On\n});\nfunction as(e) {\n    return Ar.includes(e);\n}\nfunction us(e, t) {\n    if (t && Tt[t] && Tt[t].test(e)) return t;\n    for (let n of Object.keys(On))if (On[n].test(e)) return n;\n    for (let n of Object.keys(Tt))if (Tt[n].test(e)) return n;\n    return \"unknown\";\n}\nfunction ls(e) {\n    if (e) return Ar.find((t)=>t.toLowerCase() === e.toLowerCase() || t.toLowerCase().startsWith(e.toLowerCase()));\n}\nasync function* Ot(e, t) {\n    let n = await Fe(), { id: r , inheritedStyle: i , parent: s , font: o , debug: a , locale: u , embedFont: l = true , graphemeImages: f , canLoadAdditionalAssets: d , getTwStyles: g  } = t;\n    if (e === null || typeof e > \"u\") return yield, yield, \"\";\n    if (!fn(e) || typeof e.type == \"function\") {\n        let M;\n        if (!fn(e)) M = yn(String(e), t), yield (await M.next()).value;\n        else {\n            if (Do(e.type)) throw new Error(\"Class component is not supported.\");\n            M = Ot(e.type(e.props), t), yield (await M.next()).value;\n        }\n        await M.next();\n        let fe = yield;\n        return (await M.next(fe)).value;\n    }\n    let { type: h , props: p  } = e;\n    if (p && Fo(p)) throw new Error(\"dangerouslySetInnerHTML property is not supported. See documentation for more information https://github.com/vercel/satori#jsx.\");\n    let { style: v , children: _ , tw: b , lang: y = u  } = p || {}, S = ls(y);\n    if (b) {\n        let M = g(b, v);\n        v = Object.assign(M, v);\n    }\n    let E = n.Node.create();\n    s.insertChild(E, s.getChildCount());\n    let [T, D] = await gn(E, h, i, v, p), F = T.transform === i.transform;\n    if (F || (T.transform.__parent = i.transform), T.overflow === \"hidden\" && (D._inheritedClipPathId = `satori_cp-${r}`, D._inheritedMaskId = `satori_om-${r}`), T.backgroundClip === \"text\") {\n        let M = {\n            value: \"\"\n        };\n        D._inheritedBackgroundClipTextPath = M, T._inheritedBackgroundClipTextPath = M;\n    }\n    let C = No(_), H = [], U = 0, J = [];\n    for (let M of C){\n        let fe = Ot(M, {\n            id: r + \"-\" + U++,\n            parentStyle: T,\n            inheritedStyle: D,\n            isInheritingTransform: true,\n            parent: E,\n            font: o,\n            embedFont: l,\n            debug: a,\n            graphemeImages: f,\n            canLoadAdditionalAssets: d,\n            locale: S,\n            getTwStyles: g\n        });\n        d ? J.push(...(await fe.next()).value || []) : await fe.next(), H.push(fe);\n    }\n    yield J;\n    for (let M of H)await M.next();\n    let [$, V] = yield, { left: ne , top: Z , width: le , height: ye  } = E.getComputedLayout();\n    ne += $, Z += V;\n    let L = \"\", N = \"\", z = \"\";\n    if (h === \"img\") {\n        let M = T.__src;\n        N = await kt({\n            id: r,\n            left: ne,\n            top: Z,\n            width: le,\n            height: ye,\n            src: M,\n            isInheritingTransform: F,\n            debug: a\n        }, T);\n    } else if (h === \"svg\") {\n        let M = T.color, fe = qo(e, M);\n        N = await kt({\n            id: r,\n            left: ne,\n            top: Z,\n            width: le,\n            height: ye,\n            src: fe,\n            isInheritingTransform: F,\n            debug: a\n        }, T);\n    } else {\n        let M = v == null ? void 0 : v.display;\n        if (h === \"div\" && _ && typeof _ != \"string\" && M !== \"flex\" && M !== \"none\") throw new Error('Expected <div> to have explicit \"display: flex\" or \"display: none\" if it has more than one child node.');\n        N = await kt({\n            id: r,\n            left: ne,\n            top: Z,\n            width: le,\n            height: ye,\n            isInheritingTransform: F,\n            debug: a\n        }, T);\n    }\n    for (let M of H)L += (await M.next([\n        ne,\n        Z\n    ])).value;\n    return T._inheritedBackgroundClipTextPath && (z += I(\"clipPath\", {\n        id: `satori_bct-${r}`,\n        \"clip-path\": T._inheritedClipPathId ? `url(#${T._inheritedClipPathId})` : void 0\n    }, T._inheritedBackgroundClipTextPath.value)), z + N + L;\n}\nc();\nvar fs = \"unknown\";\nfunction Gl(e, t, [n, r], [i, s]) {\n    if (n !== i) return n ? !i || n === e ? -1 : i === e ? 1 : e === 400 && n === 500 || e === 500 && n === 400 ? -1 : e === 400 && i === 500 || e === 500 && i === 400 ? 1 : e < 400 ? n < e && i < e ? i - n : n < e ? -1 : i < e ? 1 : n - i : e < n && e < i ? n - i : e < n ? -1 : e < i ? 1 : i - n : 1;\n    if (r !== s) {\n        if (r === t) return -1;\n        if (s === t) return 1;\n    }\n    return -1;\n}\nvar Et = class {\n    constructor(t){\n        this.fonts = /* @__PURE__ */ new Map();\n        this.addFonts(t);\n    }\n    get({ name: t , weight: n , style: r  }) {\n        if (!this.fonts.has(t)) return null;\n        n === \"normal\" && (n = 400), n === \"bold\" && (n = 700), typeof n == \"string\" && (n = Number.parseInt(n, 10));\n        let i = [\n            ...this.fonts.get(t)\n        ], s = i[0];\n        for(let o = 1; o < i.length; o++){\n            let [, a, u] = s, [, l, f] = i[o];\n            Gl(n, r, [\n                a,\n                u\n            ], [\n                l,\n                f\n            ]) > 0 && (s = i[o]);\n        }\n        return s[0];\n    }\n    addFonts(t) {\n        for (let n of t){\n            let { name: r , data: i , lang: s  } = n;\n            if (s && !as(s)) throw new Error(`Invalid value for props \\`lang\\`: \"${s}\". The value must be one of the following: ${Ar.join(\", \")}.`);\n            let o = s ?? fs, a = opentype_module_default.parse(\"buffer\" in i ? i.buffer.slice(i.byteOffset, i.byteOffset + i.byteLength) : i, {\n                lowMemory: true\n            }), u = a.charToGlyphIndex;\n            a.charToGlyphIndex = (f)=>{\n                let d = u.call(a, f);\n                return d === 0 && a._trackBrokenChars && a._trackBrokenChars.push(f), d;\n            }, this.defaultFont || (this.defaultFont = a);\n            let l = `${r.toLowerCase()}_${o}`;\n            this.fonts.has(l) || this.fonts.set(l, []), this.fonts.get(l).push([\n                a,\n                n.weight,\n                n.style\n            ]);\n        }\n    }\n    getEngine(t = 16, n = 1.2, { fontFamily: r , fontWeight: i = 400 , fontStyle: s = \"normal\"  }, o) {\n        if (!this.fonts.size) throw new Error(\"No fonts are loaded. At least one font is required to calculate the layout.\");\n        r = (Array.isArray(r) ? r : [\n            r\n        ]).map((y)=>y.toLowerCase());\n        let a = [];\n        r.forEach((y)=>{\n            let S = this.get({\n                name: y,\n                weight: i,\n                style: s\n            });\n            if (S) {\n                a.push(S);\n                return;\n            }\n            let E = this.get({\n                name: y + \"_unknown\",\n                weight: i,\n                style: s\n            });\n            if (E) {\n                a.push(E);\n                return;\n            }\n        });\n        let u = Array.from(this.fonts.keys()), l = [], f = [], d = [];\n        for (let y of u)if (!r.includes(y)) if (o) {\n            let S = jl(y);\n            S ? S === o ? l.push(this.get({\n                name: y,\n                weight: i,\n                style: s\n            })) : f.push(this.get({\n                name: y,\n                weight: i,\n                style: s\n            })) : d.push(this.get({\n                name: y,\n                weight: i,\n                style: s\n            }));\n        } else d.push(this.get({\n            name: y,\n            weight: i,\n            style: s\n        }));\n        let g = /* @__PURE__ */ new Map(), h = (y, S = true)=>{\n            let E = y.charCodeAt(0);\n            if (g.has(E)) return g.get(E);\n            let T = [\n                ...a,\n                ...d,\n                ...l,\n                ...S ? f : []\n            ], D = T.find((F, C)=>!!F.charToGlyphIndex(y) || S && C === T.length - 1);\n            return D && g.set(E, D), D;\n        }, p = (y, S = false)=>{\n            var T, D;\n            return ((S ? (D = (T = y.tables) == null ? void 0 : T.os2) == null ? void 0 : D.sTypoAscender : 0) || y.ascender) / y.unitsPerEm * t;\n        }, v = (y, S = false)=>{\n            var T, D;\n            return ((S ? (D = (T = y.tables) == null ? void 0 : T.os2) == null ? void 0 : D.sTypoDescender : 0) || y.descender) / y.unitsPerEm * t;\n        }, _ = (y)=>h(y, false), b = {\n            has: (y)=>{\n                if (y === `\n`) return true;\n                let S = _(y);\n                return S ? (S._trackBrokenChars = [], S.stringToGlyphs(y), S._trackBrokenChars.length ? (S._trackBrokenChars = void 0, false) : true) : false;\n            },\n            baseline: (y, S = typeof y > \"u\" ? a[0] : h(y))=>{\n                let E = p(S, true), T = v(S, true), D = b.height(y, S), { yMax: F , yMin: C  } = S.tables.head, H = E - T, U = (F / (F - C) - 1) * H;\n                return D * ((1.2 / n + 1) / 2) + U;\n            },\n            height: (y, S = typeof y > \"u\" ? a[0] : h(y))=>(p(S) - v(S)) * (n / 1.2),\n            measure: (y, S)=>this.measure(h, y, S),\n            getSVG: (y, S)=>this.getSVG(h, y, S)\n        };\n        return b;\n    }\n    patchFontFallbackResolver(t, n) {\n        let r = [];\n        t._trackBrokenChars = r;\n        let i = t.stringToGlyphs;\n        return t.stringToGlyphs = (s, ...o)=>{\n            let a = i.call(t, s, ...o);\n            for(let u = 0; u < a.length; u++)if (a[u].unicode === void 0) {\n                let l = r.shift(), f = n(l);\n                if (f !== t) {\n                    let d = f.charToGlyph(l), g = t.unitsPerEm / f.unitsPerEm, h = new opentype_module_default.Path();\n                    h.unitsPerEm = t.unitsPerEm, h.commands = d.path.commands.map((v)=>{\n                        let _ = {\n                            ...v\n                        };\n                        for(let b in _)typeof _[b] == \"number\" && (_[b] *= g);\n                        return _;\n                    });\n                    let p = new opentype_module_default.Glyph({\n                        ...d,\n                        advanceWidth: d.advanceWidth * g,\n                        xMin: d.xMin * g,\n                        xMax: d.xMax * g,\n                        yMin: d.yMin * g,\n                        yMax: d.yMax * g,\n                        path: h\n                    });\n                    a[u] = p;\n                }\n            }\n            return a;\n        }, ()=>{\n            t.stringToGlyphs = i, t._trackBrokenChars = void 0;\n        };\n    }\n    measure(t, n, { fontSize: r , letterSpacing: i = 0  }) {\n        let s = t(n), o = this.patchFontFallbackResolver(s, t);\n        try {\n            return s.getAdvanceWidth(n, r, {\n                letterSpacing: i / r\n            });\n        } finally{\n            o();\n        }\n    }\n    getSVG(t, n, { fontSize: r , top: i , left: s , letterSpacing: o = 0  }) {\n        let a = t(n), u = this.patchFontFallbackResolver(a, t);\n        try {\n            return r === 0 ? \"\" : a.getPath(n.replace(/\\n/g, \"\"), s, i, r, {\n                letterSpacing: o / r\n            }).toPathData(1);\n        } finally{\n            u();\n        }\n    }\n};\nfunction jl(e) {\n    let t = e.split(\"_\"), n = t[t.length - 1];\n    return n === fs ? void 0 : n;\n}\nc();\nfunction Pn({ width: e , height: t , content: n  }) {\n    return I(\"svg\", {\n        width: e,\n        height: t,\n        viewBox: `0 0 ${e} ${t}`,\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, n);\n}\nc();\nc();\nvar zu = tl(xu());\nc();\nc();\nc();\nc();\nvar L0 = [\n    \"ios\",\n    \"android\",\n    \"windows\",\n    \"macos\",\n    \"web\"\n];\nfunction _u(e) {\n    return L0.includes(e);\n}\nvar C0 = [\n    \"portrait\",\n    \"landscape\"\n];\nfunction Su(e) {\n    return C0.includes(e);\n}\nvar wu;\n(function(e) {\n    e.fontSize = \"fontSize\", e.lineHeight = \"lineHeight\";\n})(wu || (wu = {}));\nvar j;\n(function(e) {\n    e.rem = \"rem\", e.em = \"em\", e.px = \"px\", e.percent = \"%\", e.vw = \"vw\", e.vh = \"vh\", e.none = \"<no-css-unit>\";\n})(j || (j = {}));\nfunction eo(e) {\n    return typeof e == \"string\";\n}\nfunction to(e) {\n    return typeof e == \"object\";\n}\nvar ro;\nfunction m(e) {\n    return {\n        kind: \"complete\",\n        style: e\n    };\n}\nfunction ie(e, t = {}) {\n    let { fractions: n  } = t;\n    if (n && e.includes(\"/\")) {\n        let [s = \"\", o = \"\"] = e.split(\"/\", 2), a = ie(s), u = ie(o);\n        return !a || !u ? null : [\n            a[0] / u[0],\n            u[1]\n        ];\n    }\n    let r = parseFloat(e);\n    if (Number.isNaN(r)) return null;\n    let i = e.match(/(([a-z]{2,}|%))$/);\n    if (!i) return [\n        r,\n        j.none\n    ];\n    switch(i == null ? void 0 : i[1]){\n        case \"rem\":\n            return [\n                r,\n                j.rem\n            ];\n        case \"px\":\n            return [\n                r,\n                j.px\n            ];\n        case \"em\":\n            return [\n                r,\n                j.em\n            ];\n        case \"%\":\n            return [\n                r,\n                j.percent\n            ];\n        case \"vw\":\n            return [\n                r,\n                j.vw\n            ];\n        case \"vh\":\n            return [\n                r,\n                j.vh\n            ];\n        default:\n            return null;\n    }\n}\nfunction $e(e, t, n = {}) {\n    let r = Re(t, n);\n    return r === null ? null : m({\n        [e]: r\n    });\n}\nfunction Vr(e, t, n) {\n    let r = Re(t);\n    return r !== null && (n[e] = r), n;\n}\nfunction Tu(e, t) {\n    let n = Re(t);\n    return n === null ? null : {\n        [e]: n\n    };\n}\nfunction Re(e, t = {}) {\n    if (e === void 0) return null;\n    let n = ie(String(e), t);\n    return n ? Ve(...n, t) : null;\n}\nfunction Ve(e, t, n = {}) {\n    let { isNegative: r , device: i  } = n;\n    switch(t){\n        case j.rem:\n            return e * 16 * (r ? -1 : 1);\n        case j.px:\n            return e * (r ? -1 : 1);\n        case j.percent:\n            return `${r ? \"-\" : \"\"}${e}%`;\n        case j.none:\n            return e * (r ? -1 : 1);\n        case j.vw:\n            return i != null && i.windowDimensions ? i.windowDimensions.width * (e / 100) : (ve(\"`vw` CSS unit requires configuration with `useDeviceContext()`\"), null);\n        case j.vh:\n            return i != null && i.windowDimensions ? i.windowDimensions.height * (e / 100) : (ve(\"`vh` CSS unit requires configuration with `useDeviceContext()`\"), null);\n        default:\n            return null;\n    }\n}\nfunction no(e) {\n    let t = ie(e);\n    if (!t) return null;\n    let [n, r] = t;\n    switch(r){\n        case j.rem:\n            return n * 16;\n        case j.px:\n            return n;\n        default:\n            return null;\n    }\n}\nvar D0 = {\n    t: \"Top\",\n    tr: \"TopRight\",\n    tl: \"TopLeft\",\n    b: \"Bottom\",\n    br: \"BottomRight\",\n    bl: \"BottomLeft\",\n    l: \"Left\",\n    r: \"Right\",\n    x: \"Horizontal\",\n    y: \"Vertical\"\n};\nfunction io(e) {\n    return D0[e ?? \"\"] || \"All\";\n}\nfunction oo(e) {\n    let t = \"All\";\n    return [\n        e.replace(/^-(t|b|r|l|tr|tl|br|bl)(-|$)/, (r, i)=>(t = io(i), \"\")),\n        t\n    ];\n}\nfunction rt(e, t = {}) {\n    if (e.includes(\"/\")) {\n        let n = ku(e, {\n            ...t,\n            fractions: true\n        });\n        if (n) return n;\n    }\n    return e[0] === \"[\" && (e = e.slice(1, -1)), ku(e, t);\n}\nfunction Pe(e, t, n = {}) {\n    let r = rt(t, n);\n    return r === null ? null : m({\n        [e]: r\n    });\n}\nfunction ku(e, t = {}) {\n    if (e === \"px\") return 1;\n    let n = ie(e, t);\n    if (!n) return null;\n    let [r, i] = n;\n    return t.fractions && (i = j.percent, r *= 100), i === j.none && (r = r / 4, i = j.rem), Ve(r, i, t);\n}\nfunction F0(...e) {\n    console.warn(...e);\n}\nfunction N0(...e) {}\nvar ve = typeof process > \"u\" || ((ro = process == null ? void 0 : process.env) === null || ro === void 0 ? void 0 : ro.JEST_WORKER_ID) === void 0 ? F0 : N0;\nvar M0 = [\n    [\n        \"aspect-square\",\n        m({\n            aspectRatio: 1\n        })\n    ],\n    [\n        \"aspect-video\",\n        m({\n            aspectRatio: 16 / 9\n        })\n    ],\n    [\n        \"items-center\",\n        m({\n            alignItems: \"center\"\n        })\n    ],\n    [\n        \"items-start\",\n        m({\n            alignItems: \"flex-start\"\n        })\n    ],\n    [\n        \"items-end\",\n        m({\n            alignItems: \"flex-end\"\n        })\n    ],\n    [\n        \"items-baseline\",\n        m({\n            alignItems: \"baseline\"\n        })\n    ],\n    [\n        \"items-stretch\",\n        m({\n            alignItems: \"stretch\"\n        })\n    ],\n    [\n        \"justify-start\",\n        m({\n            justifyContent: \"flex-start\"\n        })\n    ],\n    [\n        \"justify-end\",\n        m({\n            justifyContent: \"flex-end\"\n        })\n    ],\n    [\n        \"justify-center\",\n        m({\n            justifyContent: \"center\"\n        })\n    ],\n    [\n        \"justify-between\",\n        m({\n            justifyContent: \"space-between\"\n        })\n    ],\n    [\n        \"justify-around\",\n        m({\n            justifyContent: \"space-around\"\n        })\n    ],\n    [\n        \"justify-evenly\",\n        m({\n            justifyContent: \"space-evenly\"\n        })\n    ],\n    [\n        \"content-start\",\n        m({\n            alignContent: \"flex-start\"\n        })\n    ],\n    [\n        \"content-end\",\n        m({\n            alignContent: \"flex-end\"\n        })\n    ],\n    [\n        \"content-between\",\n        m({\n            alignContent: \"space-between\"\n        })\n    ],\n    [\n        \"content-around\",\n        m({\n            alignContent: \"space-around\"\n        })\n    ],\n    [\n        \"content-stretch\",\n        m({\n            alignContent: \"stretch\"\n        })\n    ],\n    [\n        \"content-center\",\n        m({\n            alignContent: \"center\"\n        })\n    ],\n    [\n        \"self-auto\",\n        m({\n            alignSelf: \"auto\"\n        })\n    ],\n    [\n        \"self-start\",\n        m({\n            alignSelf: \"flex-start\"\n        })\n    ],\n    [\n        \"self-end\",\n        m({\n            alignSelf: \"flex-end\"\n        })\n    ],\n    [\n        \"self-center\",\n        m({\n            alignSelf: \"center\"\n        })\n    ],\n    [\n        \"self-stretch\",\n        m({\n            alignSelf: \"stretch\"\n        })\n    ],\n    [\n        \"self-baseline\",\n        m({\n            alignSelf: \"baseline\"\n        })\n    ],\n    [\n        \"direction-inherit\",\n        m({\n            direction: \"inherit\"\n        })\n    ],\n    [\n        \"direction-ltr\",\n        m({\n            direction: \"ltr\"\n        })\n    ],\n    [\n        \"direction-rtl\",\n        m({\n            direction: \"rtl\"\n        })\n    ],\n    [\n        \"hidden\",\n        m({\n            display: \"none\"\n        })\n    ],\n    [\n        \"flex\",\n        m({\n            display: \"flex\"\n        })\n    ],\n    [\n        \"flex-row\",\n        m({\n            flexDirection: \"row\"\n        })\n    ],\n    [\n        \"flex-row-reverse\",\n        m({\n            flexDirection: \"row-reverse\"\n        })\n    ],\n    [\n        \"flex-col\",\n        m({\n            flexDirection: \"column\"\n        })\n    ],\n    [\n        \"flex-col-reverse\",\n        m({\n            flexDirection: \"column-reverse\"\n        })\n    ],\n    [\n        \"flex-wrap\",\n        m({\n            flexWrap: \"wrap\"\n        })\n    ],\n    [\n        \"flex-wrap-reverse\",\n        m({\n            flexWrap: \"wrap-reverse\"\n        })\n    ],\n    [\n        \"flex-nowrap\",\n        m({\n            flexWrap: \"nowrap\"\n        })\n    ],\n    [\n        \"flex-auto\",\n        m({\n            flexGrow: 1,\n            flexShrink: 1,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"flex-initial\",\n        m({\n            flexGrow: 0,\n            flexShrink: 1,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"flex-none\",\n        m({\n            flexGrow: 0,\n            flexShrink: 0,\n            flexBasis: \"auto\"\n        })\n    ],\n    [\n        \"overflow-hidden\",\n        m({\n            overflow: \"hidden\"\n        })\n    ],\n    [\n        \"overflow-visible\",\n        m({\n            overflow: \"visible\"\n        })\n    ],\n    [\n        \"overflow-scroll\",\n        m({\n            overflow: \"scroll\"\n        })\n    ],\n    [\n        \"absolute\",\n        m({\n            position: \"absolute\"\n        })\n    ],\n    [\n        \"relative\",\n        m({\n            position: \"relative\"\n        })\n    ],\n    [\n        \"italic\",\n        m({\n            fontStyle: \"italic\"\n        })\n    ],\n    [\n        \"not-italic\",\n        m({\n            fontStyle: \"normal\"\n        })\n    ],\n    [\n        \"oldstyle-nums\",\n        ir(\"oldstyle-nums\")\n    ],\n    [\n        \"small-caps\",\n        ir(\"small-caps\")\n    ],\n    [\n        \"lining-nums\",\n        ir(\"lining-nums\")\n    ],\n    [\n        \"tabular-nums\",\n        ir(\"tabular-nums\")\n    ],\n    [\n        \"proportional-nums\",\n        ir(\"proportional-nums\")\n    ],\n    [\n        \"font-thin\",\n        m({\n            fontWeight: \"100\"\n        })\n    ],\n    [\n        \"font-100\",\n        m({\n            fontWeight: \"100\"\n        })\n    ],\n    [\n        \"font-extralight\",\n        m({\n            fontWeight: \"200\"\n        })\n    ],\n    [\n        \"font-200\",\n        m({\n            fontWeight: \"200\"\n        })\n    ],\n    [\n        \"font-light\",\n        m({\n            fontWeight: \"300\"\n        })\n    ],\n    [\n        \"font-300\",\n        m({\n            fontWeight: \"300\"\n        })\n    ],\n    [\n        \"font-normal\",\n        m({\n            fontWeight: \"normal\"\n        })\n    ],\n    [\n        \"font-400\",\n        m({\n            fontWeight: \"400\"\n        })\n    ],\n    [\n        \"font-medium\",\n        m({\n            fontWeight: \"500\"\n        })\n    ],\n    [\n        \"font-500\",\n        m({\n            fontWeight: \"500\"\n        })\n    ],\n    [\n        \"font-semibold\",\n        m({\n            fontWeight: \"600\"\n        })\n    ],\n    [\n        \"font-600\",\n        m({\n            fontWeight: \"600\"\n        })\n    ],\n    [\n        \"font-bold\",\n        m({\n            fontWeight: \"bold\"\n        })\n    ],\n    [\n        \"font-700\",\n        m({\n            fontWeight: \"700\"\n        })\n    ],\n    [\n        \"font-extrabold\",\n        m({\n            fontWeight: \"800\"\n        })\n    ],\n    [\n        \"font-800\",\n        m({\n            fontWeight: \"800\"\n        })\n    ],\n    [\n        \"font-black\",\n        m({\n            fontWeight: \"900\"\n        })\n    ],\n    [\n        \"font-900\",\n        m({\n            fontWeight: \"900\"\n        })\n    ],\n    [\n        \"include-font-padding\",\n        m({\n            includeFontPadding: true\n        })\n    ],\n    [\n        \"remove-font-padding\",\n        m({\n            includeFontPadding: false\n        })\n    ],\n    [\n        \"max-w-none\",\n        m({\n            maxWidth: \"99999%\"\n        })\n    ],\n    [\n        \"text-left\",\n        m({\n            textAlign: \"left\"\n        })\n    ],\n    [\n        \"text-center\",\n        m({\n            textAlign: \"center\"\n        })\n    ],\n    [\n        \"text-right\",\n        m({\n            textAlign: \"right\"\n        })\n    ],\n    [\n        \"text-justify\",\n        m({\n            textAlign: \"justify\"\n        })\n    ],\n    [\n        \"text-auto\",\n        m({\n            textAlign: \"auto\"\n        })\n    ],\n    [\n        \"underline\",\n        m({\n            textDecorationLine: \"underline\"\n        })\n    ],\n    [\n        \"line-through\",\n        m({\n            textDecorationLine: \"line-through\"\n        })\n    ],\n    [\n        \"no-underline\",\n        m({\n            textDecorationLine: \"none\"\n        })\n    ],\n    [\n        \"uppercase\",\n        m({\n            textTransform: \"uppercase\"\n        })\n    ],\n    [\n        \"lowercase\",\n        m({\n            textTransform: \"lowercase\"\n        })\n    ],\n    [\n        \"capitalize\",\n        m({\n            textTransform: \"capitalize\"\n        })\n    ],\n    [\n        \"normal-case\",\n        m({\n            textTransform: \"none\"\n        })\n    ],\n    [\n        \"w-auto\",\n        m({\n            width: \"auto\"\n        })\n    ],\n    [\n        \"h-auto\",\n        m({\n            height: \"auto\"\n        })\n    ],\n    [\n        \"shadow-sm\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 1,\n            shadowOpacity: 0.025,\n            elevation: 1\n        })\n    ],\n    [\n        \"shadow\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 1,\n            shadowOpacity: 0.075,\n            elevation: 2\n        })\n    ],\n    [\n        \"shadow-md\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 3,\n            shadowOpacity: 0.125,\n            elevation: 3\n        })\n    ],\n    [\n        \"shadow-lg\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.15,\n            shadowRadius: 8,\n            elevation: 8\n        })\n    ],\n    [\n        \"shadow-xl\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.19,\n            shadowRadius: 20,\n            elevation: 12\n        })\n    ],\n    [\n        \"shadow-2xl\",\n        m({\n            shadowOffset: {\n                width: 1,\n                height: 1\n            },\n            shadowColor: \"#000\",\n            shadowOpacity: 0.25,\n            shadowRadius: 30,\n            elevation: 16\n        })\n    ],\n    [\n        \"shadow-none\",\n        m({\n            shadowOffset: {\n                width: 0,\n                height: 0\n            },\n            shadowColor: \"#000\",\n            shadowRadius: 0,\n            shadowOpacity: 0,\n            elevation: 0\n        })\n    ]\n];\nvar so = M0;\nfunction ir(e) {\n    return {\n        kind: \"dependent\",\n        complete (t) {\n            (!t.fontVariant || !Array.isArray(t.fontVariant)) && (t.fontVariant = []), t.fontVariant.push(e);\n        }\n    };\n}\nvar or = class {\n    constructor(t){\n        this.ir = new Map(so), this.styles = /* @__PURE__ */ new Map(), this.prefixes = /* @__PURE__ */ new Map(), this.ir = new Map([\n            ...so,\n            ...t ?? []\n        ]);\n    }\n    getStyle(t) {\n        return this.styles.get(t);\n    }\n    setStyle(t, n) {\n        this.styles.set(t, n);\n    }\n    getIr(t) {\n        return this.ir.get(t);\n    }\n    setIr(t, n) {\n        this.ir.set(t, n);\n    }\n    getPrefixMatch(t) {\n        return this.prefixes.get(t);\n    }\n    setPrefixMatch(t, n) {\n        this.prefixes.set(t, n);\n    }\n};\nc();\nc();\nfunction ao(e, t, n = {}) {\n    let r = t == null ? void 0 : t[e];\n    if (!r) return Pe(\"fontSize\", e, n);\n    if (typeof r == \"string\") return $e(\"fontSize\", r);\n    let i = {}, [s, o] = r, a = Tu(\"fontSize\", s);\n    if (a && (i = a), typeof o == \"string\") return m(Vr(\"lineHeight\", Ou(o, i), i));\n    let { lineHeight: u , letterSpacing: l  } = o;\n    return u && Vr(\"lineHeight\", Ou(u, i), i), l && Vr(\"letterSpacing\", l, i), m(i);\n}\nfunction Ou(e, t) {\n    let n = ie(e);\n    if (n) {\n        let [r, i] = n;\n        if ((i === j.none || i === j.em) && typeof t.fontSize == \"number\") return t.fontSize * r;\n    }\n    return e;\n}\nc();\nfunction uo(e, t) {\n    var n;\n    let r = (n = t == null ? void 0 : t[e]) !== null && n !== void 0 ? n : e.startsWith(\"[\") ? e.slice(1, -1) : e, i = ie(r);\n    if (!i) return null;\n    let [s, o] = i;\n    if (o === j.none) return {\n        kind: \"dependent\",\n        complete (u) {\n            if (typeof u.fontSize != \"number\") return \"relative line-height utilities require that font-size be set\";\n            u.lineHeight = u.fontSize * s;\n        }\n    };\n    let a = Ve(s, o);\n    return a !== null ? m({\n        lineHeight: a\n    }) : null;\n}\nc();\nfunction lo(e, t, n, r, i) {\n    let s = \"\";\n    if (r[0] === \"[\") s = r.slice(1, -1);\n    else {\n        let l = i == null ? void 0 : i[r];\n        if (l) s = l;\n        else {\n            let f = rt(r);\n            return f && typeof f == \"number\" ? Eu(f, j.px, t, e) : null;\n        }\n    }\n    if (s === \"auto\") return Pu(t, e, \"auto\");\n    let o = ie(s);\n    if (!o) return null;\n    let [a, u] = o;\n    return n && (a = -a), Eu(a, u, t, e);\n}\nfunction Eu(e, t, n, r) {\n    let i = Ve(e, t);\n    return i === null ? null : Pu(n, r, i);\n}\nfunction Pu(e, t, n) {\n    switch(e){\n        case \"All\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Top`]: n,\n                    [`${t}Right`]: n,\n                    [`${t}Bottom`]: n,\n                    [`${t}Left`]: n\n                }\n            };\n        case \"Bottom\":\n        case \"Top\":\n        case \"Left\":\n        case \"Right\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}${e}`]: n\n                }\n            };\n        case \"Vertical\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Top`]: n,\n                    [`${t}Bottom`]: n\n                }\n            };\n        case \"Horizontal\":\n            return {\n                kind: \"complete\",\n                style: {\n                    [`${t}Left`]: n,\n                    [`${t}Right`]: n\n                }\n            };\n        default:\n            return null;\n    }\n}\nc();\nfunction fo(e) {\n    if (!e) return {};\n    let t = Object.entries(e).reduce((i, [s, o])=>{\n        let a = [\n            0,\n            1 / 0,\n            0\n        ], u = typeof o == \"string\" ? {\n            min: o\n        } : o, l = u.min ? no(u.min) : 0;\n        l === null ? ve(`invalid screen config value: ${s}->min: ${u.min}`) : a[0] = l;\n        let f = u.max ? no(u.max) : 1 / 0;\n        return f === null ? ve(`invalid screen config value: ${s}->max: ${u.max}`) : a[1] = f, i[s] = a, i;\n    }, {}), n = Object.values(t);\n    n.sort((i, s)=>{\n        let [o, a] = i, [u, l] = s;\n        return a === 1 / 0 || l === 1 / 0 ? o - u : a - l;\n    });\n    let r = 0;\n    return n.forEach((i)=>i[2] = r++), t;\n}\nc();\nfunction co(e, t) {\n    let n = t == null ? void 0 : t[e];\n    if (!n) return null;\n    if (typeof n == \"string\") return m({\n        fontFamily: n\n    });\n    let r = n[0];\n    return r ? m({\n        fontFamily: r\n    }) : null;\n}\nc();\nfunction nt(e, t, n) {\n    if (!n) return null;\n    let r;\n    t.includes(\"/\") && ([t = \"\", r] = t.split(\"/\", 2));\n    let i = \"\";\n    if (t.startsWith(\"[#\") || t.startsWith(\"[rgb\") ? i = t.slice(1, -1) : i = Ru(t, n), !i) return null;\n    if (r) {\n        let s = Number(r);\n        if (!Number.isNaN(s)) return i = Au(i, s / 100), m({\n            [Yr[e].color]: i\n        });\n    }\n    return {\n        kind: \"dependent\",\n        complete (s) {\n            let o = Yr[e].opacity, a = s[o];\n            typeof a == \"number\" && (i = Au(i, a)), s[Yr[e].color] = i;\n        }\n    };\n}\nfunction sr(e, t) {\n    let n = parseInt(t, 10);\n    if (Number.isNaN(n)) return null;\n    let r = n / 100, i = {\n        [Yr[e].opacity]: r\n    };\n    return {\n        kind: \"complete\",\n        style: i\n    };\n}\nfunction Au(e, t) {\n    return e.startsWith(\"#\") ? e = $0(e) : e.startsWith(\"rgb(\") && (e = e.replace(/^rgb\\(/, \"rgba(\").replace(/\\)$/, \", 1)\")), e.replace(/, ?\\d*\\.?(\\d+)\\)$/, `, ${t})`);\n}\nfunction Iu(e) {\n    for(let t in e)t.startsWith(\"__opacity_\") && delete e[t];\n}\nvar Yr = {\n    bg: {\n        opacity: \"__opacity_bg\",\n        color: \"backgroundColor\"\n    },\n    text: {\n        opacity: \"__opacity_text\",\n        color: \"color\"\n    },\n    border: {\n        opacity: \"__opacity_border\",\n        color: \"borderColor\"\n    },\n    borderTop: {\n        opacity: \"__opacity_border\",\n        color: \"borderTopColor\"\n    },\n    borderBottom: {\n        opacity: \"__opacity_border\",\n        color: \"borderBottomColor\"\n    },\n    borderLeft: {\n        opacity: \"__opacity_border\",\n        color: \"borderLeftColor\"\n    },\n    borderRight: {\n        opacity: \"__opacity_border\",\n        color: \"borderRightColor\"\n    },\n    shadow: {\n        opacity: \"__opacity_shadow\",\n        color: \"shadowColor\"\n    },\n    tint: {\n        opacity: \"__opacity_tint\",\n        color: \"tintColor\"\n    }\n};\nfunction $0(e) {\n    let t = e;\n    e = e.replace(W0, (o, a, u, l)=>a + a + u + u + l + l);\n    let n = q0.exec(e);\n    if (!n) return ve(`invalid config hex color value: ${t}`), \"rgba(0, 0, 0, 1)\";\n    let r = parseInt(n[1], 16), i = parseInt(n[2], 16), s = parseInt(n[3], 16);\n    return `rgba(${r}, ${i}, ${s}, 1)`;\n}\nfunction Ru(e, t) {\n    let n = t[e];\n    if (eo(n)) return n;\n    if (to(n) && eo(n.DEFAULT)) return n.DEFAULT;\n    let [r = \"\", ...i] = e.split(\"-\");\n    for(; r !== e;){\n        let s = t[r];\n        if (to(s)) return Ru(i.join(\"-\"), s);\n        if (i.length === 0) return \"\";\n        r = `${r}-${i.shift()}`;\n    }\n    return \"\";\n}\nvar W0 = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar q0 = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\nc();\nfunction Cu(e, t) {\n    let [n, r] = oo(e);\n    if (n.match(/^(-?(\\d)+)?$/)) return B0(n, r, t == null ? void 0 : t.borderWidth);\n    if (n = n.replace(/^-/, \"\"), [\n        \"dashed\",\n        \"solid\",\n        \"dotted\"\n    ].includes(n)) return m({\n        borderStyle: n\n    });\n    let s = \"border\";\n    switch(r){\n        case \"Bottom\":\n            s = \"borderBottom\";\n            break;\n        case \"Top\":\n            s = \"borderTop\";\n            break;\n        case \"Left\":\n            s = \"borderLeft\";\n            break;\n        case \"Right\":\n            s = \"borderRight\";\n            break;\n    }\n    let o = nt(s, n, t == null ? void 0 : t.borderColor);\n    if (o) return o;\n    let a = `border${r === \"All\" ? \"\" : r}Width`;\n    n = n.replace(/^-/, \"\");\n    let u = n.slice(1, -1), l = Pe(a, u);\n    return typeof (l == null ? void 0 : l.style[a]) != \"number\" ? null : l;\n}\nfunction B0(e, t, n) {\n    if (!n) return null;\n    e = e.replace(/^-/, \"\");\n    let i = n[e === \"\" ? \"DEFAULT\" : e];\n    if (i === void 0) return null;\n    let s = `border${t === \"All\" ? \"\" : t}Width`;\n    return $e(s, i);\n}\nfunction Du(e, t) {\n    if (!t) return null;\n    let [n, r] = oo(e);\n    n = n.replace(/^-/, \"\"), n === \"\" && (n = \"DEFAULT\");\n    let i = `border${r === \"All\" ? \"\" : r}Radius`, s = t[n];\n    if (s) return Lu($e(i, s));\n    let o = Pe(i, n);\n    return typeof (o == null ? void 0 : o.style[i]) != \"number\" ? null : Lu(o);\n}\nfunction Lu(e) {\n    if ((e == null ? void 0 : e.kind) !== \"complete\") return e;\n    let t = e.style.borderTopRadius;\n    t !== void 0 && (e.style.borderTopLeftRadius = t, e.style.borderTopRightRadius = t, delete e.style.borderTopRadius);\n    let n = e.style.borderBottomRadius;\n    n !== void 0 && (e.style.borderBottomLeftRadius = n, e.style.borderBottomRightRadius = n, delete e.style.borderBottomRadius);\n    let r = e.style.borderLeftRadius;\n    r !== void 0 && (e.style.borderBottomLeftRadius = r, e.style.borderTopLeftRadius = r, delete e.style.borderLeftRadius);\n    let i = e.style.borderRightRadius;\n    return i !== void 0 && (e.style.borderBottomRightRadius = i, e.style.borderTopRightRadius = i, delete e.style.borderRightRadius), e;\n}\nc();\nfunction pt(e, t, n, r) {\n    let i = null;\n    e === \"inset\" && (t = t.replace(/^(x|y)-/, (a, u)=>(i = u === \"x\" ? \"x\" : \"y\", \"\")));\n    let s = r == null ? void 0 : r[t];\n    if (s) {\n        let a = Re(s, {\n            isNegative: n\n        });\n        if (a !== null) return Fu(e, i, a);\n    }\n    let o = rt(t, {\n        isNegative: n\n    });\n    return o !== null ? Fu(e, i, o) : null;\n}\nfunction Fu(e, t, n) {\n    if (e !== \"inset\") return m({\n        [e]: n\n    });\n    switch(t){\n        case null:\n            return m({\n                top: n,\n                left: n,\n                right: n,\n                bottom: n\n            });\n        case \"y\":\n            return m({\n                top: n,\n                bottom: n\n            });\n        case \"x\":\n            return m({\n                left: n,\n                right: n\n            });\n    }\n}\nc();\nfunction ar(e, t, n) {\n    var r;\n    t = t.replace(/^-/, \"\");\n    let i = t === \"\" ? \"DEFAULT\" : t, s = Number((r = n == null ? void 0 : n[i]) !== null && r !== void 0 ? r : t);\n    return Number.isNaN(s) ? null : m({\n        [`flex${e}`]: s\n    });\n}\nfunction Nu(e, t) {\n    var n, r;\n    if (e = (t == null ? void 0 : t[e]) || e, [\n        \"min-content\",\n        \"revert\",\n        \"unset\"\n    ].includes(e)) return null;\n    if (e.match(/^\\d+(\\.\\d+)?$/)) return m({\n        flexGrow: Number(e),\n        flexBasis: \"0%\"\n    });\n    let i = e.match(/^(\\d+)\\s+(\\d+)$/);\n    if (i) return m({\n        flexGrow: Number(i[1]),\n        flexShrink: Number(i[2])\n    });\n    if (i = e.match(/^(\\d+)\\s+([^ ]+)$/), i) {\n        let s = Re((n = i[2]) !== null && n !== void 0 ? n : \"\");\n        return s ? m({\n            flexGrow: Number(i[1]),\n            flexBasis: s\n        }) : null;\n    }\n    if (i = e.match(/^(\\d+)\\s+(\\d+)\\s+(.+)$/), i) {\n        let s = Re((r = i[3]) !== null && r !== void 0 ? r : \"\");\n        return s ? m({\n            flexGrow: Number(i[1]),\n            flexShrink: Number(i[2]),\n            flexBasis: s\n        }) : null;\n    }\n    return null;\n}\nc();\nfunction po(e, t, n = {}, r) {\n    let i = r == null ? void 0 : r[t];\n    return i !== void 0 ? $e(e, i, n) : Pe(e, t, n);\n}\nfunction ur(e, t, n = {}, r) {\n    let i = Re(r == null ? void 0 : r[t], n);\n    return i ? m({\n        [e]: i\n    }) : (t === \"screen\" && (t = e.includes(\"Width\") ? \"100vw\" : \"100vh\"), Pe(e, t, n));\n}\nc();\nfunction Mu(e, t, n) {\n    let r = n == null ? void 0 : n[e];\n    if (r) {\n        let i = ie(r, {\n            isNegative: t\n        });\n        if (!i) return null;\n        let [s, o] = i;\n        if (o === j.em) return U0(s);\n        if (o === j.percent) return ve(\"percentage-based letter-spacing configuration currently unsupported, switch to `em`s, or open an issue if you'd like to see support added.\"), null;\n        let a = Ve(s, o, {\n            isNegative: t\n        });\n        return a !== null ? m({\n            letterSpacing: a\n        }) : null;\n    }\n    return Pe(\"letterSpacing\", e, {\n        isNegative: t\n    });\n}\nfunction U0(e) {\n    return {\n        kind: \"dependent\",\n        complete (t) {\n            let n = t.fontSize;\n            if (typeof n != \"number\" || Number.isNaN(n)) return \"tracking-X relative letter spacing classes require font-size to be set\";\n            t.letterSpacing = Math.round((e * n + Number.EPSILON) * 100) / 100;\n        }\n    };\n}\nc();\nfunction $u(e, t) {\n    let n = t == null ? void 0 : t[e];\n    if (n) {\n        let i = ie(String(n));\n        if (i) return m({\n            opacity: i[0]\n        });\n    }\n    let r = ie(e);\n    return r ? m({\n        opacity: r[0] / 100\n    }) : null;\n}\nc();\nfunction Wu(e) {\n    let t = parseInt(e, 10);\n    return Number.isNaN(t) ? null : {\n        kind: \"complete\",\n        style: {\n            shadowOpacity: t / 100\n        }\n    };\n}\nfunction qu(e) {\n    if (e.includes(\"/\")) {\n        let [n = \"\", r = \"\"] = e.split(\"/\", 2), i = ho(n), s = ho(r);\n        return i === null || s === null ? null : {\n            kind: \"complete\",\n            style: {\n                shadowOffset: {\n                    width: i,\n                    height: s\n                }\n            }\n        };\n    }\n    let t = ho(e);\n    return t === null ? null : {\n        kind: \"complete\",\n        style: {\n            shadowOffset: {\n                width: t,\n                height: t\n            }\n        }\n    };\n}\nfunction ho(e) {\n    let t = rt(e);\n    return typeof t == \"number\" ? t : null;\n}\nvar ht = class {\n    constructor(t, n = {}, r, i, s){\n        var o, a, u, l, f, d;\n        this.config = n, this.cache = r, this.position = 0, this.isNull = false, this.isNegative = false, this.context = {}, this.context.device = i;\n        let g = t.trim().split(\":\"), h = [];\n        g.length === 1 ? this.string = t : (this.string = (o = g.pop()) !== null && o !== void 0 ? o : \"\", h = g), this.char = this.string[0];\n        let p = fo((a = this.config.theme) === null || a === void 0 ? void 0 : a.screens);\n        for (let v of h)if (p[v]) {\n            let _ = (u = p[v]) === null || u === void 0 ? void 0 : u[2];\n            _ !== void 0 && (this.order = ((l = this.order) !== null && l !== void 0 ? l : 0) + _);\n            let b = (f = i.windowDimensions) === null || f === void 0 ? void 0 : f.width;\n            if (b) {\n                let [y, S] = (d = p[v]) !== null && d !== void 0 ? d : [\n                    0,\n                    0\n                ];\n                (b <= y || b > S) && (this.isNull = true);\n            } else this.isNull = true;\n        } else _u(v) ? this.isNull = v !== s : Su(v) ? i.windowDimensions ? (i.windowDimensions.width > i.windowDimensions.height ? \"landscape\" : \"portrait\") !== v ? this.isNull = true : this.incrementOrder() : this.isNull = true : v === \"retina\" ? i.pixelDensity === 2 ? this.incrementOrder() : this.isNull = true : v === \"dark\" ? i.colorScheme !== \"dark\" ? this.isNull = true : this.incrementOrder() : this.handlePossibleArbitraryBreakpointPrefix(v) || (this.isNull = true);\n    }\n    parse() {\n        if (this.isNull) return {\n            kind: \"null\"\n        };\n        let t = this.cache.getIr(this.rest);\n        if (t) return t;\n        this.parseIsNegative();\n        let n = this.parseUtility();\n        return n ? this.order !== void 0 ? {\n            kind: \"ordered\",\n            order: this.order,\n            styleIr: n\n        } : n : {\n            kind: \"null\"\n        };\n    }\n    parseUtility() {\n        var t, n, r, i, s;\n        let o = this.config.theme, a = null;\n        switch(this.char){\n            case \"m\":\n            case \"p\":\n                {\n                    let u = this.peekSlice(1, 3).match(/^(t|b|r|l|x|y)?-/);\n                    if (u) {\n                        let l = this.char === \"m\" ? \"margin\" : \"padding\";\n                        this.advance(((n = (t = u[0]) === null || t === void 0 ? void 0 : t.length) !== null && n !== void 0 ? n : 0) + 1);\n                        let f = io(u[1]), d = lo(l, f, this.isNegative, this.rest, (r = this.config.theme) === null || r === void 0 ? void 0 : r[l]);\n                        if (d) return d;\n                    }\n                }\n        }\n        if (this.consumePeeked(\"h-\") && (a = po(\"height\", this.rest, this.context, o == null ? void 0 : o.height), a) || this.consumePeeked(\"w-\") && (a = po(\"width\", this.rest, this.context, o == null ? void 0 : o.width), a) || this.consumePeeked(\"min-w-\") && (a = ur(\"minWidth\", this.rest, this.context, o == null ? void 0 : o.minWidth), a) || this.consumePeeked(\"min-h-\") && (a = ur(\"minHeight\", this.rest, this.context, o == null ? void 0 : o.minHeight), a) || this.consumePeeked(\"max-w-\") && (a = ur(\"maxWidth\", this.rest, this.context, o == null ? void 0 : o.maxWidth), a) || this.consumePeeked(\"max-h-\") && (a = ur(\"maxHeight\", this.rest, this.context, o == null ? void 0 : o.maxHeight), a) || this.consumePeeked(\"leading-\") && (a = uo(this.rest, o == null ? void 0 : o.lineHeight), a) || this.consumePeeked(\"text-\") && (a = ao(this.rest, o == null ? void 0 : o.fontSize, this.context), a || (a = nt(\"text\", this.rest, o == null ? void 0 : o.textColor), a) || this.consumePeeked(\"opacity-\") && (a = sr(\"text\", this.rest), a)) || this.consumePeeked(\"font-\") && (a = co(this.rest, o == null ? void 0 : o.fontFamily), a) || this.consumePeeked(\"aspect-\") && (this.consumePeeked(\"ratio-\") && ve(\"`aspect-ratio-{ratio}` is deprecated, use `aspect-{ratio}` instead\"), a = $e(\"aspectRatio\", this.rest, {\n            fractions: true\n        }), a) || this.consumePeeked(\"tint-\") && (a = nt(\"tint\", this.rest, o == null ? void 0 : o.colors), a) || this.consumePeeked(\"bg-\") && (a = nt(\"bg\", this.rest, o == null ? void 0 : o.backgroundColor), a || this.consumePeeked(\"opacity-\") && (a = sr(\"bg\", this.rest), a)) || this.consumePeeked(\"border\") && (a = Cu(this.rest, o), a || this.consumePeeked(\"-opacity-\") && (a = sr(\"border\", this.rest), a)) || this.consumePeeked(\"rounded\") && (a = Du(this.rest, o == null ? void 0 : o.borderRadius), a) || this.consumePeeked(\"bottom-\") && (a = pt(\"bottom\", this.rest, this.isNegative, o == null ? void 0 : o.inset), a) || this.consumePeeked(\"top-\") && (a = pt(\"top\", this.rest, this.isNegative, o == null ? void 0 : o.inset), a) || this.consumePeeked(\"left-\") && (a = pt(\"left\", this.rest, this.isNegative, o == null ? void 0 : o.inset), a) || this.consumePeeked(\"right-\") && (a = pt(\"right\", this.rest, this.isNegative, o == null ? void 0 : o.inset), a) || this.consumePeeked(\"inset-\") && (a = pt(\"inset\", this.rest, this.isNegative, o == null ? void 0 : o.inset), a) || this.consumePeeked(\"flex-\") && (this.consumePeeked(\"grow\") ? a = ar(\"Grow\", this.rest, o == null ? void 0 : o.flexGrow) : this.consumePeeked(\"shrink\") ? a = ar(\"Shrink\", this.rest, o == null ? void 0 : o.flexShrink) : a = Nu(this.rest, o == null ? void 0 : o.flex), a) || this.consumePeeked(\"grow\") && (a = ar(\"Grow\", this.rest, o == null ? void 0 : o.flexGrow), a) || this.consumePeeked(\"shrink\") && (a = ar(\"Shrink\", this.rest, o == null ? void 0 : o.flexShrink), a) || this.consumePeeked(\"shadow-color-opacity-\") && (a = sr(\"shadow\", this.rest), a) || this.consumePeeked(\"shadow-opacity-\") && (a = Wu(this.rest), a) || this.consumePeeked(\"shadow-offset-\") && (a = qu(this.rest), a) || this.consumePeeked(\"shadow-radius-\") && (a = Pe(\"shadowRadius\", this.rest), a) || this.consumePeeked(\"shadow-\") && (a = nt(\"shadow\", this.rest, o == null ? void 0 : o.colors), a)) return a;\n        if (this.consumePeeked(\"elevation-\")) {\n            let u = parseInt(this.rest, 10);\n            if (!Number.isNaN(u)) return m({\n                elevation: u\n            });\n        }\n        if (this.consumePeeked(\"opacity-\") && (a = $u(this.rest, o == null ? void 0 : o.opacity), a) || this.consumePeeked(\"tracking-\") && (a = Mu(this.rest, this.isNegative, o == null ? void 0 : o.letterSpacing), a)) return a;\n        if (this.consumePeeked(\"z-\")) {\n            let u = Number((s = (i = o == null ? void 0 : o.zIndex) === null || i === void 0 ? void 0 : i[this.rest]) !== null && s !== void 0 ? s : this.rest);\n            if (!Number.isNaN(u)) return m({\n                zIndex: u\n            });\n        }\n        return ve(`\\`${this.rest}\\` unknown or invalid utility`), null;\n    }\n    handlePossibleArbitraryBreakpointPrefix(t) {\n        var n;\n        if (t[0] !== \"m\") return false;\n        let r = t.match(/^(min|max)-(w|h)-\\[([^\\]]+)\\]$/);\n        if (!r) return false;\n        if (!(!((n = this.context.device) === null || n === void 0) && n.windowDimensions)) return this.isNull = true, true;\n        let i = this.context.device.windowDimensions, [, s = \"\", o = \"\", a = \"\"] = r, u = o === \"w\" ? i.width : i.height, l = ie(a, this.context);\n        if (l === null) return this.isNull = true, true;\n        let [f, d] = l;\n        return d !== \"px\" && (this.isNull = true), (s === \"min\" ? u >= f : u <= f) ? this.incrementOrder() : this.isNull = true, true;\n    }\n    advance(t = 1) {\n        this.position += t, this.char = this.string[this.position];\n    }\n    get rest() {\n        return this.peekSlice(0, this.string.length);\n    }\n    peekSlice(t, n) {\n        return this.string.slice(this.position + t, this.position + n);\n    }\n    consumePeeked(t) {\n        return this.peekSlice(0, t.length) === t ? (this.advance(t.length), true) : false;\n    }\n    parseIsNegative() {\n        this.char === \"-\" && (this.advance(), this.isNegative = true, this.context.isNegative = true);\n    }\n    incrementOrder() {\n        var t;\n        this.order = ((t = this.order) !== null && t !== void 0 ? t : 0) + 1;\n    }\n};\nc();\nfunction Bu(e) {\n    let t = [], n = null;\n    return e.forEach((r)=>{\n        if (typeof r == \"string\") t = [\n            ...t,\n            ...mo(r)\n        ];\n        else if (Array.isArray(r)) t = [\n            ...t,\n            ...r.flatMap(mo)\n        ];\n        else if (typeof r == \"object\" && r !== null) for (let [i, s] of Object.entries(r))typeof s == \"boolean\" ? t = [\n            ...t,\n            ...s ? mo(i) : []\n        ] : n ? n[i] = s : n = {\n            [i]: s\n        };\n    }), [\n        t.filter(Boolean).filter(z0),\n        n\n    ];\n}\nfunction mo(e) {\n    return e.trim().split(/\\s+/);\n}\nfunction z0(e, t, n) {\n    return n.indexOf(e) === t;\n}\nc();\nfunction Uu(e) {\n    var t;\n    return (t = e == null ? void 0 : e.reduce((n, r)=>({\n            ...n,\n            ...G0(r.handler)\n        }), {})) !== null && t !== void 0 ? t : {};\n}\nfunction G0(e) {\n    let t = {};\n    return e({\n        addUtilities: (n)=>{\n            t = n;\n        },\n        ...j0\n    }), t;\n}\nfunction Le(e) {\n    throw new Error(`tailwindcss plugin function argument object prop \"${e}\" not implemented`);\n}\nvar j0 = {\n    addComponents: Le,\n    addBase: Le,\n    addVariant: Le,\n    e: Le,\n    prefix: Le,\n    theme: Le,\n    variants: Le,\n    config: Le,\n    corePlugins: Le,\n    matchUtilities: Le,\n    postcss: null\n};\nfunction Gu(e, t) {\n    let n = (0, zu.default)(H0(e)), r = {}, i = Uu(n.plugins), s = {}, o = Object.entries(i).map(([p, v])=>typeof v == \"string\" ? (s[p] = v, [\n            p,\n            {\n                kind: \"null\"\n            }\n        ]) : [\n            p,\n            m(v)\n        ]).filter(([, p])=>p.kind !== \"null\");\n    function a() {\n        return [\n            r.windowDimensions ? `w${r.windowDimensions.width}` : false,\n            r.windowDimensions ? `h${r.windowDimensions.height}` : false,\n            r.fontScale ? `fs${r.fontScale}` : false,\n            r.colorScheme === \"dark\" ? \"dark\" : false,\n            r.pixelDensity === 2 ? \"retina\" : false\n        ].filter(Boolean).join(\"--\") || \"default\";\n    }\n    let u = a(), l = {};\n    function f() {\n        let p = l[u];\n        if (p) return p;\n        let v = new or(o);\n        return l[u] = v, v;\n    }\n    function d(...p) {\n        let v = f(), _ = {}, b = [], y = [], [S, E] = Bu(p), T = S.join(\" \"), D = v.getStyle(T);\n        if (D) return {\n            ...D,\n            ...E || {}\n        };\n        for (let F of S){\n            let C = v.getIr(F);\n            if (!C && F in s) {\n                let U = d(s[F]);\n                v.setIr(F, m(U)), _ = {\n                    ..._,\n                    ...U\n                };\n                continue;\n            }\n            switch(C = new ht(F, n, v, r, t).parse(), C.kind){\n                case \"complete\":\n                    _ = {\n                        ..._,\n                        ...C.style\n                    }, v.setIr(F, C);\n                    break;\n                case \"dependent\":\n                    b.push(C);\n                    break;\n                case \"ordered\":\n                    y.push(C);\n                    break;\n                case \"null\":\n                    v.setIr(F, C);\n                    break;\n            }\n        }\n        if (y.length > 0) {\n            y.sort((F, C)=>F.order - C.order);\n            for (let F of y)switch(F.styleIr.kind){\n                case \"complete\":\n                    _ = {\n                        ..._,\n                        ...F.styleIr.style\n                    };\n                    break;\n                case \"dependent\":\n                    b.push(F.styleIr);\n                    break;\n            }\n        }\n        if (b.length > 0) {\n            for (let F of b){\n                let C = F.complete(_);\n                C && ve(C);\n            }\n            Iu(_);\n        }\n        return T !== \"\" && v.setStyle(T, _), E && (_ = {\n            ..._,\n            ...E\n        }), _;\n    }\n    function g(p) {\n        let v = d(p.split(/\\s+/g).map((_)=>_.replace(/^(bg|text|border)-/, \"\")).map((_)=>`bg-${_}`).join(\" \"));\n        return typeof v.backgroundColor == \"string\" ? v.backgroundColor : void 0;\n    }\n    let h = (p, ...v)=>{\n        let _ = \"\";\n        return p.forEach((b, y)=>{\n            var S;\n            _ += b + ((S = v[y]) !== null && S !== void 0 ? S : \"\");\n        }), d(_);\n    };\n    return h.style = d, h.color = g, h.prefixMatch = (...p)=>{\n        let v = p.sort().join(\":\"), _ = f(), b = _.getPrefixMatch(v);\n        if (b !== void 0) return b;\n        let E = new ht(`${v}:flex`, n, _, r, t).parse().kind !== \"null\";\n        return _.setPrefixMatch(v, E), E;\n    }, h.setWindowDimensions = (p)=>{\n        r.windowDimensions = p, u = a();\n    }, h.setFontScale = (p)=>{\n        r.fontScale = p, u = a();\n    }, h.setPixelDensity = (p)=>{\n        r.pixelDensity = p, u = a();\n    }, h.setColorScheme = (p)=>{\n        r.colorScheme = p, u = a();\n    }, h;\n}\nfunction H0(e) {\n    return {\n        ...e,\n        content: [\n            \"_no_warnings_please\"\n        ]\n    };\n}\nvar Y0 = {\n    handler: ({ addUtilities: e  })=>{\n        e({\n            \"shadow-sm\": {\n                boxShadow: \"0 1px 2px 0 rgb(0 0 0 / 0.05)\"\n            },\n            shadow: {\n                boxShadow: \"0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-md\": {\n                boxShadow: \"0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-lg\": {\n                boxShadow: \"0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-xl\": {\n                boxShadow: \"0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)\"\n            },\n            \"shadow-2xl\": {\n                boxShadow: \"0 25px 50px -12px rgb(0 0 0 / 0.25)\"\n            },\n            \"shadow-inner\": {\n                boxShadow: \"inset 0 2px 4px 0 rgb(0 0 0 / 0.05)\"\n            },\n            \"shadow-none\": {\n                boxShadow: \"0 0 #0000\"\n            }\n        });\n    }\n};\nfunction X0(e) {\n    return Gu({\n        ...e,\n        plugins: [\n            ...(e == null ? void 0 : e.plugins) ?? [],\n            Y0\n        ]\n    }, \"web\");\n}\nvar Xr;\nfunction go({ width: e , height: t , config: n  }) {\n    return Xr || (Xr = X0(n)), Xr.setWindowDimensions({\n        width: +e,\n        height: +t\n    }), Xr;\n}\nvar vo = /* @__PURE__ */ new WeakMap();\nasync function Hu(e, t) {\n    let n = await Fe();\n    if (!n || !n.Node) throw new Error(\"Satori is not initialized: expect `yoga` to be loaded, got \" + n);\n    t.fonts = t.fonts || [];\n    let r;\n    vo.has(t.fonts) ? r = vo.get(t.fonts) : vo.set(t.fonts, r = new Et(t.fonts));\n    let i = \"width\" in t ? t.width : void 0, s = \"height\" in t ? t.height : void 0, o = n.Node.create();\n    i && o.setWidth(i), s && o.setHeight(s), o.setFlexDirection(n.FLEX_DIRECTION_ROW), o.setFlexWrap(n.WRAP_WRAP), o.setAlignContent(n.ALIGN_AUTO), o.setAlignItems(n.ALIGN_FLEX_START), o.setJustifyContent(n.JUSTIFY_FLEX_START), o.setOverflow(n.OVERFLOW_HIDDEN);\n    let a = {\n        ...t.graphemeImages\n    }, u = /* @__PURE__ */ new Set(), l = Ot(e, {\n        id: \"id\",\n        parentStyle: {},\n        inheritedStyle: {\n            fontSize: 16,\n            fontWeight: \"normal\",\n            fontFamily: \"serif\",\n            fontStyle: \"normal\",\n            lineHeight: 1.2,\n            color: \"black\",\n            opacity: 1,\n            whiteSpace: \"normal\",\n            _viewportWidth: i,\n            _viewportHeight: s\n        },\n        parent: o,\n        font: r,\n        embedFont: t.embedFont,\n        debug: t.debug,\n        graphemeImages: a,\n        canLoadAdditionalAssets: !!t.loadAdditionalAsset,\n        getTwStyles: (p, v)=>{\n            let b = {\n                ...go({\n                    width: i,\n                    height: s,\n                    config: t.tailwindConfig\n                })([\n                    p\n                ])\n            };\n            return typeof b.lineHeight == \"number\" && (b.lineHeight = b.lineHeight / (+b.fontSize || v.fontSize || 16)), b.shadowColor && b.boxShadow && (b.boxShadow = b.boxShadow.replace(/rgba?\\([^)]+\\)/, b.shadowColor)), b;\n        }\n    }), f = (await l.next()).value;\n    if (t.loadAdditionalAsset && f.length) {\n        let p = Q0(f), v = [], _ = {};\n        await Promise.all(Object.entries(p).flatMap(([b, y])=>y.map((S)=>{\n                let E = `${b}_${S}`;\n                return u.has(E) ? null : (u.add(E), t.loadAdditionalAsset(b, S).then((T)=>{\n                    typeof T == \"string\" ? _[S] = T : T && v.push(T);\n                }));\n            }))), r.addFonts(v), Object.assign(a, _);\n    }\n    await l.next(), o.calculateLayout(i, s, n.DIRECTION_LTR);\n    let d = (await l.next([\n        0,\n        0\n    ])).value, g = o.getComputedWidth(), h = o.getComputedHeight();\n    return o.freeRecursive(), Pn({\n        width: g,\n        height: h,\n        content: d\n    });\n}\nfunction Q0(e) {\n    let t = {}, n = {};\n    for (let { word: r , locale: i  } of e){\n        let s = us(r, i);\n        n[s] = n[s] || \"\", n[s] += r;\n    }\n    return Object.keys(n).forEach((r)=>{\n        t[r] = t[r] || [], r === \"emoji\" ? t[r].push(...ju(pe(n[r], \"grapheme\"))) : (t[r][0] = t[r][0] || \"\", t[r][0] += ju(pe(n[r], \"grapheme\", r === \"unknown\" ? void 0 : r)).join(\"\"));\n    }), t;\n}\nfunction ju(e) {\n    return Array.from(new Set(e));\n}\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/wrapAsm-f766f97f.js\nvar YGEnums = {};\nvar ALIGN_AUTO = YGEnums.ALIGN_AUTO = 0;\nvar ALIGN_FLEX_START = YGEnums.ALIGN_FLEX_START = 1;\nvar ALIGN_CENTER = YGEnums.ALIGN_CENTER = 2;\nvar ALIGN_FLEX_END = YGEnums.ALIGN_FLEX_END = 3;\nvar ALIGN_STRETCH = YGEnums.ALIGN_STRETCH = 4;\nvar ALIGN_BASELINE = YGEnums.ALIGN_BASELINE = 5;\nvar ALIGN_SPACE_BETWEEN = YGEnums.ALIGN_SPACE_BETWEEN = 6;\nvar ALIGN_SPACE_AROUND = YGEnums.ALIGN_SPACE_AROUND = 7;\nvar DIMENSION_WIDTH = YGEnums.DIMENSION_WIDTH = 0;\nvar DIMENSION_HEIGHT = YGEnums.DIMENSION_HEIGHT = 1;\nvar DIRECTION_INHERIT = YGEnums.DIRECTION_INHERIT = 0;\nvar DIRECTION_LTR = YGEnums.DIRECTION_LTR = 1;\nvar DIRECTION_RTL = YGEnums.DIRECTION_RTL = 2;\nvar DISPLAY_FLEX = YGEnums.DISPLAY_FLEX = 0;\nvar DISPLAY_NONE = YGEnums.DISPLAY_NONE = 1;\nvar EDGE_LEFT = YGEnums.EDGE_LEFT = 0;\nvar EDGE_TOP = YGEnums.EDGE_TOP = 1;\nvar EDGE_RIGHT = YGEnums.EDGE_RIGHT = 2;\nvar EDGE_BOTTOM = YGEnums.EDGE_BOTTOM = 3;\nvar EDGE_START = YGEnums.EDGE_START = 4;\nvar EDGE_END = YGEnums.EDGE_END = 5;\nvar EDGE_HORIZONTAL = YGEnums.EDGE_HORIZONTAL = 6;\nvar EDGE_VERTICAL = YGEnums.EDGE_VERTICAL = 7;\nvar EDGE_ALL = YGEnums.EDGE_ALL = 8;\nvar EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = YGEnums.EXPERIMENTAL_FEATURE_WEB_FLEX_BASIS = 0;\nvar EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = YGEnums.EXPERIMENTAL_FEATURE_ABSOLUTE_PERCENTAGE_AGAINST_PADDING_EDGE = 1;\nvar EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = YGEnums.EXPERIMENTAL_FEATURE_FIX_ABSOLUTE_TRAILING_COLUMN_MARGIN = 2;\nvar FLEX_DIRECTION_COLUMN = YGEnums.FLEX_DIRECTION_COLUMN = 0;\nvar FLEX_DIRECTION_COLUMN_REVERSE = YGEnums.FLEX_DIRECTION_COLUMN_REVERSE = 1;\nvar FLEX_DIRECTION_ROW = YGEnums.FLEX_DIRECTION_ROW = 2;\nvar FLEX_DIRECTION_ROW_REVERSE = YGEnums.FLEX_DIRECTION_ROW_REVERSE = 3;\nvar GUTTER_COLUMN = YGEnums.GUTTER_COLUMN = 0;\nvar GUTTER_ROW = YGEnums.GUTTER_ROW = 1;\nvar GUTTER_ALL = YGEnums.GUTTER_ALL = 2;\nvar JUSTIFY_FLEX_START = YGEnums.JUSTIFY_FLEX_START = 0;\nvar JUSTIFY_CENTER = YGEnums.JUSTIFY_CENTER = 1;\nvar JUSTIFY_FLEX_END = YGEnums.JUSTIFY_FLEX_END = 2;\nvar JUSTIFY_SPACE_BETWEEN = YGEnums.JUSTIFY_SPACE_BETWEEN = 3;\nvar JUSTIFY_SPACE_AROUND = YGEnums.JUSTIFY_SPACE_AROUND = 4;\nvar JUSTIFY_SPACE_EVENLY = YGEnums.JUSTIFY_SPACE_EVENLY = 5;\nvar LOG_LEVEL_ERROR = YGEnums.LOG_LEVEL_ERROR = 0;\nvar LOG_LEVEL_WARN = YGEnums.LOG_LEVEL_WARN = 1;\nvar LOG_LEVEL_INFO = YGEnums.LOG_LEVEL_INFO = 2;\nvar LOG_LEVEL_DEBUG = YGEnums.LOG_LEVEL_DEBUG = 3;\nvar LOG_LEVEL_VERBOSE = YGEnums.LOG_LEVEL_VERBOSE = 4;\nvar LOG_LEVEL_FATAL = YGEnums.LOG_LEVEL_FATAL = 5;\nvar MEASURE_MODE_UNDEFINED = YGEnums.MEASURE_MODE_UNDEFINED = 0;\nvar MEASURE_MODE_EXACTLY = YGEnums.MEASURE_MODE_EXACTLY = 1;\nvar MEASURE_MODE_AT_MOST = YGEnums.MEASURE_MODE_AT_MOST = 2;\nvar NODE_TYPE_DEFAULT = YGEnums.NODE_TYPE_DEFAULT = 0;\nvar NODE_TYPE_TEXT = YGEnums.NODE_TYPE_TEXT = 1;\nvar OVERFLOW_VISIBLE = YGEnums.OVERFLOW_VISIBLE = 0;\nvar OVERFLOW_HIDDEN = YGEnums.OVERFLOW_HIDDEN = 1;\nvar OVERFLOW_SCROLL = YGEnums.OVERFLOW_SCROLL = 2;\nvar POSITION_TYPE_STATIC = YGEnums.POSITION_TYPE_STATIC = 0;\nvar POSITION_TYPE_RELATIVE = YGEnums.POSITION_TYPE_RELATIVE = 1;\nvar POSITION_TYPE_ABSOLUTE = YGEnums.POSITION_TYPE_ABSOLUTE = 2;\nvar PRINT_OPTIONS_LAYOUT = YGEnums.PRINT_OPTIONS_LAYOUT = 1;\nvar PRINT_OPTIONS_STYLE = YGEnums.PRINT_OPTIONS_STYLE = 2;\nvar PRINT_OPTIONS_CHILDREN = YGEnums.PRINT_OPTIONS_CHILDREN = 4;\nvar UNIT_UNDEFINED = YGEnums.UNIT_UNDEFINED = 0;\nvar UNIT_POINT = YGEnums.UNIT_POINT = 1;\nvar UNIT_PERCENT = YGEnums.UNIT_PERCENT = 2;\nvar UNIT_AUTO = YGEnums.UNIT_AUTO = 3;\nvar WRAP_NO_WRAP = YGEnums.WRAP_NO_WRAP = 0;\nvar WRAP_WRAP = YGEnums.WRAP_WRAP = 1;\nvar WRAP_WRAP_REVERSE = YGEnums.WRAP_WRAP_REVERSE = 2;\nvar wrapAsm = (E)=>{\n    function _(E2, _2, T2) {\n        let N2 = E2[_2];\n        E2[_2] = function(...E3) {\n            return T2.call(this, N2, ...E3);\n        };\n    }\n    for (let T2 of [\n        \"setPosition\",\n        \"setMargin\",\n        \"setFlexBasis\",\n        \"setWidth\",\n        \"setHeight\",\n        \"setMinWidth\",\n        \"setMinHeight\",\n        \"setMaxWidth\",\n        \"setMaxHeight\",\n        \"setPadding\"\n    ]){\n        let N2 = {\n            [YGEnums.UNIT_POINT]: E.Node.prototype[T2],\n            [YGEnums.UNIT_PERCENT]: E.Node.prototype[`${T2}Percent`],\n            [YGEnums.UNIT_AUTO]: E.Node.prototype[`${T2}Auto`]\n        };\n        _(E.Node.prototype, T2, function(E2, ..._2) {\n            let I2, L;\n            let O = _2.pop();\n            if (O === \"auto\") I2 = YGEnums.UNIT_AUTO, L = void 0;\n            else if (typeof O == \"object\") I2 = O.unit, L = O.valueOf();\n            else if (I2 = typeof O == \"string\" && O.endsWith(\"%\") ? YGEnums.UNIT_PERCENT : YGEnums.UNIT_POINT, L = parseFloat(O), !Number.isNaN(O) && Number.isNaN(L)) throw Error(`Invalid value ${O} for ${T2}`);\n            if (!N2[I2]) throw Error(`Failed to execute \"${T2}\": Unsupported unit '${O}'`);\n            return L !== void 0 ? N2[I2].call(this, ..._2, L) : N2[I2].call(this, ..._2);\n        });\n    }\n    function T(_2) {\n        return E.MeasureCallback.implement({\n            measure: (...E2)=>{\n                let { width: T2 , height: N2  } = _2(...E2);\n                return {\n                    width: T2 ?? NaN,\n                    height: N2 ?? NaN\n                };\n            }\n        });\n    }\n    function N(_2) {\n        return E.DirtiedCallback.implement({\n            dirtied: _2\n        });\n    }\n    return _(E.Node.prototype, \"setMeasureFunc\", function(E2, _2) {\n        return _2 ? E2.call(this, T(_2)) : this.unsetMeasureFunc();\n    }), _(E.Node.prototype, \"setDirtiedFunc\", function(E2, _2) {\n        E2.call(this, N(_2));\n    }), _(E.Config.prototype, \"free\", function() {\n        E.Config.destroy(this);\n    }), _(E.Node, \"create\", (_2, T2)=>T2 ? E.Node.createWithConfig(T2) : E.Node.createDefault()), _(E.Node.prototype, \"free\", function() {\n        E.Node.destroy(this);\n    }), _(E.Node.prototype, \"freeRecursive\", function() {\n        for(let E2 = 0, _2 = this.getChildCount(); E2 < _2; ++E2)this.getChild(0).freeRecursive();\n        this.free();\n    }), _(E.Node.prototype, \"calculateLayout\", function(E2, _2 = NaN, T2 = NaN, N2 = YGEnums.DIRECTION_LTR) {\n        return E2.call(this, _2, T2, N2);\n    }), {\n        Config: E.Config,\n        Node: E.Node,\n        ...YGEnums\n    };\n};\n// node_modules/.pnpm/yoga-wasm-web@0.3.3/node_modules/yoga-wasm-web/dist/index.js\nvar yoga = (()=>{\n    var n = typeof document != \"undefined\" && document.currentScript ? document.currentScript.src : void 0;\n    return function(t = {}) {\n        u || (u = t !== void 0 ? t : {}), u.ready = new Promise(function(n2, t2) {\n            c2 = n2, f = t2;\n        });\n        var r, e, a = Object.assign({}, u), i = \"\";\n        typeof document != \"undefined\" && document.currentScript && (i = document.currentScript.src), n && (i = n), i = i.indexOf(\"blob:\") !== 0 ? i.substr(0, i.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1) : \"\";\n        var o = console.log.bind(console), s = console.warn.bind(console);\n        Object.assign(u, a), a = null, typeof WebAssembly != \"object\" && w(\"no native wasm support detected\");\n        var u, c2, f, l, h = false;\n        function p(n2, t2, r2) {\n            r2 = t2 + r2;\n            for(var e2 = \"\"; !(t2 >= r2);){\n                var a2 = n2[t2++];\n                if (!a2) break;\n                if (128 & a2) {\n                    var i2 = 63 & n2[t2++];\n                    if ((224 & a2) == 192) e2 += String.fromCharCode((31 & a2) << 6 | i2);\n                    else {\n                        var o2 = 63 & n2[t2++];\n                        65536 > (a2 = (240 & a2) == 224 ? (15 & a2) << 12 | i2 << 6 | o2 : (7 & a2) << 18 | i2 << 12 | o2 << 6 | 63 & n2[t2++]) ? e2 += String.fromCharCode(a2) : (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2));\n                    }\n                } else e2 += String.fromCharCode(a2);\n            }\n            return e2;\n        }\n        function v() {\n            var n2 = l.buffer;\n            u.HEAP8 = d = new Int8Array(n2), u.HEAP16 = m2 = new Int16Array(n2), u.HEAP32 = g = new Int32Array(n2), u.HEAPU8 = y = new Uint8Array(n2), u.HEAPU16 = E = new Uint16Array(n2), u.HEAPU32 = _ = new Uint32Array(n2), u.HEAPF32 = T = new Float32Array(n2), u.HEAPF64 = L = new Float64Array(n2);\n        }\n        var d, y, m2, E, g, _, T, L, A, O = [], P = [], b = [], N = 0, I2 = null;\n        function w(n2) {\n            throw s(n2 = \"Aborted(\" + n2 + \")\"), h = true, f(n2 = new WebAssembly.RuntimeError(n2 + \". Build with -sASSERTIONS for more info.\")), n2;\n        }\n        function S() {\n            return r.startsWith(\"data:application/octet-stream;base64,\");\n        }\n        function R2() {\n            try {\n                throw \"both async and sync fetching of the wasm failed\";\n            } catch (n2) {\n                w(n2);\n            }\n        }\n        function C(n2) {\n            for(; 0 < n2.length;)n2.shift()(u);\n        }\n        function W(n2) {\n            if (n2 === void 0) return \"_unknown\";\n            var t2 = (n2 = n2.replace(/[^a-zA-Z0-9_]/g, \"$\")).charCodeAt(0);\n            return 48 <= t2 && 57 >= t2 ? \"_\" + n2 : n2;\n        }\n        function U(n2, t2) {\n            return n2 = W(n2), function() {\n                return t2.apply(this, arguments);\n            };\n        }\n        r = \"yoga.wasm\", S() || (r = i + r);\n        var M = [\n            {},\n            {\n                value: void 0\n            },\n            {\n                value: null\n            },\n            {\n                value: true\n            },\n            {\n                value: false\n            }\n        ], F = [];\n        function D(n2) {\n            var t2 = Error, r2 = U(n2, function(t3) {\n                this.name = n2, this.message = t3, (t3 = Error(t3).stack) !== void 0 && (this.stack = this.toString() + \"\\n\" + t3.replace(/^Error(:[^\\n]*)?\\n/, \"\"));\n            });\n            return r2.prototype = Object.create(t2.prototype), r2.prototype.constructor = r2, r2.prototype.toString = function() {\n                return this.message === void 0 ? this.name : this.name + \": \" + this.message;\n            }, r2;\n        }\n        var k = void 0;\n        function V(n2) {\n            throw new k(n2);\n        }\n        var j2 = (n2)=>(n2 || V(\"Cannot use deleted val. handle = \" + n2), M[n2].value), G = (n2)=>{\n            switch(n2){\n                case void 0:\n                    return 1;\n                case null:\n                    return 2;\n                case true:\n                    return 3;\n                case false:\n                    return 4;\n                default:\n                    var t2 = F.length ? F.pop() : M.length;\n                    return M[t2] = {\n                        fa: 1,\n                        value: n2\n                    }, t2;\n            }\n        }, Y = void 0, X = void 0;\n        function B(n2) {\n            for(var t2 = \"\"; y[n2];)t2 += X[y[n2++]];\n            return t2;\n        }\n        var H = [];\n        function x() {\n            for(; H.length;){\n                var n2 = H.pop();\n                n2.L.Z = false, n2.delete();\n            }\n        }\n        var z = void 0, $ = {};\n        function Z(n2, t2) {\n            for(t2 === void 0 && V(\"ptr should not be undefined\"); n2.P;)t2 = n2.aa(t2), n2 = n2.P;\n            return t2;\n        }\n        var J = {};\n        function q(n2) {\n            var t2 = B(n2 = nz(n2));\n            return nZ(n2), t2;\n        }\n        function K(n2, t2) {\n            var r2 = J[n2];\n            return r2 === void 0 && V(t2 + \" has unknown type \" + q(n2)), r2;\n        }\n        function Q() {}\n        var nn2 = false;\n        function nt2(n2) {\n            --n2.count.value, n2.count.value === 0 && (n2.S ? n2.T.V(n2.S) : n2.O.M.V(n2.N));\n        }\n        var nr = {}, ne = void 0;\n        function na(n2) {\n            throw new ne(n2);\n        }\n        function ni(n2, t2) {\n            return t2.O && t2.N || na(\"makeClassHandle requires ptr and ptrType\"), !!t2.T != !!t2.S && na(\"Both smartPtrType and smartPtr must be specified\"), t2.count = {\n                value: 1\n            }, no2(Object.create(n2, {\n                L: {\n                    value: t2\n                }\n            }));\n        }\n        function no2(n2) {\n            return typeof FinalizationRegistry == \"undefined\" ? (no2 = (n3)=>n3, n2) : (nn2 = new FinalizationRegistry((n3)=>{\n                nt2(n3.L);\n            }), no2 = (n3)=>{\n                var t2 = n3.L;\n                return t2.S && nn2.register(n3, {\n                    L: t2\n                }, n3), n3;\n            }, Q = (n3)=>{\n                nn2.unregister(n3);\n            }, no2(n2));\n        }\n        var ns2 = {};\n        function nu2(n2) {\n            for(; n2.length;){\n                var t2 = n2.pop();\n                n2.pop()(t2);\n            }\n        }\n        function nc(n2) {\n            return this.fromWireType(g[n2 >> 2]);\n        }\n        var nf = {}, nl2 = {};\n        function nh(n2, t2, r2) {\n            function e2(t3) {\n                (t3 = r2(t3)).length !== n2.length && na(\"Mismatched type converter count\");\n                for(var e3 = 0; e3 < n2.length; ++e3)nv(n2[e3], t3[e3]);\n            }\n            n2.forEach(function(n3) {\n                nl2[n3] = t2;\n            });\n            var a2 = Array(t2.length), i2 = [], o2 = 0;\n            t2.forEach((n3, t3)=>{\n                J.hasOwnProperty(n3) ? a2[t3] = J[n3] : (i2.push(n3), nf.hasOwnProperty(n3) || (nf[n3] = []), nf[n3].push(()=>{\n                    a2[t3] = J[n3], ++o2 === i2.length && e2(a2);\n                }));\n            }), i2.length === 0 && e2(a2);\n        }\n        function np(n2) {\n            switch(n2){\n                case 1:\n                    return 0;\n                case 2:\n                    return 1;\n                case 4:\n                    return 2;\n                case 8:\n                    return 3;\n                default:\n                    throw TypeError(\"Unknown type size: \" + n2);\n            }\n        }\n        function nv(n2, t2, r2 = {}) {\n            if (!(\"argPackAdvance\" in t2)) throw TypeError(\"registerType registeredInstance requires argPackAdvance\");\n            var e2 = t2.name;\n            if (n2 || V('type \"' + e2 + '\" must have a positive integer typeid pointer'), J.hasOwnProperty(n2)) {\n                if (r2.ta) return;\n                V(\"Cannot register type '\" + e2 + \"' twice\");\n            }\n            J[n2] = t2, delete nl2[n2], nf.hasOwnProperty(n2) && (t2 = nf[n2], delete nf[n2], t2.forEach((n3)=>n3()));\n        }\n        function nd(n2) {\n            V(n2.L.O.M.name + \" instance already deleted\");\n        }\n        function ny() {}\n        function nm(n2, t2, r2) {\n            if (n2[t2].R === void 0) {\n                var e2 = n2[t2];\n                n2[t2] = function() {\n                    return n2[t2].R.hasOwnProperty(arguments.length) || V(\"Function '\" + r2 + \"' called with an invalid number of arguments (\" + arguments.length + \") - expects one of (\" + n2[t2].R + \")!\"), n2[t2].R[arguments.length].apply(this, arguments);\n                }, n2[t2].R = [], n2[t2].R[e2.Y] = e2;\n            }\n        }\n        function nE(n2, t2, r2, e2, a2, i2, o2, s2) {\n            this.name = n2, this.constructor = t2, this.W = r2, this.V = e2, this.P = a2, this.oa = i2, this.aa = o2, this.ma = s2, this.ia = [];\n        }\n        function ng(n2, t2, r2) {\n            for(; t2 !== r2;)t2.aa || V(\"Expected null or instance of \" + r2.name + \", got an instance of \" + t2.name), n2 = t2.aa(n2), t2 = t2.P;\n            return n2;\n        }\n        function n_(n2, t2) {\n            return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n        }\n        function nT(n2, t2) {\n            if (t2 === null) {\n                if (this.da && V(\"null is not a valid \" + this.name), this.ca) {\n                    var r2 = this.ea();\n                    return n2 !== null && n2.push(this.V, r2), r2;\n                }\n                return 0;\n            }\n            if (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), !this.ba && t2.L.O.ba && V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name), r2 = ng(t2.L.N, t2.L.O.M, this.M), this.ca) switch(t2.L.S === void 0 && V(\"Passing raw pointer to smart pointer is illegal\"), this.Aa){\n                case 0:\n                    t2.L.T === this ? r2 = t2.L.S : V(\"Cannot convert argument of type \" + (t2.L.T ? t2.L.T.name : t2.L.O.name) + \" to parameter type \" + this.name);\n                    break;\n                case 1:\n                    r2 = t2.L.S;\n                    break;\n                case 2:\n                    if (t2.L.T === this) r2 = t2.L.S;\n                    else {\n                        var e2 = t2.clone();\n                        r2 = this.wa(r2, G(function() {\n                            e2.delete();\n                        })), n2 !== null && n2.push(this.V, r2);\n                    }\n                    break;\n                default:\n                    V(\"Unsupporting sharing policy\");\n            }\n            return r2;\n        }\n        function nL(n2, t2) {\n            return t2 === null ? (this.da && V(\"null is not a valid \" + this.name), 0) : (t2.L || V('Cannot pass \"' + nC(t2) + '\" as a ' + this.name), t2.L.N || V(\"Cannot pass deleted object as a pointer of type \" + this.name), t2.L.O.ba && V(\"Cannot convert argument of type \" + t2.L.O.name + \" to parameter type \" + this.name), ng(t2.L.N, t2.L.O.M, this.M));\n        }\n        function nA(n2, t2, r2, e2) {\n            this.name = n2, this.M = t2, this.da = r2, this.ba = e2, this.ca = false, this.V = this.wa = this.ea = this.ja = this.Aa = this.va = void 0, t2.P !== void 0 ? this.toWireType = nT : (this.toWireType = e2 ? n_ : nL, this.U = null);\n        }\n        var nO = [];\n        function nP(n2) {\n            var t2 = nO[n2];\n            return t2 || (n2 >= nO.length && (nO.length = n2 + 1), nO[n2] = t2 = A.get(n2)), t2;\n        }\n        function nb(n2, t2) {\n            var r2, e2, a2 = (n2 = B(n2)).includes(\"j\") ? (r2 = n2, e2 = [], function() {\n                if (e2.length = 0, Object.assign(e2, arguments), r2.includes(\"j\")) {\n                    var n3 = u[\"dynCall_\" + r2];\n                    n3 = e2 && e2.length ? n3.apply(null, [\n                        t2\n                    ].concat(e2)) : n3.call(null, t2);\n                } else n3 = nP(t2).apply(null, e2);\n                return n3;\n            }) : nP(t2);\n            return typeof a2 != \"function\" && V(\"unknown function pointer with signature \" + n2 + \": \" + t2), a2;\n        }\n        var nN = void 0;\n        function nI(n2, t2) {\n            var r2 = [], e2 = {};\n            throw t2.forEach(function n3(t3) {\n                e2[t3] || J[t3] || (nl2[t3] ? nl2[t3].forEach(n3) : (r2.push(t3), e2[t3] = true));\n            }), new nN(n2 + \": \" + r2.map(q).join([\n                \", \"\n            ]));\n        }\n        function nw(n2, t2, r2, e2, a2) {\n            var i2 = t2.length;\n            2 > i2 && V(\"argTypes array size mismatch! Must at least get return value and 'this' types!\");\n            var o2 = t2[1] !== null && r2 !== null, s2 = false;\n            for(r2 = 1; r2 < t2.length; ++r2)if (t2[r2] !== null && t2[r2].U === void 0) {\n                s2 = true;\n                break;\n            }\n            var u2 = t2[0].name !== \"void\", c3 = i2 - 2, f2 = Array(c3), l2 = [], h2 = [];\n            return function() {\n                if (arguments.length !== c3 && V(\"function \" + n2 + \" called with \" + arguments.length + \" arguments, expected \" + c3 + \" args!\"), h2.length = 0, l2.length = o2 ? 2 : 1, l2[0] = a2, o2) {\n                    var r3 = t2[1].toWireType(h2, this);\n                    l2[1] = r3;\n                }\n                for(var i3 = 0; i3 < c3; ++i3)f2[i3] = t2[i3 + 2].toWireType(h2, arguments[i3]), l2.push(f2[i3]);\n                if (i3 = e2.apply(null, l2), s2) nu2(h2);\n                else for(var p2 = o2 ? 1 : 2; p2 < t2.length; p2++){\n                    var v2 = p2 === 1 ? r3 : f2[p2 - 2];\n                    t2[p2].U !== null && t2[p2].U(v2);\n                }\n                return u2 ? t2[0].fromWireType(i3) : void 0;\n            };\n        }\n        function nS(n2, t2) {\n            for(var r2 = [], e2 = 0; e2 < n2; e2++)r2.push(_[t2 + 4 * e2 >> 2]);\n            return r2;\n        }\n        function nR(n2) {\n            4 < n2 && --M[n2].fa == 0 && (M[n2] = void 0, F.push(n2));\n        }\n        function nC(n2) {\n            if (n2 === null) return \"null\";\n            var t2 = typeof n2;\n            return t2 === \"object\" || t2 === \"array\" || t2 === \"function\" ? n2.toString() : \"\" + n2;\n        }\n        function nW(n2, t2) {\n            for(var r2 = \"\", e2 = 0; !(e2 >= t2 / 2); ++e2){\n                var a2 = m2[n2 + 2 * e2 >> 1];\n                if (a2 == 0) break;\n                r2 += String.fromCharCode(a2);\n            }\n            return r2;\n        }\n        function nU(n2, t2, r2) {\n            if (r2 === void 0 && (r2 = 2147483647), 2 > r2) return 0;\n            r2 -= 2;\n            var e2 = t2;\n            r2 = r2 < 2 * n2.length ? r2 / 2 : n2.length;\n            for(var a2 = 0; a2 < r2; ++a2)m2[t2 >> 1] = n2.charCodeAt(a2), t2 += 2;\n            return m2[t2 >> 1] = 0, t2 - e2;\n        }\n        function nM(n2) {\n            return 2 * n2.length;\n        }\n        function nF(n2, t2) {\n            for(var r2 = 0, e2 = \"\"; !(r2 >= t2 / 4);){\n                var a2 = g[n2 + 4 * r2 >> 2];\n                if (a2 == 0) break;\n                ++r2, 65536 <= a2 ? (a2 -= 65536, e2 += String.fromCharCode(55296 | a2 >> 10, 56320 | 1023 & a2)) : e2 += String.fromCharCode(a2);\n            }\n            return e2;\n        }\n        function nD(n2, t2, r2) {\n            if (r2 === void 0 && (r2 = 2147483647), 4 > r2) return 0;\n            var e2 = t2;\n            r2 = e2 + r2 - 4;\n            for(var a2 = 0; a2 < n2.length; ++a2){\n                var i2 = n2.charCodeAt(a2);\n                if (55296 <= i2 && 57343 >= i2 && (i2 = 65536 + ((1023 & i2) << 10) | 1023 & n2.charCodeAt(++a2)), g[t2 >> 2] = i2, (t2 += 4) + 4 > r2) break;\n            }\n            return g[t2 >> 2] = 0, t2 - e2;\n        }\n        function nk(n2) {\n            for(var t2 = 0, r2 = 0; r2 < n2.length; ++r2){\n                var e2 = n2.charCodeAt(r2);\n                55296 <= e2 && 57343 >= e2 && ++r2, t2 += 4;\n            }\n            return t2;\n        }\n        var nV = {};\n        function nj(n2) {\n            var t2 = nV[n2];\n            return t2 === void 0 ? B(n2) : t2;\n        }\n        var nG = [], nY = [], nX = [\n            null,\n            [],\n            []\n        ];\n        k = u.BindingError = D(\"BindingError\"), u.count_emval_handles = function() {\n            for(var n2 = 0, t2 = 5; t2 < M.length; ++t2)M[t2] !== void 0 && ++n2;\n            return n2;\n        }, u.get_first_emval = function() {\n            for(var n2 = 5; n2 < M.length; ++n2)if (M[n2] !== void 0) return M[n2];\n            return null;\n        }, Y = u.PureVirtualError = D(\"PureVirtualError\");\n        for(var nB = Array(256), nH = 0; 256 > nH; ++nH)nB[nH] = String.fromCharCode(nH);\n        X = nB, u.getInheritedInstanceCount = function() {\n            return Object.keys($).length;\n        }, u.getLiveInheritedInstances = function() {\n            var n2, t2 = [];\n            for(n2 in $)$.hasOwnProperty(n2) && t2.push($[n2]);\n            return t2;\n        }, u.flushPendingDeletes = x, u.setDelayFunction = function(n2) {\n            z = n2, H.length && z && z(x);\n        }, ne = u.InternalError = D(\"InternalError\"), ny.prototype.isAliasOf = function(n2) {\n            if (!(this instanceof ny && n2 instanceof ny)) return false;\n            var t2 = this.L.O.M, r2 = this.L.N, e2 = n2.L.O.M;\n            for(n2 = n2.L.N; t2.P;)r2 = t2.aa(r2), t2 = t2.P;\n            for(; e2.P;)n2 = e2.aa(n2), e2 = e2.P;\n            return t2 === e2 && r2 === n2;\n        }, ny.prototype.clone = function() {\n            if (this.L.N || nd(this), this.L.$) return this.L.count.value += 1, this;\n            var n2 = no2, t2 = Object, r2 = t2.create, e2 = Object.getPrototypeOf(this), a2 = this.L;\n            return n2 = n2(r2.call(t2, e2, {\n                L: {\n                    value: {\n                        count: a2.count,\n                        Z: a2.Z,\n                        $: a2.$,\n                        N: a2.N,\n                        O: a2.O,\n                        S: a2.S,\n                        T: a2.T\n                    }\n                }\n            })), n2.L.count.value += 1, n2.L.Z = false, n2;\n        }, ny.prototype.delete = function() {\n            this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), Q(this), nt2(this.L), this.L.$ || (this.L.S = void 0, this.L.N = void 0);\n        }, ny.prototype.isDeleted = function() {\n            return !this.L.N;\n        }, ny.prototype.deleteLater = function() {\n            return this.L.N || nd(this), this.L.Z && !this.L.$ && V(\"Object already scheduled for deletion\"), H.push(this), H.length === 1 && z && z(x), this.L.Z = true, this;\n        }, nA.prototype.pa = function(n2) {\n            return this.ja && (n2 = this.ja(n2)), n2;\n        }, nA.prototype.ga = function(n2) {\n            this.V && this.V(n2);\n        }, nA.prototype.argPackAdvance = 8, nA.prototype.readValueFromPointer = nc, nA.prototype.deleteObject = function(n2) {\n            n2 !== null && n2.delete();\n        }, nA.prototype.fromWireType = function(n2) {\n            function t2() {\n                return this.ca ? ni(this.M.W, {\n                    O: this.va,\n                    N: e2,\n                    T: this,\n                    S: n2\n                }) : ni(this.M.W, {\n                    O: this,\n                    N: n2\n                });\n            }\n            var r2, e2 = this.pa(n2);\n            if (!e2) return this.ga(n2), null;\n            var a2 = $[Z(this.M, e2)];\n            if (a2 !== void 0) return a2.L.count.value === 0 ? (a2.L.N = e2, a2.L.S = n2, a2.clone()) : (a2 = a2.clone(), this.ga(n2), a2);\n            if (!(a2 = nr[a2 = this.M.oa(e2)])) return t2.call(this);\n            a2 = this.ba ? a2.ka : a2.pointerType;\n            var i2 = function n3(t3, r3, e3) {\n                return r3 === e3 ? t3 : e3.P === void 0 ? null : (t3 = n3(t3, r3, e3.P)) === null ? null : e3.ma(t3);\n            }(e2, this.M, a2.M);\n            return i2 === null ? t2.call(this) : this.ca ? ni(a2.M.W, {\n                O: a2,\n                N: i2,\n                T: this,\n                S: n2\n            }) : ni(a2.M.W, {\n                O: a2,\n                N: i2\n            });\n        }, nN = u.UnboundTypeError = D(\"UnboundTypeError\");\n        var nx = {\n            q: function(n2, t2, r2) {\n                n2 = B(n2), t2 = K(t2, \"wrapper\"), r2 = j2(r2);\n                var e2 = [].slice, a2 = t2.M, i2 = a2.W, o2 = a2.P.W, s2 = a2.P.constructor;\n                for(var u2 in n2 = U(n2, function() {\n                    a2.P.ia.forEach((function(n3) {\n                        if (this[n3] === o2[n3]) throw new Y(\"Pure virtual function \" + n3 + \" must be implemented in JavaScript\");\n                    }).bind(this)), Object.defineProperty(this, \"__parent\", {\n                        value: i2\n                    }), this.__construct.apply(this, e2.call(arguments));\n                }), i2.__construct = function() {\n                    this === i2 && V(\"Pass correct 'this' to __construct\");\n                    var n3 = s2.implement.apply(void 0, [\n                        this\n                    ].concat(e2.call(arguments)));\n                    Q(n3);\n                    var t3 = n3.L;\n                    n3.notifyOnDestruction(), t3.$ = true, Object.defineProperties(this, {\n                        L: {\n                            value: t3\n                        }\n                    }), no2(this), n3 = Z(a2, n3 = t3.N), $.hasOwnProperty(n3) ? V(\"Tried to register registered instance: \" + n3) : $[n3] = this;\n                }, i2.__destruct = function() {\n                    this === i2 && V(\"Pass correct 'this' to __destruct\"), Q(this);\n                    var n3 = this.L.N;\n                    n3 = Z(a2, n3), $.hasOwnProperty(n3) ? delete $[n3] : V(\"Tried to unregister unregistered instance: \" + n3);\n                }, n2.prototype = Object.create(i2), r2)n2.prototype[u2] = r2[u2];\n                return G(n2);\n            },\n            l: function(n2) {\n                var t2 = ns2[n2];\n                delete ns2[n2];\n                var r2 = t2.ea, e2 = t2.V, a2 = t2.ha;\n                nh([\n                    n2\n                ], a2.map((n3)=>n3.sa).concat(a2.map((n3)=>n3.ya)), (n3)=>{\n                    var i2 = {};\n                    return a2.forEach((t3, r3)=>{\n                        var e3 = n3[r3], o2 = t3.qa, s2 = t3.ra, u2 = n3[r3 + a2.length], c3 = t3.xa, f2 = t3.za;\n                        i2[t3.na] = {\n                            read: (n4)=>e3.fromWireType(o2(s2, n4)),\n                            write: (n4, t4)=>{\n                                var r4 = [];\n                                c3(f2, n4, u2.toWireType(r4, t4)), nu2(r4);\n                            }\n                        };\n                    }), [\n                        {\n                            name: t2.name,\n                            fromWireType: function(n4) {\n                                var t3, r3 = {};\n                                for(t3 in i2)r3[t3] = i2[t3].read(n4);\n                                return e2(n4), r3;\n                            },\n                            toWireType: function(n4, t3) {\n                                for(var a3 in i2)if (!(a3 in t3)) throw TypeError('Missing field:  \"' + a3 + '\"');\n                                var o2 = r2();\n                                for(a3 in i2)i2[a3].write(o2, t3[a3]);\n                                return n4 !== null && n4.push(e2, o2), o2;\n                            },\n                            argPackAdvance: 8,\n                            readValueFromPointer: nc,\n                            U: e2\n                        }\n                    ];\n                });\n            },\n            v: function() {},\n            B: function(n2, t2, r2, e2, a2) {\n                var i2 = np(r2);\n                nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        return !!n3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return t3 ? e2 : a2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3) {\n                        if (r2 === 1) var e3 = d;\n                        else if (r2 === 2) e3 = m2;\n                        else if (r2 === 4) e3 = g;\n                        else throw TypeError(\"Unknown boolean type size: \" + t2);\n                        return this.fromWireType(e3[n3 >> i2]);\n                    },\n                    U: null\n                });\n            },\n            h: function(n2, t2, r2, e2, a2, i2, o2, s2, c3, f2, l2, h2, p2) {\n                l2 = B(l2), i2 = nb(a2, i2), s2 && (s2 = nb(o2, s2)), f2 && (f2 = nb(c3, f2)), p2 = nb(h2, p2);\n                var v2, d2 = W(l2);\n                v2 = function() {\n                    nI(\"Cannot construct \" + l2 + \" due to unbound types\", [\n                        e2\n                    ]);\n                }, u.hasOwnProperty(d2) ? (V(\"Cannot register public name '\" + d2 + \"' twice\"), nm(u, d2, d2), u.hasOwnProperty(void 0) && V(\"Cannot register multiple overloads of a function with the same number of arguments (undefined)!\"), u[d2].R[void 0] = v2) : u[d2] = v2, nh([\n                    n2,\n                    t2,\n                    r2\n                ], e2 ? [\n                    e2\n                ] : [], function(t3) {\n                    if (t3 = t3[0], e2) var r3, a3 = t3.M, o3 = a3.W;\n                    else o3 = ny.prototype;\n                    t3 = U(d2, function() {\n                        if (Object.getPrototypeOf(this) !== c4) throw new k(\"Use 'new' to construct \" + l2);\n                        if (h3.X === void 0) throw new k(l2 + \" has no accessible constructor\");\n                        var n3 = h3.X[arguments.length];\n                        if (n3 === void 0) throw new k(\"Tried to invoke ctor of \" + l2 + \" with invalid number of parameters (\" + arguments.length + \") - expected (\" + Object.keys(h3.X).toString() + \") parameters instead!\");\n                        return n3.apply(this, arguments);\n                    });\n                    var c4 = Object.create(o3, {\n                        constructor: {\n                            value: t3\n                        }\n                    });\n                    t3.prototype = c4;\n                    var h3 = new nE(l2, t3, c4, p2, a3, i2, s2, f2);\n                    a3 = new nA(l2, h3, true, false), o3 = new nA(l2 + \"*\", h3, false, false);\n                    var v3 = new nA(l2 + \" const*\", h3, false, true);\n                    return nr[n2] = {\n                        pointerType: o3,\n                        ka: v3\n                    }, r3 = t3, u.hasOwnProperty(d2) || na(\"Replacing nonexistant public symbol\"), u[d2] = r3, u[d2].Y = void 0, [\n                        a3,\n                        o3,\n                        v3\n                    ];\n                });\n            },\n            d: function(n2, t2, r2, e2, a2, i2, o2) {\n                var s2 = nS(r2, e2);\n                t2 = B(t2), i2 = nb(a2, i2), nh([], [\n                    n2\n                ], function(n3) {\n                    function e3() {\n                        nI(\"Cannot call \" + a3 + \" due to unbound types\", s2);\n                    }\n                    var a3 = (n3 = n3[0]).name + \".\" + t2;\n                    t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]);\n                    var u2 = n3.M.constructor;\n                    return u2[t2] === void 0 ? (e3.Y = r2 - 1, u2[t2] = e3) : (nm(u2, t2, a3), u2[t2].R[r2 - 1] = e3), nh([], s2, function(n4) {\n                        return n4 = nw(a3, [\n                            n4[0],\n                            null\n                        ].concat(n4.slice(1)), null, i2, o2), u2[t2].R === void 0 ? (n4.Y = r2 - 1, u2[t2] = n4) : u2[t2].R[r2 - 1] = n4, [];\n                    }), [];\n                });\n            },\n            p: function(n2, t2, r2, e2, a2, i2) {\n                0 < t2 || w();\n                var o2 = nS(t2, r2);\n                a2 = nb(e2, a2), nh([], [\n                    n2\n                ], function(n3) {\n                    var r3 = \"constructor \" + (n3 = n3[0]).name;\n                    if (n3.M.X === void 0 && (n3.M.X = []), n3.M.X[t2 - 1] !== void 0) throw new k(\"Cannot register multiple constructors with identical number of parameters (\" + (t2 - 1) + \") for class '\" + n3.name + \"'! Overload resolution is currently only performed using the parameter count, not actual type info!\");\n                    return n3.M.X[t2 - 1] = ()=>{\n                        nI(\"Cannot construct \" + n3.name + \" due to unbound types\", o2);\n                    }, nh([], o2, function(e3) {\n                        return e3.splice(1, 0, null), n3.M.X[t2 - 1] = nw(r3, e3, null, a2, i2), [];\n                    }), [];\n                });\n            },\n            a: function(n2, t2, r2, e2, a2, i2, o2, s2) {\n                var u2 = nS(r2, e2);\n                t2 = B(t2), i2 = nb(a2, i2), nh([], [\n                    n2\n                ], function(n3) {\n                    function e3() {\n                        nI(\"Cannot call \" + a3 + \" due to unbound types\", u2);\n                    }\n                    var a3 = (n3 = n3[0]).name + \".\" + t2;\n                    t2.startsWith(\"@@\") && (t2 = Symbol[t2.substring(2)]), s2 && n3.M.ia.push(t2);\n                    var c3 = n3.M.W, f2 = c3[t2];\n                    return f2 === void 0 || f2.R === void 0 && f2.className !== n3.name && f2.Y === r2 - 2 ? (e3.Y = r2 - 2, e3.className = n3.name, c3[t2] = e3) : (nm(c3, t2, a3), c3[t2].R[r2 - 2] = e3), nh([], u2, function(e4) {\n                        return e4 = nw(a3, e4, n3, i2, o2), c3[t2].R === void 0 ? (e4.Y = r2 - 2, c3[t2] = e4) : c3[t2].R[r2 - 2] = e4, [];\n                    }), [];\n                });\n            },\n            A: function(n2, t2) {\n                nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        var t3 = j2(n3);\n                        return nR(n3), t3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return G(t3);\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: null\n                });\n            },\n            n: function(n2, t2, r2) {\n                r2 = np(r2), nv(n2, {\n                    name: t2 = B(t2),\n                    fromWireType: function(n3) {\n                        return n3;\n                    },\n                    toWireType: function(n3, t3) {\n                        return t3;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3, t3) {\n                        switch(t3){\n                            case 2:\n                                return function(n4) {\n                                    return this.fromWireType(T[n4 >> 2]);\n                                };\n                            case 3:\n                                return function(n4) {\n                                    return this.fromWireType(L[n4 >> 3]);\n                                };\n                            default:\n                                throw TypeError(\"Unknown float type: \" + n3);\n                        }\n                    }(t2, r2),\n                    U: null\n                });\n            },\n            e: function(n2, t2, r2, e2, a2) {\n                t2 = B(t2), a2 === -1 && (a2 = 4294967295), a2 = np(r2);\n                var i2 = (n3)=>n3;\n                if (e2 === 0) {\n                    var o2 = 32 - 8 * r2;\n                    i2 = (n3)=>n3 << o2 >>> o2;\n                }\n                r2 = t2.includes(\"unsigned\") ? function(n3, t3) {\n                    return t3 >>> 0;\n                } : function(n3, t3) {\n                    return t3;\n                }, nv(n2, {\n                    name: t2,\n                    fromWireType: i2,\n                    toWireType: r2,\n                    argPackAdvance: 8,\n                    readValueFromPointer: function(n3, t3, r3) {\n                        switch(t3){\n                            case 0:\n                                return r3 ? function(n4) {\n                                    return d[n4];\n                                } : function(n4) {\n                                    return y[n4];\n                                };\n                            case 1:\n                                return r3 ? function(n4) {\n                                    return m2[n4 >> 1];\n                                } : function(n4) {\n                                    return E[n4 >> 1];\n                                };\n                            case 2:\n                                return r3 ? function(n4) {\n                                    return g[n4 >> 2];\n                                } : function(n4) {\n                                    return _[n4 >> 2];\n                                };\n                            default:\n                                throw TypeError(\"Unknown integer type: \" + n3);\n                        }\n                    }(t2, a2, e2 !== 0),\n                    U: null\n                });\n            },\n            b: function(n2, t2, r2) {\n                function e2(n3) {\n                    n3 >>= 2;\n                    var t3 = _;\n                    return new a2(t3.buffer, t3[n3 + 1], t3[n3]);\n                }\n                var a2 = [\n                    Int8Array,\n                    Uint8Array,\n                    Int16Array,\n                    Uint16Array,\n                    Int32Array,\n                    Uint32Array,\n                    Float32Array,\n                    Float64Array\n                ][t2];\n                nv(n2, {\n                    name: r2 = B(r2),\n                    fromWireType: e2,\n                    argPackAdvance: 8,\n                    readValueFromPointer: e2\n                }, {\n                    ta: true\n                });\n            },\n            o: function(n2, t2) {\n                var r2 = (t2 = B(t2)) === \"std::string\";\n                nv(n2, {\n                    name: t2,\n                    fromWireType: function(n3) {\n                        var t3 = _[n3 >> 2], e2 = n3 + 4;\n                        if (r2) for(var a2 = e2, i2 = 0; i2 <= t3; ++i2){\n                            var o2 = e2 + i2;\n                            if (i2 == t3 || y[o2] == 0) {\n                                if (a2 = a2 ? p(y, a2, o2 - a2) : \"\", s2 === void 0) var s2 = a2;\n                                else s2 += \"\\x00\" + a2;\n                                a2 = o2 + 1;\n                            }\n                        }\n                        else {\n                            for(i2 = 0, s2 = Array(t3); i2 < t3; ++i2)s2[i2] = String.fromCharCode(y[e2 + i2]);\n                            s2 = s2.join(\"\");\n                        }\n                        return nZ(n3), s2;\n                    },\n                    toWireType: function(n3, t3) {\n                        t3 instanceof ArrayBuffer && (t3 = new Uint8Array(t3));\n                        var e2, a2 = typeof t3 == \"string\";\n                        if (a2 || t3 instanceof Uint8Array || t3 instanceof Uint8ClampedArray || t3 instanceof Int8Array || V(\"Cannot pass non-string to std::string\"), r2 && a2) {\n                            var i2 = 0;\n                            for(e2 = 0; e2 < t3.length; ++e2){\n                                var o2 = t3.charCodeAt(e2);\n                                127 >= o2 ? i2++ : 2047 >= o2 ? i2 += 2 : 55296 <= o2 && 57343 >= o2 ? (i2 += 4, ++e2) : i2 += 3;\n                            }\n                            e2 = i2;\n                        } else e2 = t3.length;\n                        if (o2 = (i2 = n$(4 + e2 + 1)) + 4, _[i2 >> 2] = e2, r2 && a2) {\n                            if (a2 = o2, o2 = e2 + 1, e2 = y, 0 < o2) {\n                                o2 = a2 + o2 - 1;\n                                for(var s2 = 0; s2 < t3.length; ++s2){\n                                    var u2 = t3.charCodeAt(s2);\n                                    if (55296 <= u2 && 57343 >= u2 && (u2 = 65536 + ((1023 & u2) << 10) | 1023 & t3.charCodeAt(++s2)), 127 >= u2) {\n                                        if (a2 >= o2) break;\n                                        e2[a2++] = u2;\n                                    } else {\n                                        if (2047 >= u2) {\n                                            if (a2 + 1 >= o2) break;\n                                            e2[a2++] = 192 | u2 >> 6;\n                                        } else {\n                                            if (65535 >= u2) {\n                                                if (a2 + 2 >= o2) break;\n                                                e2[a2++] = 224 | u2 >> 12;\n                                            } else {\n                                                if (a2 + 3 >= o2) break;\n                                                e2[a2++] = 240 | u2 >> 18, e2[a2++] = 128 | u2 >> 12 & 63;\n                                            }\n                                            e2[a2++] = 128 | u2 >> 6 & 63;\n                                        }\n                                        e2[a2++] = 128 | 63 & u2;\n                                    }\n                                }\n                                e2[a2] = 0;\n                            }\n                        } else if (a2) for(a2 = 0; a2 < e2; ++a2)255 < (s2 = t3.charCodeAt(a2)) && (nZ(o2), V(\"String has UTF-16 code units that do not fit in 8 bits\")), y[o2 + a2] = s2;\n                        else for(a2 = 0; a2 < e2; ++a2)y[o2 + a2] = t3[a2];\n                        return n3 !== null && n3.push(nZ, i2), i2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: function(n3) {\n                        nZ(n3);\n                    }\n                });\n            },\n            k: function(n2, t2, r2) {\n                if (r2 = B(r2), t2 === 2) var e2 = nW, a2 = nU, i2 = nM, o2 = ()=>E, s2 = 1;\n                else t2 === 4 && (e2 = nF, a2 = nD, i2 = nk, o2 = ()=>_, s2 = 2);\n                nv(n2, {\n                    name: r2,\n                    fromWireType: function(n3) {\n                        for(var r3, a3 = _[n3 >> 2], i3 = o2(), u2 = n3 + 4, c3 = 0; c3 <= a3; ++c3){\n                            var f2 = n3 + 4 + c3 * t2;\n                            (c3 == a3 || i3[f2 >> s2] == 0) && (u2 = e2(u2, f2 - u2), r3 === void 0 ? r3 = u2 : r3 += \"\\x00\" + u2, u2 = f2 + t2);\n                        }\n                        return nZ(n3), r3;\n                    },\n                    toWireType: function(n3, e3) {\n                        typeof e3 != \"string\" && V(\"Cannot pass non-string to C++ string type \" + r2);\n                        var o3 = i2(e3), u2 = n$(4 + o3 + t2);\n                        return _[u2 >> 2] = o3 >> s2, a2(e3, u2 + 4, o3 + t2), n3 !== null && n3.push(nZ, u2), u2;\n                    },\n                    argPackAdvance: 8,\n                    readValueFromPointer: nc,\n                    U: function(n3) {\n                        nZ(n3);\n                    }\n                });\n            },\n            m: function(n2, t2, r2, e2, a2, i2) {\n                ns2[n2] = {\n                    name: B(t2),\n                    ea: nb(r2, e2),\n                    V: nb(a2, i2),\n                    ha: []\n                };\n            },\n            c: function(n2, t2, r2, e2, a2, i2, o2, s2, u2, c3) {\n                ns2[n2].ha.push({\n                    na: B(t2),\n                    sa: r2,\n                    qa: nb(e2, a2),\n                    ra: i2,\n                    ya: o2,\n                    xa: nb(s2, u2),\n                    za: c3\n                });\n            },\n            C: function(n2, t2) {\n                nv(n2, {\n                    ua: true,\n                    name: t2 = B(t2),\n                    argPackAdvance: 0,\n                    fromWireType: function() {},\n                    toWireType: function() {}\n                });\n            },\n            t: function(n2, t2, r2, e2, a2) {\n                n2 = nG[n2], t2 = j2(t2), r2 = nj(r2);\n                var i2 = [];\n                return _[e2 >> 2] = G(i2), n2(t2, r2, i2, a2);\n            },\n            j: function(n2, t2, r2, e2) {\n                n2 = nG[n2], n2(t2 = j2(t2), r2 = nj(r2), null, e2);\n            },\n            f: nR,\n            g: function(n2, t2) {\n                var r2, e2, a2 = function(n3, t3) {\n                    for(var r3 = Array(n3), e3 = 0; e3 < n3; ++e3)r3[e3] = K(_[t3 + 4 * e3 >> 2], \"parameter \" + e3);\n                    return r3;\n                }(n2, t2), i2 = a2[0], o2 = nY[t2 = i2.name + \"_$\" + a2.slice(1).map(function(n3) {\n                    return n3.name;\n                }).join(\"_\") + \"$\"];\n                if (o2 !== void 0) return o2;\n                var s2 = Array(n2 - 1);\n                return r2 = (t3, r3, e3, o3)=>{\n                    for(var u2 = 0, c3 = 0; c3 < n2 - 1; ++c3)s2[c3] = a2[c3 + 1].readValueFromPointer(o3 + u2), u2 += a2[c3 + 1].argPackAdvance;\n                    for(c3 = 0, t3 = t3[r3].apply(t3, s2); c3 < n2 - 1; ++c3)a2[c3 + 1].la && a2[c3 + 1].la(s2[c3]);\n                    if (!i2.ua) return i2.toWireType(e3, t3);\n                }, e2 = nG.length, nG.push(r2), o2 = e2, nY[t2] = o2;\n            },\n            r: function(n2) {\n                4 < n2 && (M[n2].fa += 1);\n            },\n            s: function(n2) {\n                nu2(j2(n2)), nR(n2);\n            },\n            i: function() {\n                w(\"\");\n            },\n            x: function(n2, t2, r2) {\n                y.copyWithin(n2, t2, t2 + r2);\n            },\n            w: function(n2) {\n                var t2 = y.length;\n                if (2147483648 < (n2 >>>= 0)) return false;\n                for(var r2 = 1; 4 >= r2; r2 *= 2){\n                    var e2 = t2 * (1 + 0.2 / r2);\n                    e2 = Math.min(e2, n2 + 100663296);\n                    var a2 = Math, i2 = a2.min;\n                    e2 = Math.max(n2, e2), e2 += (65536 - e2 % 65536) % 65536;\n                    n: {\n                        var o2 = l.buffer;\n                        try {\n                            l.grow(i2.call(a2, 2147483648, e2) - o2.byteLength + 65535 >>> 16), v();\n                            var s2 = 1;\n                            break n;\n                        } catch (n3) {}\n                        s2 = void 0;\n                    }\n                    if (s2) return true;\n                }\n                return false;\n            },\n            z: function() {\n                return 52;\n            },\n            u: function() {\n                return 70;\n            },\n            y: function(n2, t2, r2, e2) {\n                for(var a2 = 0, i2 = 0; i2 < r2; i2++){\n                    var u2 = _[t2 >> 2], c3 = _[t2 + 4 >> 2];\n                    t2 += 8;\n                    for(var f2 = 0; f2 < c3; f2++){\n                        var l2 = y[u2 + f2], h2 = nX[n2];\n                        l2 === 0 || l2 === 10 ? ((n2 === 1 ? o : s)(p(h2, 0)), h2.length = 0) : h2.push(l2);\n                    }\n                    a2 += c3;\n                }\n                return _[e2 >> 2] = a2, 0;\n            }\n        };\n        !function() {\n            function n2(n3) {\n                u.asm = n3.exports, l = u.asm.D, v(), A = u.asm.I, P.unshift(u.asm.E), --N == 0 && I2 && (n3 = I2, I2 = null, n3());\n            }\n            function t2(t3) {\n                n2(t3.instance);\n            }\n            function e2(n3) {\n                return (typeof fetch == \"function\" ? fetch(r, {\n                    credentials: \"same-origin\"\n                }).then(function(n4) {\n                    if (!n4.ok) throw \"failed to load wasm binary file at '\" + r + \"'\";\n                    return n4.arrayBuffer();\n                }).catch(function() {\n                    return R2();\n                }) : Promise.resolve().then(function() {\n                    return R2();\n                })).then(function(n4) {\n                    return WebAssembly.instantiate(n4, a2);\n                }).then(function(n4) {\n                    return n4;\n                }).then(n3, function(n4) {\n                    s(\"failed to asynchronously prepare wasm: \" + n4), w(n4);\n                });\n            }\n            var a2 = {\n                a: nx\n            };\n            if (N++, u.instantiateWasm) try {\n                return u.instantiateWasm(a2, n2);\n            } catch (n3) {\n                s(\"Module.instantiateWasm callback failed with error: \" + n3), f(n3);\n            }\n            (typeof WebAssembly.instantiateStreaming != \"function\" || S() || typeof fetch != \"function\" ? e2(t2) : fetch(r, {\n                credentials: \"same-origin\"\n            }).then(function(n3) {\n                return WebAssembly.instantiateStreaming(n3, a2).then(t2, function(n4) {\n                    return s(\"wasm streaming compile failed: \" + n4), s(\"falling back to ArrayBuffer instantiation\"), e2(t2);\n                });\n            })).catch(f);\n        }();\n        var nz = u.___getTypeName = function() {\n            return (nz = u.___getTypeName = u.asm.F).apply(null, arguments);\n        };\n        function n$() {\n            return (n$ = u.asm.H).apply(null, arguments);\n        }\n        function nZ() {\n            return (nZ = u.asm.J).apply(null, arguments);\n        }\n        function nJ() {\n            0 < N || (C(O), 0 < N || e || (e = true, u.calledRun = true, h || (C(P), c2(u), C(b))));\n        }\n        return u.__embind_initialize_bindings = function() {\n            return (u.__embind_initialize_bindings = u.asm.G).apply(null, arguments);\n        }, u.dynCall_jiji = function() {\n            return (u.dynCall_jiji = u.asm.K).apply(null, arguments);\n        }, I2 = function n2() {\n            e || nJ(), e || (I2 = n2);\n        }, nJ(), t.ready;\n    };\n})();\nasync function initYoga(t) {\n    let r = await yoga({\n        instantiateWasm (n, r2) {\n            WebAssembly.instantiate(t, n).then((n2)=>{\n                n2 instanceof WebAssembly.Instance ? r2(n2) : r2(n2.instance);\n            });\n        }\n    });\n    return wrapAsm(r);\n}\n// node_modules/.pnpm/@resvg+resvg-wasm@2.4.1/node_modules/@resvg/resvg-wasm/index.mjs\nvar resvg_wasm_exports = {};\n__export(resvg_wasm_exports, {\n    Resvg: ()=>Resvg2,\n    initWasm: ()=>initWasm\n});\nvar wasm;\nvar heap = new Array(128).fill(void 0);\nheap.push(void 0, null, true, false);\nvar heap_next = heap.length;\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction getObject(idx) {\n    return heap[idx];\n}\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nvar WASM_VECTOR_LEN = 0;\nvar cachedUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\nvar cachedTextEncoder = new TextEncoder(\"utf-8\");\nvar encodeString = typeof cachedTextEncoder.encodeInto === \"function\" ? function(arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n} : function(arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n};\nfunction passStringToWasm0(arg, malloc, realloc) {\n    if (realloc === void 0) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr2 = malloc(buf.length);\n        getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr2;\n    }\n    let len = arg.length;\n    let ptr = malloc(len);\n    const mem = getUint8Memory0();\n    let offset = 0;\n    for(; offset < len; offset++){\n        const code = arg.charCodeAt(offset);\n        if (code > 127) break;\n        mem[ptr + offset] = code;\n    }\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        offset += ret.written;\n    }\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\nfunction isLikeNone(x) {\n    return x === void 0 || x === null;\n}\nvar cachedInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\nvar cachedTextDecoder = new TextDecoder(\"utf-8\", {\n    ignoreBOM: true,\n    fatal: true\n});\ncachedTextDecoder.decode();\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\nvar BBox = class {\n    static __wrap(ptr) {\n        const obj = Object.create(BBox.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_bbox_free(ptr);\n    }\n    get x() {\n        const ret = wasm.__wbg_get_bbox_x(this.ptr);\n        return ret;\n    }\n    set x(arg0) {\n        wasm.__wbg_set_bbox_x(this.ptr, arg0);\n    }\n    get y() {\n        const ret = wasm.__wbg_get_bbox_y(this.ptr);\n        return ret;\n    }\n    set y(arg0) {\n        wasm.__wbg_set_bbox_y(this.ptr, arg0);\n    }\n    get width() {\n        const ret = wasm.__wbg_get_bbox_width(this.ptr);\n        return ret;\n    }\n    set width(arg0) {\n        wasm.__wbg_set_bbox_width(this.ptr, arg0);\n    }\n    get height() {\n        const ret = wasm.__wbg_get_bbox_height(this.ptr);\n        return ret;\n    }\n    set height(arg0) {\n        wasm.__wbg_set_bbox_height(this.ptr, arg0);\n    }\n};\nvar RenderedImage = class {\n    static __wrap(ptr) {\n        const obj = Object.create(RenderedImage.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_renderedimage_free(ptr);\n    }\n    get width() {\n        const ret = wasm.renderedimage_width(this.ptr);\n        return ret >>> 0;\n    }\n    get height() {\n        const ret = wasm.renderedimage_height(this.ptr);\n        return ret >>> 0;\n    }\n    asPng() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.renderedimage_asPng(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    get pixels() {\n        const ret = wasm.renderedimage_pixels(this.ptr);\n        return takeObject(ret);\n    }\n};\nvar Resvg = class {\n    static __wrap(ptr) {\n        const obj = Object.create(Resvg.prototype);\n        obj.ptr = ptr;\n        return obj;\n    }\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        return ptr;\n    }\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_resvg_free(ptr);\n    }\n    constructor(svg, options){\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(options) ? 0 : passStringToWasm0(options, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.resvg_new(retptr, addHeapObject(svg), ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Resvg.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    get width() {\n        const ret = wasm.resvg_width(this.ptr);\n        return ret;\n    }\n    get height() {\n        const ret = wasm.resvg_height(this.ptr);\n        return ret;\n    }\n    render() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_render(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RenderedImage.__wrap(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    toString() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_toString(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    innerBBox() {\n        const ret = wasm.resvg_innerBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    getBBox() {\n        const ret = wasm.resvg_getBBox(this.ptr);\n        return ret === 0 ? void 0 : BBox.__wrap(ret);\n    }\n    cropByBBox(bbox) {\n        _assertClass(bbox, BBox);\n        wasm.resvg_cropByBBox(this.ptr, bbox.ptr);\n    }\n    imagesToResolve() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.resvg_imagesToResolve(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    resolveImage(href, buffer) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(href, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.resvg_resolveImage(retptr, this.ptr, ptr0, len0, addHeapObject(buffer));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally{\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n};\nasync function load2(module, imports) {\n    if (typeof Response === \"function\" && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \"function\") {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n            } catch (e) {\n                if (module.headers.get(\"Content-Type\") != \"application/wasm\") {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                } else {\n                    throw e;\n                }\n            }\n        }\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n        if (instance instanceof WebAssembly.Instance) {\n            return {\n                instance,\n                module\n            };\n        } else {\n            return instance;\n        }\n    }\n}\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_15d3966e9981a196 = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_cf65c07de34b9a08 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_9fb2f11355ecadf5 = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_537b7341ce90bb31 = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Uint8Array_01cebe79ca606cca = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch (e) {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof obj === \"string\" ? obj : void 0;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new_b525de17f44a8943 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_49c286f04dd3bf59 = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_length_27a2afe8ab42b09f = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_17499e8aa4003ebd = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    return imports;\n}\nfunction initMemory(imports, maybe_memory) {}\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n    return wasm;\n}\nasync function init(input) {\n    if (typeof input === \"undefined\") {\n        input = new URL(\"index_bg.wasm\", void 0);\n    }\n    const imports = getImports();\n    if (typeof input === \"string\" || typeof Request === \"function\" && input instanceof Request || typeof URL === \"function\" && input instanceof URL) {\n        input = fetch(input);\n    }\n    initMemory(imports);\n    const { instance , module  } = await load2(await input, imports);\n    return finalizeInit(instance, module);\n}\nvar dist_default = init;\nvar initialized = false;\nvar initWasm = async (module_or_path)=>{\n    if (initialized) {\n        throw new Error(\"Already initialized. The `initWasm()` function can be used only once.\");\n    }\n    await dist_default(await module_or_path);\n    initialized = true;\n};\nvar Resvg2 = class extends Resvg {\n    constructor(svg, options){\n        if (!initialized) throw new Error(\"Wasm has not been initialized. Call `initWasm()` function.\");\n        super(svg, JSON.stringify(options));\n    }\n};\n// src/index.node.ts\n\n\n\n// src/emoji/index.ts\nvar U200D = String.fromCharCode(8205);\nvar UFE0Fg = /\\uFE0F/g;\nfunction getIconCode(char) {\n    return toCodePoint(char.indexOf(U200D) < 0 ? char.replace(UFE0Fg, \"\") : char);\n}\nfunction toCodePoint(unicodeSurrogates) {\n    var r = [], c2 = 0, p = 0, i = 0;\n    while(i < unicodeSurrogates.length){\n        c2 = unicodeSurrogates.charCodeAt(i++);\n        if (p) {\n            r.push((65536 + (p - 55296 << 10) + (c2 - 56320)).toString(16));\n            p = 0;\n        } else if (55296 <= c2 && c2 <= 56319) {\n            p = c2;\n        } else {\n            r.push(c2.toString(16));\n        }\n    }\n    return r.join(\"-\");\n}\nvar apis = {\n    twemoji: (code)=>\"https://cdn.jsdelivr.net/gh/twitter/twemoji@14.0.2/assets/svg/\" + code.toLowerCase() + \".svg\",\n    openmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/openmoji@2.0.0/svg/\",\n    blobmoji: \"https://cdn.jsdelivr.net/npm/@svgmoji/blob@2.0.0/svg/\",\n    noto: \"https://cdn.jsdelivr.net/gh/svgmoji/svgmoji/packages/svgmoji__noto/svg/\",\n    fluent: (code)=>\"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_color.svg\",\n    fluentFlat: (code)=>\"https://cdn.jsdelivr.net/gh/shuding/fluentui-emoji-unicode/assets/\" + code.toLowerCase() + \"_flat.svg\"\n};\nfunction loadEmoji(code, type) {\n    if (!type || !apis[type]) {\n        type = \"twemoji\";\n    }\n    const api = apis[type];\n    if (typeof api === \"function\") {\n        return fetch(api(code));\n    }\n    return fetch(`${api}${code.toUpperCase()}.svg`);\n}\n// src/og.ts\nvar languageFontMap = {\n    \"ja-JP\": \"Noto+Sans+JP\",\n    \"ko-KR\": \"Noto+Sans+KR\",\n    \"zh-CN\": \"Noto+Sans+SC\",\n    \"zh-TW\": \"Noto+Sans+TC\",\n    \"zh-HK\": \"Noto+Sans+HK\",\n    \"th-TH\": \"Noto+Sans+Thai\",\n    \"bn-IN\": \"Noto+Sans+Bengali\",\n    \"ar-AR\": \"Noto+Sans+Arabic\",\n    \"ta-IN\": \"Noto+Sans+Tamil\",\n    \"ml-IN\": \"Noto+Sans+Malayalam\",\n    \"he-IL\": \"Noto+Sans+Hebrew\",\n    \"te-IN\": \"Noto+Sans+Telugu\",\n    devanagari: \"Noto+Sans+Devanagari\",\n    kannada: \"Noto+Sans+Kannada\",\n    symbol: [\n        \"Noto+Sans+Symbols\",\n        \"Noto+Sans+Symbols+2\"\n    ],\n    math: \"Noto+Sans+Math\",\n    unknown: \"Noto+Sans\"\n};\nasync function loadGoogleFont(font, text) {\n    if (!font || !text) return;\n    const API = `https://fonts.googleapis.com/css2?family=${font}&text=${encodeURIComponent(text)}`;\n    const css = await (await fetch(API, {\n        headers: {\n            \"User-Agent\": \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; de-at) AppleWebKit/533.21.1 (KHTML, like Gecko) Version/5.0.5 Safari/533.21.1\"\n        }\n    })).text();\n    const resource = css.match(/src: url\\((.+)\\) format\\('(opentype|truetype)'\\)/);\n    if (!resource) throw new Error(\"Failed to load font\");\n    return fetch(resource[1]).then((res)=>res.arrayBuffer());\n}\nvar assetCache = /* @__PURE__ */ new Map();\nvar loadDynamicAsset = ({ emoji  })=>{\n    const fn2 = async (code, text)=>{\n        if (code === \"emoji\") {\n            return `data:image/svg+xml;base64,` + btoa(await (await loadEmoji(getIconCode(text), emoji)).text());\n        }\n        if (!languageFontMap[code]) code = \"unknown\";\n        try {\n            const data = await loadGoogleFont(languageFontMap[code], text);\n            if (data) {\n                return {\n                    name: `satori_${code}_fallback_${text}`,\n                    data,\n                    weight: 400,\n                    style: \"normal\"\n                };\n            }\n        } catch (e) {\n            console.error(\"Failed to load dynamic font for\", text, \". Error:\", e);\n        }\n    };\n    return async (...args)=>{\n        const key = JSON.stringify(args);\n        const cache = assetCache.get(key);\n        if (cache) return cache;\n        const asset = await fn2(...args);\n        assetCache.set(key, asset);\n        return asset;\n    };\n};\nasync function render(satori2, resvg, opts, defaultFonts, element) {\n    const options = Object.assign({\n        width: 1200,\n        height: 630,\n        debug: false\n    }, opts);\n    const svg = await satori2(element, {\n        width: options.width,\n        height: options.height,\n        debug: options.debug,\n        fonts: options.fonts || defaultFonts,\n        loadAdditionalAsset: loadDynamicAsset({\n            emoji: options.emoji\n        })\n    });\n    const resvgJS = new resvg.Resvg(svg, {\n        fitTo: {\n            mode: \"width\",\n            value: options.width\n        }\n    });\n    return resvgJS.render().asPng();\n}\n// src/index.node.ts\nvar satori = Hu.default || Hu;\nvar fontData = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(`${\"file:///Users/neil/apps/react-tailwind-ui/node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js\"}/../noto-sans-v27-latin-regular.ttf`));\nvar yoga_wasm = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(`${\"file:///Users/neil/apps/react-tailwind-ui/node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js\"}/../yoga.wasm`));\nvar resvg_wasm = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync((0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(`${\"file:///Users/neil/apps/react-tailwind-ui/node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js\"}/../resvg.wasm`));\nvar initializedResvg = initWasm(resvg_wasm);\nvar initializedYoga = initYoga(yoga_wasm).then((yoga2)=>nl(yoga2));\nvar _a2, _b2;\nvar isDev = ((_b2 = (_a2 = globalThis == null ? void 0 : globalThis.process) == null ? void 0 : _a2.env) == null ? void 0 : _b2.NODE_ENV) === \"development\";\nvar ImageResponse = class {\n    constructor(element, options = {}){\n        if (typeof Response === \"undefined\" || typeof ReadableStream === \"undefined\") {\n            throw new Error(\"The `ImageResponse` API is not supported in this runtime, use the `unstable_createNodejsStream` API instead or switch to the Vercel Edge Runtime.\");\n        }\n        const result = new ReadableStream({\n            async start (controller) {\n                await initializedYoga;\n                await initializedResvg;\n                const fonts = [\n                    {\n                        name: \"sans serif\",\n                        data: fontData,\n                        weight: 700,\n                        style: \"normal\"\n                    }\n                ];\n                const result2 = await render(satori, resvg_wasm_exports, options, fonts, element);\n                controller.enqueue(result2);\n                controller.close();\n            }\n        });\n        return new Response(result, {\n            headers: {\n                \"content-type\": \"image/png\",\n                \"cache-control\": isDev ? \"no-cache, no-store\" : \"public, immutable, no-transform, max-age=31536000\",\n                ...options.headers\n            },\n            status: options.status,\n            statusText: options.statusText\n        });\n    }\n};\nasync function unstable_createNodejsStream(element, options = {}) {\n    await initializedYoga;\n    await initializedResvg;\n    const fonts = [\n        {\n            name: \"sans serif\",\n            data: fontData,\n            weight: 700,\n            style: \"normal\"\n        }\n    ];\n    const result = await render(satori, resvg_wasm_exports, options, fonts, element);\n    return stream__WEBPACK_IMPORTED_MODULE_0__.Readable.from(Buffer.from(result));\n}\n /*!\n * https://github.com/gilmoreorless/css-background-parser\n * Copyright © 2015 Gilmore Davidson under the MIT license: http://gilmoreorless.mit-license.org/\n */  /*! Copyright Twitter Inc. and other contributors. Licensed under MIT */  //# sourceMappingURL=index.node.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(sc_server)/./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js\n");

/***/ })

};
;